This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitignore
.husky/commit-msg
.husky/pre-commit
.lintstagedrc.yml
backend/.env.test
backend/.gitignore
backend/.lintstagedrc.yml
backend/eslint.config.mjs
backend/jest.config.cjs
backend/package.json
backend/src/emails/_footer.mjml
backend/src/emails/_head.mjml
backend/src/emails/_header.mjml
backend/src/emails/dist/ideaBlocked.html
backend/src/emails/dist/mostLikedIdeas.html
backend/src/emails/dist/welcome.html
backend/src/emails/ideaBlocked.mjml
backend/src/emails/mostLikedIdeas.mjml
backend/src/emails/welcome.mjml
backend/src/index.ts
backend/src/lib/brevo.mock.ts
backend/src/lib/brevo.ts
backend/src/lib/cron.ts
backend/src/lib/ctx.ts
backend/src/lib/email/index.ts
backend/src/lib/email/utils.mock.ts
backend/src/lib/email/utils.ts
backend/src/lib/emails.ts
backend/src/lib/env.ts
backend/src/lib/error.ts
backend/src/lib/ideas.ts
backend/src/lib/logger.ts
backend/src/lib/models.ts
backend/src/lib/passport.ts
backend/src/lib/prisma.ts
backend/src/lib/s3.ts
backend/src/lib/sentry.ts
backend/src/lib/trpc.ts
backend/src/prisma/migrations/20250308164954_add_idea_model/migration.sql
backend/src/prisma/migrations/20250309133435_added_datetime/migration.sql
backend/src/prisma/migrations/20250310115236_added_user_shema/migration.sql
backend/src/prisma/migrations/20250312104124_added_relations/migration.sql
backend/src/prisma/migrations/20250320183204_added_name_to_user/migration.sql
backend/src/prisma/migrations/20250321191512_added_serial_number/migration.sql
backend/src/prisma/migrations/20250324143247_added_likes/migration.sql
backend/src/prisma/migrations/20250325190313_added_permissions_and_blocked_at/migration.sql
backend/src/prisma/migrations/20250328170440_temp_email/migration.sql
backend/src/prisma/migrations/20250328170601_set_email_to_user/migration.sql
backend/src/prisma/migrations/20250328170906_added_unique_email_to_user/migration.sql
backend/src/prisma/migrations/20250412115056_added_avatar/migration.sql
backend/src/prisma/migrations/20250413131336_added_images_to_idea/migration.sql
backend/src/prisma/migrations/20250413150834_added_certificate/migration.sql
backend/src/prisma/migrations/20250413150957_added_docs/migration.sql
backend/src/prisma/migrations/migration_lock.toml
backend/src/prisma/schema.prisma
backend/src/router/auth/getMe/index.ts
backend/src/router/auth/SignIn/index.ts
backend/src/router/auth/SignIn/input.ts
backend/src/router/auth/SignUp/index.ts
backend/src/router/auth/SignUp/input.ts
backend/src/router/auth/UpdatePassword/index.ts
backend/src/router/auth/UpdatePassword/input.ts
backend/src/router/auth/UpdateProfile/index.ts
backend/src/router/auth/UpdateProfile/input.ts
backend/src/router/ideas/blockIdea/index.ts
backend/src/router/ideas/blockIdea/input.ts
backend/src/router/ideas/CreateIdea/index.ts
backend/src/router/ideas/CreateIdea/input.ts
backend/src/router/ideas/getIdea/index.ts
backend/src/router/ideas/getIdeas/index.ts
backend/src/router/ideas/getIdeas/input.ts
backend/src/router/ideas/setIdeaLike/index.integration.test.ts
backend/src/router/ideas/setIdeaLike/index.ts
backend/src/router/ideas/setIdeaLike/input.ts
backend/src/router/ideas/UpdateIdea/index.ts
backend/src/router/ideas/UpdateIdea/input.ts
backend/src/router/index.ts
backend/src/router/upload/prepareCLoudinaryUpload/index.ts
backend/src/router/upload/prepareCLoudinaryUpload/input.ts
backend/src/router/upload/prepareS3Upload/index.ts
backend/src/router/upload/prepareS3Upload/input.ts
backend/src/scripts/notifyAboutLikedIdeas.integration.test.ts
backend/src/scripts/notifyAboutLkedIdeas.ts
backend/src/scripts/presetDB.ts
backend/src/test/integration.ts
backend/src/utils/can.ts
backend/src/utils/can.unit.test.ts
backend/src/utils/deepMap.ts
backend/src/utils/deepMap.unit.test.ts
backend/src/utils/getPasswordHash.ts
backend/src/utils/getRandomString.ts
backend/src/utils/signJWT.ts
backend/src/utils/types.ts
backend/tsconfig.build.json
backend/tsconfig.json
eslint.config.mjs
jest.config.cjs
package.json
pnpm-workspace.yaml
shared/.lintstagedrc.yml
shared/jest.config.js
shared/package.json
shared/src/cloudinary.ts
shared/src/env.ts
shared/src/getKeysAsArray.ts
shared/src/omit.ts
shared/src/pick.ts
shared/src/s3.ts
shared/src/zod.ts
shared/tsconfig.json
stepik.session.sql
web-stepik/.gitignore
web-stepik/.lintstagedrc.yml
web-stepik/.pnpm/lock.yaml
web-stepik/.stylelintrc.yml
web-stepik/eslint.config.mjs
web-stepik/index.html
web-stepik/jest.config.cjs
web-stepik/package.json
web-stepik/public/favicon.svg
web-stepik/public/site.webmanifest
web-stepik/README.md
web-stepik/src/App.tsx
web-stepik/src/assets/AkarAir.tsx
web-stepik/src/assets/capy.svg
web-stepik/src/assets/logo.svg
web-stepik/src/assets/react.svg
web-stepik/src/components/Alert/index.js
web-stepik/src/components/Alert/index.module.scss
web-stepik/src/components/Alert/index.tsx
web-stepik/src/components/Button/index.module.scss
web-stepik/src/components/Button/index.tsx
web-stepik/src/components/ErrorPageComponent/index.js
web-stepik/src/components/ErrorPageComponent/index.tsx
web-stepik/src/components/Form/index.tsx
web-stepik/src/components/FormItems/index.js
web-stepik/src/components/FormItems/index.module.scss
web-stepik/src/components/FormItems/index.tsx
web-stepik/src/components/Icon/index.tsx
web-stepik/src/components/input/index.js
web-stepik/src/components/input/index.module.scss
web-stepik/src/components/input/index.tsx
web-stepik/src/components/layout/index.module.scss
web-stepik/src/components/layout/index.tsx
web-stepik/src/components/Loader/index.js
web-stepik/src/components/Loader/index.module.scss
web-stepik/src/components/Loader/index.tsx
web-stepik/src/components/NotAuthRouteTracker/index.tsx
web-stepik/src/components/Segments/index.js
web-stepik/src/components/Segments/index.module.scss
web-stepik/src/components/Segments/index.tsx
web-stepik/src/components/textarea/index.js
web-stepik/src/components/textarea/index.module.scss
web-stepik/src/components/textarea/index.tsx
web-stepik/src/components/UploadMoreToCloudinary/index.module.scss
web-stepik/src/components/UploadMoreToCloudinary/index.tsx
web-stepik/src/components/UploadsToS3/index.module.scss
web-stepik/src/components/UploadsToS3/index.tsx
web-stepik/src/components/UploadToCloudinary/index.module.scss
web-stepik/src/components/UploadToCloudinary/index.tsx
web-stepik/src/components/uploadToS3/index.module.scss
web-stepik/src/components/uploadToS3/index.tsx
web-stepik/src/main.tsx
web-stepik/src/pages/auth/EditProfilePage/index.tsx
web-stepik/src/pages/auth/SignInPage/index.tsx
web-stepik/src/pages/auth/SignOutPage/index.tsx
web-stepik/src/pages/auth/SignUpPage/index.tsx
web-stepik/src/pages/ideas/AllIdeas/index.module.scss
web-stepik/src/pages/ideas/AllIdeas/index.tsx
web-stepik/src/pages/ideas/EditIdeaPage/index.tsx
web-stepik/src/pages/ideas/NewIdeaPage/index.tsx
web-stepik/src/pages/ideas/NewIdeaPage/style.module.scss
web-stepik/src/pages/ideas/ViewIdea/index.module.scss
web-stepik/src/pages/ideas/ViewIdea/index.tsx
web-stepik/src/pages/other/NotFoundPage/index.js
web-stepik/src/pages/other/NotFoundPage/index.module.scss
web-stepik/src/pages/other/NotFoundPage/index.tsx
web-stepik/src/styles/_mixins.scss
web-stepik/src/styles/_vars.scss
web-stepik/src/styles/global.scss
web-stepik/src/types.d.ts
web-stepik/src/utils/ctx.tsx
web-stepik/src/utils/env.ts
web-stepik/src/utils/pageWrapper.tsx
web-stepik/src/utils/pumpGetRoute.ts
web-stepik/src/utils/pumpGetRoute.unit.test.ts
web-stepik/src/utils/routes.ts
web-stepik/src/utils/sentry.tsx
web-stepik/src/utils/trpc.tsx
web-stepik/src/vite-env.d.ts
web-stepik/tsconfig.app.json
web-stepik/tsconfig.json
web-stepik/tsconfig.node.json
web-stepik/tsconfig.tsbuildinfo
web-stepik/vite.config.d.ts
web-stepik/vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="backend/.env.test">
DATABASE_URL=postgresql://ideanick-test:ideanick-test@localhost:5432/ideanick-test?schema=public
DEBUG=
</file>

<file path="backend/eslint.config.mjs">
import { defineConfig } from "eslint/config";
import path from 'path';
import tsParser from '@typescript-eslint/parser';
import tsPlugin from '@typescript-eslint/eslint-plugin';
import importPlugin from 'eslint-plugin-import';

export default defineConfig([{
    files: ['**/*.ts', '**/*.tsx', '**/*.js'],
    ignores: ['jest.config.js'],
    plugins: {
        '@typescript-eslint': tsPlugin,
        'import': importPlugin
      },
    languageOptions: {
        ecmaVersion: 5,
        sourceType: "script",
        parser: tsParser,
        parserOptions: {
            project: "./tsconfig.json",
        },
    },

    settings: {
        "import/resolver": {
            node: {
                extensions: [".js", ".ts", ".tsx"],
            },
        },
    },

    rules: {
        "no-console": "error",

        "no-restricted-imports": ["error", {
        patterns: [{
          group: [
            path.join(process.cwd(), "src/test/**"),
            `!${path.join(process.cwd(), "src/**/*.integration.test.ts")}`
          ],
          message: "Import from test dir is only allowed in integration test files",
        }]
      }],

      "import/order": ["error", {
            groups: ["builtin", "external", "parent", "sibling", "index"],

            pathGroups: [{
                pattern: "{.,..}/**/env\n",
                group: "builtin",
                position: "before",
            }, {
                pattern: "{.,..}/**/test/integration\n",
                group: "builtin",
                position: "before",
            }],

            alphabetize: {
                order: "asc",
                caseInsensitive: false,
                orderImportKind: "asc",
            },
        }],
    },
}]);
</file>

<file path="backend/jest.config.cjs">
/** @type {import('ts-jest').JestConfigWithTsJest} */
module.exports = {
    ...require('../jest.config.cjs'),
  }
</file>

<file path="backend/src/emails/dist/ideaBlocked.html">
<!doctype html>
<html lang="und" dir="auto" xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">

<head>
  <title>Your Idea Blocked!</title>
  <!--[if !mso]><!-->
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <!--<![endif]-->
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style type="text/css">
    #outlook a {
      padding: 0;
    }

    body {
      margin: 0;
      padding: 0;
      -webkit-text-size-adjust: 100%;
      -ms-text-size-adjust: 100%;
    }

    table,
    td {
      border-collapse: collapse;
      mso-table-lspace: 0pt;
      mso-table-rspace: 0pt;
    }

    img {
      border: 0;
      height: auto;
      line-height: 100%;
      outline: none;
      text-decoration: none;
      -ms-interpolation-mode: bicubic;
    }

    p {
      display: block;
      margin: 13px 0;
    }

  </style>
  <!--[if mso]>
    <noscript>
    <xml>
    <o:OfficeDocumentSettings>
      <o:AllowPNG/>
      <o:PixelsPerInch>96</o:PixelsPerInch>
    </o:OfficeDocumentSettings>
    </xml>
    </noscript>
    <![endif]-->
  <!--[if lte mso 11]>
    <style type="text/css">
      .mj-outlook-group-fix { width:100% !important; }
    </style>
    <![endif]-->
  <!--[if !mso]><!-->
  <link href="https://fonts.googleapis.com/css?family=Ubuntu:300,400,500,700" rel="stylesheet" type="text/css">
  <style type="text/css">
    @import url(https://fonts.googleapis.com/css?family=Ubuntu:300,400,500,700);

  </style>
  <!--<![endif]-->
  <style type="text/css">
    @media only screen and (min-width:480px) {
      .mj-column-per-100 {
        width: 100% !important;
        max-width: 100%;
      }
    }

  </style>
  <style media="screen and (min-width:480px)">
    .moz-text-html .mj-column-per-100 {
      width: 100% !important;
      max-width: 100%;
    }

  </style>
  <style type="text/css">
    .unsubscribe-link {
      color: #aaaaaa !important;
    }

  </style>
</head>

<body style="word-spacing:normal;background-color:#ffffff;">
  <div style="background-color:#ffffff;" lang="und" dir="auto">
    <!--[if mso | IE]><table align="center" border="0" cellpadding="0" cellspacing="0" class="" role="presentation" style="width:600px;" width="600" ><tr><td style="line-height:0px;font-size:0px;mso-line-height-rule:exactly;"><![endif]-->
    <div style="margin:0px auto;max-width:600px;">
      <table align="center" border="0" cellpadding="0" cellspacing="0" role="presentation" style="width:100%;">
        <tbody>
          <tr>
            <td style="direction:ltr;font-size:0px;padding:0;text-align:center;">
              <!--[if mso | IE]><table role="presentation" border="0" cellpadding="0" cellspacing="0"><tr><td class="" style="vertical-align:top;width:600px;" ><![endif]-->
              <div class="mj-column-per-100 mj-outlook-group-fix" style="font-size:0px;text-align:left;direction:ltr;display:inline-block;vertical-align:top;width:100%;">
                <table border="0" cellpadding="0" cellspacing="0" role="presentation" style="vertical-align:top;" width="100%">
                  <tbody>
                    <tr>
                      <td align="left" style="font-size:0px;padding:10px 25px;padding-top:20px;padding-bottom:30px;word-break:break-word;">
                        <div style="font-family:Ubuntu, Helvetica, Arial, sans-serif;font-size:16px;font-weight:bold;line-height:38px;text-align:left;color:#222222;"><a class="link-nostyle" href="{{homeUrl}}" style="color: inherit; text-decoration: none;">IdeaNick</a></div>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
              <!--[if mso | IE]></td></tr></table><![endif]-->
            </td>
          </tr>
        </tbody>
      </table>
    </div>
    <!--[if mso | IE]></td></tr></table><table align="center" border="0" cellpadding="0" cellspacing="0" class="" role="presentation" style="width:600px;" width="600" bgcolor="#ffffff" ><tr><td style="line-height:0px;font-size:0px;mso-line-height-rule:exactly;"><![endif]-->
    <div style="background:#ffffff;background-color:#ffffff;margin:0px auto;max-width:600px;">
      <table align="center" border="0" cellpadding="0" cellspacing="0" role="presentation" style="background:#ffffff;background-color:#ffffff;width:100%;">
        <tbody>
          <tr>
            <td style="direction:ltr;font-size:0px;padding:20px 0;text-align:center;">
              <!--[if mso | IE]><table role="presentation" border="0" cellpadding="0" cellspacing="0"><tr><td class="" style="vertical-align:top;width:600px;" ><![endif]-->
              <div class="mj-column-per-100 mj-outlook-group-fix" style="font-size:0px;text-align:left;direction:ltr;display:inline-block;vertical-align:top;width:100%;">
                <table border="0" cellpadding="0" cellspacing="0" role="presentation" style="vertical-align:top;" width="100%">
                  <tbody>
                    <tr>
                      <td align="left" style="font-size:0px;padding:10px 25px;padding-bottom:10px;word-break:break-word;">
                        <div style="font-family:Rubik, Helvetica, Arial;font-size:24px;font-weight:bold;line-height:30px;text-align:left;color:#222222;">Your Idea Blocked!</div>
                      </td>
                    </tr>
                    <tr>
                      <td align="left" class="text" style="font-size:0px;padding:10px 25px;word-break:break-word;">
                        <div style="font-family:Rubik, Helvetica, Arial;font-size:16px;line-height:26px;text-align:left;color:#222222;">Sorry, but we block your idea "{{ideaNick}}"</div>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
              <!--[if mso | IE]></td></tr></table><![endif]-->
            </td>
          </tr>
        </tbody>
      </table>
    </div>
    <!--[if mso | IE]></td></tr></table><table align="center" border="0" cellpadding="0" cellspacing="0" class="" role="presentation" style="width:600px;" width="600" ><tr><td style="line-height:0px;font-size:0px;mso-line-height-rule:exactly;"><![endif]-->
    <div style="margin:0px auto;max-width:600px;">
      <table align="center" border="0" cellpadding="0" cellspacing="0" role="presentation" style="width:100%;">
        <tbody>
          <tr>
            <td style="direction:ltr;font-size:0px;padding:0;text-align:center;">
              <!--[if mso | IE]><table role="presentation" border="0" cellpadding="0" cellspacing="0"><tr><td class="" style="vertical-align:top;width:600px;" ><![endif]-->
              <div class="mj-column-per-100 mj-outlook-group-fix" style="font-size:0px;text-align:left;direction:ltr;display:inline-block;vertical-align:top;width:100%;">
                <table border="0" cellpadding="0" cellspacing="0" role="presentation" style="vertical-align:top;" width="100%">
                  <tbody>
                    <tr>
                      <td align="left" class="text" style="font-size:0px;padding:10px 25px;padding-top:30px;padding-bottom:20px;word-break:break-word;">
                        <div style="font-family:Rubik, Helvetica, Arial;font-size:16px;line-height:26px;text-align:left;color:#aaaaaa;">Change the world — support the ideas that inspire you</div>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
              <!--[if mso | IE]></td></tr></table><![endif]-->
            </td>
          </tr>
        </tbody>
      </table>
    </div>
    <!--[if mso | IE]></td></tr></table><![endif]-->
  </div>
</body>

</html>
</file>

<file path="backend/src/emails/dist/mostLikedIdeas.html">
<!doctype html>
<html lang="und" dir="auto" xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">

<head>
  <title>Most Liked Ideas!</title>
  <!--[if !mso]><!-->
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <!--<![endif]-->
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style type="text/css">
    #outlook a {
      padding: 0;
    }

    body {
      margin: 0;
      padding: 0;
      -webkit-text-size-adjust: 100%;
      -ms-text-size-adjust: 100%;
    }

    table,
    td {
      border-collapse: collapse;
      mso-table-lspace: 0pt;
      mso-table-rspace: 0pt;
    }

    img {
      border: 0;
      height: auto;
      line-height: 100%;
      outline: none;
      text-decoration: none;
      -ms-interpolation-mode: bicubic;
    }

    p {
      display: block;
      margin: 13px 0;
    }

  </style>
  <!--[if mso]>
    <noscript>
    <xml>
    <o:OfficeDocumentSettings>
      <o:AllowPNG/>
      <o:PixelsPerInch>96</o:PixelsPerInch>
    </o:OfficeDocumentSettings>
    </xml>
    </noscript>
    <![endif]-->
  <!--[if lte mso 11]>
    <style type="text/css">
      .mj-outlook-group-fix { width:100% !important; }
    </style>
    <![endif]-->
  <!--[if !mso]><!-->
  <link href="https://fonts.googleapis.com/css?family=Ubuntu:300,400,500,700" rel="stylesheet" type="text/css">
  <style type="text/css">
    @import url(https://fonts.googleapis.com/css?family=Ubuntu:300,400,500,700);

  </style>
  <!--<![endif]-->
  <style type="text/css">
    @media only screen and (min-width:480px) {
      .mj-column-per-100 {
        width: 100% !important;
        max-width: 100%;
      }
    }

  </style>
  <style media="screen and (min-width:480px)">
    .moz-text-html .mj-column-per-100 {
      width: 100% !important;
      max-width: 100%;
    }

  </style>
  <style type="text/css">
    .unsubscribe-link {
      color: #aaaaaa !important;
    }

  </style>
</head>

<body style="word-spacing:normal;background-color:#ffffff;">
  <div style="background-color:#ffffff;" lang="und" dir="auto">
    <!--[if mso | IE]><table align="center" border="0" cellpadding="0" cellspacing="0" class="" role="presentation" style="width:600px;" width="600" ><tr><td style="line-height:0px;font-size:0px;mso-line-height-rule:exactly;"><![endif]-->
    <div style="margin:0px auto;max-width:600px;">
      <table align="center" border="0" cellpadding="0" cellspacing="0" role="presentation" style="width:100%;">
        <tbody>
          <tr>
            <td style="direction:ltr;font-size:0px;padding:0;text-align:center;">
              <!--[if mso | IE]><table role="presentation" border="0" cellpadding="0" cellspacing="0"><tr><td class="" style="vertical-align:top;width:600px;" ><![endif]-->
              <div class="mj-column-per-100 mj-outlook-group-fix" style="font-size:0px;text-align:left;direction:ltr;display:inline-block;vertical-align:top;width:100%;">
                <table border="0" cellpadding="0" cellspacing="0" role="presentation" style="vertical-align:top;" width="100%">
                  <tbody>
                    <tr>
                      <td align="left" style="font-size:0px;padding:10px 25px;padding-top:20px;padding-bottom:30px;word-break:break-word;">
                        <div style="font-family:Ubuntu, Helvetica, Arial, sans-serif;font-size:16px;font-weight:bold;line-height:38px;text-align:left;color:#222222;"><a class="link-nostyle" href="{{homeUrl}}" style="color: inherit; text-decoration: none;">IdeaNick</a></div>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
              <!--[if mso | IE]></td></tr></table><![endif]-->
            </td>
          </tr>
        </tbody>
      </table>
    </div>
    <!--[if mso | IE]></td></tr></table><table align="center" border="0" cellpadding="0" cellspacing="0" class="" role="presentation" style="width:600px;" width="600" bgcolor="#ffffff" ><tr><td style="line-height:0px;font-size:0px;mso-line-height-rule:exactly;"><![endif]-->
    <div style="background:#ffffff;background-color:#ffffff;margin:0px auto;max-width:600px;">
      <table align="center" border="0" cellpadding="0" cellspacing="0" role="presentation" style="background:#ffffff;background-color:#ffffff;width:100%;">
        <tbody>
          <tr>
            <td style="direction:ltr;font-size:0px;padding:20px 0;text-align:center;">
              <!--[if mso | IE]><table role="presentation" border="0" cellpadding="0" cellspacing="0"><tr><td class="" style="vertical-align:top;width:600px;" ><![endif]-->
              <div class="mj-column-per-100 mj-outlook-group-fix" style="font-size:0px;text-align:left;direction:ltr;display:inline-block;vertical-align:top;width:100%;">
                <table border="0" cellpadding="0" cellspacing="0" role="presentation" style="vertical-align:top;" width="100%">
                  <tbody>
                    <tr>
                      <td align="left" style="font-size:0px;padding:10px 25px;padding-bottom:10px;word-break:break-word;">
                        <div style="font-family:Rubik, Helvetica, Arial;font-size:24px;font-weight:bold;line-height:30px;text-align:left;color:#222222;">Hello! Check this month most liked ideas:</div>
                      </td>
                    </tr>
                    <tr>
                      <td align="left" class="text" style="font-size:0px;padding:10px 25px;word-break:break-word;">
                        <div style="font-family:Rubik, Helvetica, Arial;font-size:16px;line-height:26px;text-align:left;color:#222222;">{{#each ideas}}
                            <a href="{{this.url}}">{{this.name}}</a><br>
                          {{/each}}</div>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
              <!--[if mso | IE]></td></tr></table><![endif]-->
            </td>
          </tr>
        </tbody>
      </table>
    </div>
    <!--[if mso | IE]></td></tr></table><table align="center" border="0" cellpadding="0" cellspacing="0" class="" role="presentation" style="width:600px;" width="600" ><tr><td style="line-height:0px;font-size:0px;mso-line-height-rule:exactly;"><![endif]-->
    <div style="margin:0px auto;max-width:600px;">
      <table align="center" border="0" cellpadding="0" cellspacing="0" role="presentation" style="width:100%;">
        <tbody>
          <tr>
            <td style="direction:ltr;font-size:0px;padding:0;text-align:center;">
              <!--[if mso | IE]><table role="presentation" border="0" cellpadding="0" cellspacing="0"><tr><td class="" style="vertical-align:top;width:600px;" ><![endif]-->
              <div class="mj-column-per-100 mj-outlook-group-fix" style="font-size:0px;text-align:left;direction:ltr;display:inline-block;vertical-align:top;width:100%;">
                <table border="0" cellpadding="0" cellspacing="0" role="presentation" style="vertical-align:top;" width="100%">
                  <tbody>
                    <tr>
                      <td align="left" class="text" style="font-size:0px;padding:10px 25px;padding-top:30px;padding-bottom:20px;word-break:break-word;">
                        <div style="font-family:Rubik, Helvetica, Arial;font-size:16px;line-height:26px;text-align:left;color:#aaaaaa;">Change the world — support the ideas that inspire you</div>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
              <!--[if mso | IE]></td></tr></table><![endif]-->
            </td>
          </tr>
        </tbody>
      </table>
    </div>
    <!--[if mso | IE]></td></tr></table><![endif]-->
  </div>
</body>

</html>
</file>

<file path="backend/src/emails/dist/welcome.html">
<!doctype html>
<html lang="und" dir="auto" xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">

<head>
  <title>Thanks For Registration!</title>
  <!--[if !mso]><!-->
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <!--<![endif]-->
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style type="text/css">
    #outlook a {
      padding: 0;
    }

    body {
      margin: 0;
      padding: 0;
      -webkit-text-size-adjust: 100%;
      -ms-text-size-adjust: 100%;
    }

    table,
    td {
      border-collapse: collapse;
      mso-table-lspace: 0pt;
      mso-table-rspace: 0pt;
    }

    img {
      border: 0;
      height: auto;
      line-height: 100%;
      outline: none;
      text-decoration: none;
      -ms-interpolation-mode: bicubic;
    }

    p {
      display: block;
      margin: 13px 0;
    }

  </style>
  <!--[if mso]>
    <noscript>
    <xml>
    <o:OfficeDocumentSettings>
      <o:AllowPNG/>
      <o:PixelsPerInch>96</o:PixelsPerInch>
    </o:OfficeDocumentSettings>
    </xml>
    </noscript>
    <![endif]-->
  <!--[if lte mso 11]>
    <style type="text/css">
      .mj-outlook-group-fix { width:100% !important; }
    </style>
    <![endif]-->
  <!--[if !mso]><!-->
  <link href="https://fonts.googleapis.com/css?family=Ubuntu:300,400,500,700" rel="stylesheet" type="text/css">
  <style type="text/css">
    @import url(https://fonts.googleapis.com/css?family=Ubuntu:300,400,500,700);

  </style>
  <!--<![endif]-->
  <style type="text/css">
    @media only screen and (min-width:480px) {
      .mj-column-per-100 {
        width: 100% !important;
        max-width: 100%;
      }
    }

  </style>
  <style media="screen and (min-width:480px)">
    .moz-text-html .mj-column-per-100 {
      width: 100% !important;
      max-width: 100%;
    }

  </style>
  <style type="text/css">
    .unsubscribe-link {
      color: #aaaaaa !important;
    }

  </style>
</head>

<body style="word-spacing:normal;background-color:#ffffff;">
  <div style="background-color:#ffffff;" lang="und" dir="auto">
    <!--[if mso | IE]><table align="center" border="0" cellpadding="0" cellspacing="0" class="" role="presentation" style="width:600px;" width="600" ><tr><td style="line-height:0px;font-size:0px;mso-line-height-rule:exactly;"><![endif]-->
    <div style="margin:0px auto;max-width:600px;">
      <table align="center" border="0" cellpadding="0" cellspacing="0" role="presentation" style="width:100%;">
        <tbody>
          <tr>
            <td style="direction:ltr;font-size:0px;padding:0;text-align:center;">
              <!--[if mso | IE]><table role="presentation" border="0" cellpadding="0" cellspacing="0"><tr><td class="" style="vertical-align:top;width:600px;" ><![endif]-->
              <div class="mj-column-per-100 mj-outlook-group-fix" style="font-size:0px;text-align:left;direction:ltr;display:inline-block;vertical-align:top;width:100%;">
                <table border="0" cellpadding="0" cellspacing="0" role="presentation" style="vertical-align:top;" width="100%">
                  <tbody>
                    <tr>
                      <td align="left" style="font-size:0px;padding:10px 25px;padding-top:20px;padding-bottom:30px;word-break:break-word;">
                        <div style="font-family:Ubuntu, Helvetica, Arial, sans-serif;font-size:16px;font-weight:bold;line-height:38px;text-align:left;color:#222222;"><a class="link-nostyle" href="{{homeUrl}}" style="color: inherit; text-decoration: none;">IdeaNick</a></div>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
              <!--[if mso | IE]></td></tr></table><![endif]-->
            </td>
          </tr>
        </tbody>
      </table>
    </div>
    <!--[if mso | IE]></td></tr></table><table align="center" border="0" cellpadding="0" cellspacing="0" class="" role="presentation" style="width:600px;" width="600" bgcolor="#ffffff" ><tr><td style="line-height:0px;font-size:0px;mso-line-height-rule:exactly;"><![endif]-->
    <div style="background:#ffffff;background-color:#ffffff;margin:0px auto;max-width:600px;">
      <table align="center" border="0" cellpadding="0" cellspacing="0" role="presentation" style="background:#ffffff;background-color:#ffffff;width:100%;">
        <tbody>
          <tr>
            <td style="direction:ltr;font-size:0px;padding:20px 0;text-align:center;">
              <!--[if mso | IE]><table role="presentation" border="0" cellpadding="0" cellspacing="0"><tr><td class="" style="vertical-align:top;width:600px;" ><![endif]-->
              <div class="mj-column-per-100 mj-outlook-group-fix" style="font-size:0px;text-align:left;direction:ltr;display:inline-block;vertical-align:top;width:100%;">
                <table border="0" cellpadding="0" cellspacing="0" role="presentation" style="vertical-align:top;" width="100%">
                  <tbody>
                    <tr>
                      <td align="left" style="font-size:0px;padding:10px 25px;padding-bottom:10px;word-break:break-word;">
                        <div style="font-family:Rubik, Helvetica, Arial;font-size:24px;font-weight:bold;line-height:30px;text-align:left;color:#222222;">Thanks For Registration, {{userNick}}!</div>
                      </td>
                    </tr>
                    <tr>
                      <td align="left" class="text" style="font-size:0px;padding:10px 25px;word-break:break-word;">
                        <div style="font-family:Rubik, Helvetica, Arial;font-size:16px;line-height:26px;text-align:left;color:#222222;">Publish your first idea:</div>
                      </td>
                    </tr>
                    <tr>
                      <td align="left" class="button" style="font-size:0px;padding:10px 25px;word-break:break-word;">
                        <table border="0" cellpadding="0" cellspacing="0" role="presentation" style="border-collapse:separate;line-height:100%;">
                          <tbody>
                            <tr>
                              <td align="center" bgcolor="#0066ff" role="presentation" style="border:none;border-radius:3px;cursor:auto;mso-padding-alt:16px 35px 15px;background:#0066ff;" valign="middle">
                                <a href="{{addIdeaUrl}}" style="display:inline-block;background:#0066ff;color:#ffffff;font-family:Rubik, Helvetica, Arial;font-size:16px;font-weight:500;line-height:120%;margin:0;text-decoration:none;text-transform:none;padding:16px 35px 15px;mso-padding-alt:0px;border-radius:3px;" target="_blank"> Add Idea </a>
                              </td>
                            </tr>
                          </tbody>
                        </table>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
              <!--[if mso | IE]></td></tr></table><![endif]-->
            </td>
          </tr>
        </tbody>
      </table>
    </div>
    <!--[if mso | IE]></td></tr></table><table align="center" border="0" cellpadding="0" cellspacing="0" class="" role="presentation" style="width:600px;" width="600" ><tr><td style="line-height:0px;font-size:0px;mso-line-height-rule:exactly;"><![endif]-->
    <div style="margin:0px auto;max-width:600px;">
      <table align="center" border="0" cellpadding="0" cellspacing="0" role="presentation" style="width:100%;">
        <tbody>
          <tr>
            <td style="direction:ltr;font-size:0px;padding:0;text-align:center;">
              <!--[if mso | IE]><table role="presentation" border="0" cellpadding="0" cellspacing="0"><tr><td class="" style="vertical-align:top;width:600px;" ><![endif]-->
              <div class="mj-column-per-100 mj-outlook-group-fix" style="font-size:0px;text-align:left;direction:ltr;display:inline-block;vertical-align:top;width:100%;">
                <table border="0" cellpadding="0" cellspacing="0" role="presentation" style="vertical-align:top;" width="100%">
                  <tbody>
                    <tr>
                      <td align="left" class="text" style="font-size:0px;padding:10px 25px;padding-top:30px;padding-bottom:20px;word-break:break-word;">
                        <div style="font-family:Rubik, Helvetica, Arial;font-size:16px;line-height:26px;text-align:left;color:#aaaaaa;">Change the world — support the ideas that inspire you</div>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
              <!--[if mso | IE]></td></tr></table><![endif]-->
            </td>
          </tr>
        </tbody>
      </table>
    </div>
    <!--[if mso | IE]></td></tr></table><![endif]-->
  </div>
</body>

</html>
</file>

<file path="backend/src/lib/brevo.mock.ts">
import { type sendEmailThroughBrevo } from './brevo'

jest.mock('./brevo', () => {
  const original = jest.requireActual('./brevo')
  const mockedSendEmailThroughBrevo: typeof sendEmailThroughBrevo = jest.fn(async () => {
    return {
      loggableResponse: {
        status: 200,
        statusText: 'OK',
        data: { message: 'Mocked' },
      },
    }
  })
  return {
    ...original,
    sendEmailThroughBrevo: mockedSendEmailThroughBrevo,
  }
})
</file>

<file path="backend/src/lib/email/index.ts">
import { type Idea, type User } from '@prisma/client'
import { GetNewIdea, GetIdea } from '@stepik/web-stepik/src/utils/routes'
import { sendEmail } from './utils'

export const sendWelcomeEmail = async ({ user }: { user: Pick<User, 'nick' | 'email'> }) => {
  return await sendEmail({
    to: user.email,
    subject: 'Thanks For Registration!',
    templateName: 'welcome',
    templateVariables: {
      userNick: user.nick,
      addIdeaUrl: `${GetNewIdea({ abs: true })}`,
    },
  })
}

export const sendIdeaBlockedEmail = async ({ user, idea }: { user: Pick<User, 'email'>; idea: Pick<Idea, 'nick'> }) => {
  return await sendEmail({
    to: user.email,
    subject: 'Your Idea Blocked!',
    templateName: 'ideaBlocked',
    templateVariables: {
      ideaNick: idea.nick,
    },
  })
}

export const sendMostLikedIdeasEmail = async ({
  user,
  ideas,
}: {
  user: Pick<User, 'email'>
  ideas: Array<Pick<Idea, 'nick' | 'name'>>
}) => {
  return await sendEmail({
    to: user.email,
    subject: 'Most Liked Ideas!',
    templateName: 'mostLikedIdeas',
    templateVariables: {
      ideas: ideas.map((idea) => ({ name: idea.name, url: GetIdea({ abs: true, nick: idea.nick }) })),
    },
  })
}
</file>

<file path="backend/src/lib/email/utils.mock.ts">
import { type sendEmail } from './utils'

jest.mock('./utils', () => {
  const original = jest.requireActual('./utils')
  const mockedSendEmail: typeof sendEmail = jest.fn(async () => {
    return {
      ok: true,
    }
  })
  return {
    ...original,
    sendEmail: mockedSendEmail,
  }
})
</file>

<file path="backend/src/lib/email/utils.ts">
import { env } from '../env'
import { promises as fs } from 'fs'
import path from 'path'
import fg from 'fast-glob'
import Handlebars from 'handlebars'
import _ from 'lodash'
import { sendEmailThroughBrevo } from '../brevo'
import { logger } from '../logger'

const getHbrTemplates = _.memoize(async () => {
  const htmlPathsPattern = path.resolve(__dirname, '../../emails/dist/**/*.html')
  const htmlPaths = fg.sync(htmlPathsPattern)
  const hbrTemplates: Record<string, HandlebarsTemplateDelegate> = {}
  for (const htmlPath of htmlPaths) {
    const templateName = path.basename(htmlPath, '.html')
    const htmlTemplate = await fs.readFile(htmlPath, 'utf8')
    hbrTemplates[templateName] = Handlebars.compile(htmlTemplate)
  }
  return hbrTemplates
})

const getEmailHtml = async (templateName: string, templateVariables: Record<string, string> = {}) => {
  const hbrTemplates = await getHbrTemplates()
  const hbrTemplate = hbrTemplates[templateName]
  const html = hbrTemplate(templateVariables)
  return html
}

export const sendEmail = async ({
  to,
  subject,
  templateName,
  templateVariables = {},
}: {
  to: string
  subject: string
  templateName: string
  templateVariables?: Record<string, any>
}) => {
  try {
    const fullTemplateVaraibles = {
      ...templateVariables,
      homeUrl: env.WEBAPP_URL,
    }
    const html = await getEmailHtml(templateName, fullTemplateVaraibles)
    const { loggableResponse } = await sendEmailThroughBrevo({ to, html, subject })
    logger.info('email', 'sendEmail', {
      to,
      templateName,
      templateVariables,
      response: loggableResponse,
    })
    return { ok: true }
  } catch (error) {
    logger.error('email', error, {
      to,
      templateName,
      templateVariables,
    })
    return { ok: false }
  }
}
</file>

<file path="backend/src/lib/s3.ts">
import { env } from './env'
import { S3Client } from '@aws-sdk/client-s3'
import _ from 'lodash'

export const getS3Client = _.memoize(() => {
  if (!env.S3_ACCESS_KEY_ID) {
    throw new Error('S3_ACCESS_KEY_ID is missing')
  }
  if (!env.S3_SECRET_ACCESS_KEY) {
    throw new Error('S3_SECRET_ACCESS_KEY is missing')
  }
  if (!env.S3_BUCKET_NAME) {
    throw new Error('S3_BUCKET_NAME is missing')
  }
  if (!env.S3_REGION) {
    throw new Error('S3_REGION is missing')
  }
  const s3Client = new S3Client({
    region: env.S3_REGION,
    credentials: {
      accessKeyId: env.S3_ACCESS_KEY_ID,
      secretAccessKey: env.S3_SECRET_ACCESS_KEY,
    },
  })
  return s3Client
})
</file>

<file path="backend/src/lib/sentry.ts">
import { env } from './env'
// s
import * as Sentry from '@sentry/node'
import { type LoggerMetaData } from './logger'

export const initSentry = () => {
if (env.BACKEND_SENTRY_DSN) {
  Sentry.init({
    dsn: env.BACKEND_SENTRY_DSN,
    environment: env.HOST_ENV,
    release: env.SOURCE_VERSION,
    normalizeDepth: 10,
    // integrations: [
    //     rewriteFramesIntegration({
    //       root: path.resolve(__dirname, '../../..'),
    //     }),
    //   ],
  })
}
}
export const sentryCaptureException = (error: Error, prettifiedMetaData?: LoggerMetaData) => {
  if (env.BACKEND_SENTRY_DSN) {
    Sentry.captureException(error, prettifiedMetaData)
  }
}
</file>

<file path="backend/src/prisma/migrations/20250412115056_added_avatar/migration.sql">
-- AlterTable
ALTER TABLE "User" ADD COLUMN     "avatar" TEXT;
</file>

<file path="backend/src/prisma/migrations/20250413131336_added_images_to_idea/migration.sql">
-- AlterTable
ALTER TABLE "Idea" ADD COLUMN     "images" TEXT[];
</file>

<file path="backend/src/prisma/migrations/20250413150834_added_certificate/migration.sql">
-- AlterTable
ALTER TABLE "Idea" ADD COLUMN     "certificate" TEXT;
</file>

<file path="backend/src/prisma/migrations/20250413150957_added_docs/migration.sql">
-- AlterTable
ALTER TABLE "Idea" ADD COLUMN     "documents" TEXT[];
</file>

<file path="backend/src/router/auth/getMe/index.ts">
import _ from "lodash";
import { toClientMe } from "../../../lib/models";
import { trpcLoggedProcedure } from "../../../lib/trpc";

export const getMeTrpcRoute = trpcLoggedProcedure.query(({ ctx }) => {
  return { me: toClientMe(ctx.me) };
});
</file>

<file path="backend/src/router/ideas/setIdeaLike/index.integration.test.ts">
import { appContext, createIdeaWithAuthor, createUser, getTrpcCaller } from '../../../test/integration'

describe('setIdeaLike', () => {
  it('create like', async () => {
    const { idea } = await createIdeaWithAuthor({ number: 1 })
    const liker = await createUser({ number: 2 })
    const trpcCallerForLiker = getTrpcCaller(liker)
    const result = await trpcCallerForLiker.setIdeaLike({
      ideaId: idea.id,
      isLikedByMe: true,
    })
    expect(result).toMatchObject({
      idea: {
        isLikedByMe: true,
        likesCount: 1,
      },
    })
    const ideaLikes = await appContext.prisma.ideaLike.findMany()
    expect(ideaLikes).toHaveLength(1)
    expect(ideaLikes[0]).toMatchObject({
      ideaId: idea.id,
      userId: liker.id,
    })
  })

  it('remove like', async () => {
    const { idea } = await createIdeaWithAuthor({ number: 1 })
    const liker = await createUser({ number: 2 })
    const trpcCallerForLiker = getTrpcCaller(liker)
    const result1 = await trpcCallerForLiker.setIdeaLike({
      ideaId: idea.id,
      isLikedByMe: true,
    })
    expect(result1).toMatchObject({
      idea: {
        isLikedByMe: true,
        likesCount: 1,
      },
    })
    const result2 = await trpcCallerForLiker.setIdeaLike({
      ideaId: idea.id,
      isLikedByMe: false,
    })
    expect(result2).toMatchObject({
      idea: {
        isLikedByMe: false,
        likesCount: 0,
      },
    })
    const ideaLikes = await appContext.prisma.ideaLike.findMany()
    expect(ideaLikes).toHaveLength(0)
  })
})
</file>

<file path="backend/src/router/upload/prepareCLoudinaryUpload/index.ts">
import { cloudinaryUploadTypes } from '@stepik/shared/src/cloudinary'
import { v2 as cloudinary } from 'cloudinary'
import { env } from '../../../lib/env'
import { trpcLoggedProcedure } from '../../../lib/trpc'
import { zPrepareCloudinaryUploadTrpcInput } from './input'

export const prepareCloudinaryUploadTrpcRoute = trpcLoggedProcedure
  .input(zPrepareCloudinaryUploadTrpcInput)
  .mutation(async ({ input }) => {
    if (!env.CLOUDINARY_API_SECRET) {
      throw new Error('CLOUDINARY_API_SECRET is missing')
    }
    if (!env.CLOUDINARY_API_KEY) {
      throw new Error('CLOUDINARY_API_KEY is missing')
    }

    const uploadType = cloudinaryUploadTypes[input.type]

    const timestamp = Math.round(new Date().getTime() / 1000)
    const folder = uploadType.folder
    const transformation = uploadType.transformation
    const eager = Object.values(uploadType.presets).join('|')

    const signature = cloudinary.utils.api_sign_request(
      {
        timestamp,
        folder,
        transformation,
        eager,
      },
      env.CLOUDINARY_API_SECRET
    )

    return {
      preparedData: {
        timestamp: `${timestamp}`,
        folder,
        transformation,
        eager,
        signature,
        apiKey: env.CLOUDINARY_API_KEY,
        url: `https://api.cloudinary.com/v1_1/${env.CLOUDINARY_CLOUD_NAME}/auto/upload`,
      },
    }
  })
</file>

<file path="backend/src/router/upload/prepareCLoudinaryUpload/input.ts">
import { cloudinaryUploadTypes } from '@stepik/shared/src/cloudinary'
import { getKeysAsArray } from '@stepik/shared/src/getKeysAsArray'
import { z } from 'zod'

export const zPrepareCloudinaryUploadTrpcInput = z.object({
  type: z.enum(getKeysAsArray(cloudinaryUploadTypes)),
})
</file>

<file path="backend/src/router/upload/prepareS3Upload/index.ts">
import { PutObjectCommand } from '@aws-sdk/client-s3'
import { getSignedUrl } from '@aws-sdk/s3-request-presigner'
import { env } from '../../../lib/env'
import { ExpectedError } from '../../../lib/error'
import { getS3Client } from '../../../lib/s3'
import { trpcLoggedProcedure } from '../../../lib/trpc'
import { getRandomString } from '../../../utils/getRandomString'
import { zPrepareS3UploadTrpcInput } from './input'

const maxFileSize = 10 * 1024 * 1024 // 10MB

export const prepareS3UploadTrpcRoute = trpcLoggedProcedure
  .input(zPrepareS3UploadTrpcInput)
  .mutation(async ({ input }) => {
    if (input.fileSize > maxFileSize) {
      throw new ExpectedError('File size should be less then 10MB')
    }

    const s3Client = getS3Client()
    const s3Key = `uploads/${getRandomString(32)}-${input.fileName}`
    const signedUrl = await getSignedUrl(
      s3Client,
      new PutObjectCommand({
        Bucket: env.S3_BUCKET_NAME,
        Key: s3Key,
        ContentType: input.fileType,
        ContentLength: input.fileSize,
      }),
      {
        expiresIn: 3600,
      }
    )

    return {
      s3Key,
      signedUrl,
    }
  })
</file>

<file path="backend/src/router/upload/prepareS3Upload/input.ts">
import { zStringRequired } from '@stepik/shared/src/zod'
import { z } from 'zod'

export const zPrepareS3UploadTrpcInput = z.object({
  fileName: zStringRequired,
  fileType: zStringRequired,
  fileSize: z.number().int().positive(),
})
</file>

<file path="backend/src/scripts/notifyAboutLikedIdeas.integration.test.ts">
import { appContext, createIdeaLike, createIdeaWithAuthor, withoutNoize } from '../test/integration'
import { startOfMonth, sub } from 'date-fns'
import { sendEmail } from '../lib/email/utils'
import { getMostLikedIdeas, notifyAboutMostLikedIdeas } from './notifyAboutLkedIdeas'

const createData = async (now: Date) => {
  // has 3 likes in prev month
  const { idea: idea1, author: author1 } = await createIdeaWithAuthor({ number: 1 })

  // has 2 like in prev month, and 2 like in prev prev month
  const { idea: idea2, author: author2 } = await createIdeaWithAuthor({ number: 2 })

  // has 1 like in prev month, and 1 like in prev prev month
  const { idea: idea3, author: author3 } = await createIdeaWithAuthor({ number: 3 })

  // has 3 likes in prev prev month
  const { idea: idea4, author: author4 } = await createIdeaWithAuthor({ number: 4 })

  // has no likes
  await createIdeaWithAuthor({ number: 5 })

  const prevMonthDate = sub(now, {
    days: 10,
  })
  const prevPrevMonthDate = sub(now, {
    days: 10,
    months: 1,
  })

  await createIdeaLike({ idea: idea1, liker: author1, createdAt: prevMonthDate })
  await createIdeaLike({ idea: idea1, liker: author2, createdAt: prevMonthDate })
  await createIdeaLike({ idea: idea1, liker: author3, createdAt: prevMonthDate })

  await createIdeaLike({ idea: idea2, liker: author1, createdAt: prevMonthDate })
  await createIdeaLike({ idea: idea2, liker: author2, createdAt: prevMonthDate })
  await createIdeaLike({ idea: idea2, liker: author3, createdAt: prevPrevMonthDate })
  await createIdeaLike({ idea: idea2, liker: author4, createdAt: prevPrevMonthDate })

  await createIdeaLike({ idea: idea3, liker: author1, createdAt: prevMonthDate })
  await createIdeaLike({ idea: idea3, liker: author2, createdAt: prevPrevMonthDate })

  await createIdeaLike({ idea: idea4, liker: author1, createdAt: prevPrevMonthDate })
  await createIdeaLike({ idea: idea4, liker: author2, createdAt: prevPrevMonthDate })
  await createIdeaLike({ idea: idea4, liker: author3, createdAt: prevPrevMonthDate })
}

describe('getMostLikedIdeas', () => {
  it('return most liked ideas of prev month', async () => {
    const now = startOfMonth(new Date())
    await createData(now)

    expect(withoutNoize(await getMostLikedIdeas({ ctx: appContext, limit: 2, now }))).toMatchInlineSnapshot(`
[
  {
    "name": "Idea 1",
    "nick": "idea1",
    "thisMonthLikesCount": 3,
  },
  {
    "name": "Idea 2",
    "nick": "idea2",
    "thisMonthLikesCount": 2,
  },
]
`)
    expect(withoutNoize(await getMostLikedIdeas({ ctx: appContext, limit: 10, now }))).toMatchInlineSnapshot(`
[
  {
    "name": "Idea 1",
    "nick": "idea1",
    "thisMonthLikesCount": 3,
  },
  {
    "name": "Idea 2",
    "nick": "idea2",
    "thisMonthLikesCount": 2,
  },
  {
    "name": "Idea 3",
    "nick": "idea3",
    "thisMonthLikesCount": 1,
  },
]
`)
  })
})

describe('notifyAboutMostLikedIdeas', () => {
  it('send list of ideas to users', async () => {
    const now = startOfMonth(new Date())
    await createData(now)
    await notifyAboutMostLikedIdeas({ ctx: appContext, limit: 2, now })
    expect(sendEmail).toHaveBeenCalledTimes(5)
    const calls = jest.mocked(sendEmail).mock.calls
    const prettifiedCallProps = calls.map(([props]) => withoutNoize(props))
    expect(prettifiedCallProps).toMatchInlineSnapshot(`
      [
        {
          "subject": "Most Liked Ideas!",
          "templateName": "mostLikedIdeas",
          "templateVariables": {
            "ideas": [
              {
                "name": "Idea 1",
              },
              {
                "name": "Idea 2",
              },
            ],
          },
          "to": "user1@example.com",
        },
        {
          "subject": "Most Liked Ideas!",
          "templateName": "mostLikedIdeas",
          "templateVariables": {
            "ideas": [
              {
                "name": "Idea 1",
              },
              {
                "name": "Idea 2",
              },
            ],
          },
          "to": "user2@example.com",
        },
        {
          "subject": "Most Liked Ideas!",
          "templateName": "mostLikedIdeas",
          "templateVariables": {
            "ideas": [
              {
                "name": "Idea 1",
              },
              {
                "name": "Idea 2",
              },
            ],
          },
          "to": "user3@example.com",
        },
        {
          "subject": "Most Liked Ideas!",
          "templateName": "mostLikedIdeas",
          "templateVariables": {
            "ideas": [
              {
                "name": "Idea 1",
              },
              {
                "name": "Idea 2",
              },
            ],
          },
          "to": "user4@example.com",
        },
        {
          "subject": "Most Liked Ideas!",
          "templateName": "mostLikedIdeas",
          "templateVariables": {
            "ideas": [
              {
                "name": "Idea 1",
              },
              {
                "name": "Idea 2",
              },
            ],
          },
          "to": "user5@example.com",
        },
      ]
    `)
  })
})
</file>

<file path="backend/src/test/integration.ts">
import '../lib/sentry.mock'
import "../lib/email/utils.mock"
import { env } from '../lib/env'
import { type Idea, type User } from '@prisma/client'
import {omit} from "@stepik/shared/src/omit"
import _ from 'lodash'
import { createAppContext } from '../lib/ctx'
import { getTrpcContext } from '../lib/trpc'
import { trpcRouter } from '../router'
import { deepMap } from '../utils/deepMap'
import { getPasswordHash } from '../utils/getPasswordHash'
import { type ExpressRequest } from '../utils/types'

export const appContext = createAppContext()

if (env.NODE_ENV !== 'test') {
  throw new Error('Run integration tests only with NODE_ENV=test')
}

afterAll(appContext.stop)

beforeEach(async () => {
  await appContext.prisma.ideaLike.deleteMany()
  await appContext.prisma.idea.deleteMany()
  await appContext.prisma.user.deleteMany()
})

export const getTrpcCaller = (user?: User) => {
  const req = { user } as ExpressRequest
  return trpcRouter.createCaller(getTrpcContext({ appContext, req }))
}

export const withoutNoize = (input: any): any => {
  return deepMap(input, ({ value }) => {
    if (_.isObject(value) && !_.isArray(value)) {
      return _.entries(value).reduce((acc, [objectKey, objectValue]: [string, any]) => {
        if ([/^id$/, /Id$/, /At$/].some((regex) => regex.test(objectKey))) {
          return acc
        }
        return {
          ...acc,
          [objectKey]: objectValue,
        }
      }, {})
    }
    return value
  })
}

export const createUser = async ({ user = {}, number = 1 }: { user?: Partial<User>; number?: number } = {}) => {
  return await appContext.prisma.user.create({
    data: {
      nick: `user${number}`,
      email: `user${number}@example.com`,
      password: getPasswordHash(user.password || '1234'),
      ...omit(user, ['password']),
    },
  })
}

export const createIdea = async ({
  idea = {},
  author,
  number = 1,
}: {
  idea?: Partial<Idea>
  author: Pick<User, 'id'>
  number?: number
}) => {
  return await appContext.prisma.idea.create({
    data: {
      nick: `idea${number}`,
      authorId: author.id,
      name: `Idea ${number}`,
      description: `Idea ${number} description`,
      text: `Idea ${number} text text text text text text text text text text text text text text text text text text text text text`,
      ...idea,
    },
  })
}

export const createIdeaWithAuthor = async ({
  author,
  idea,
  number,
}: {
  author?: Partial<User>
  idea?: Partial<Idea>
  number?: number
} = {}) => {
  const createdUser = await createUser({ user: author, number })
  const createdIdea = await createIdea({ idea, author: createdUser, number })
  return {
    author: createdUser,
    idea: createdIdea,
  }
}

export const createIdeaLike = async ({
  idea,
  liker,
  createdAt,
}: {
  idea: Pick<Idea, 'id'>
  liker: Pick<User, 'id'>
  createdAt?: Date
}) => {
  return await appContext.prisma.ideaLike.create({
    data: {
      ideaId: idea.id,
      userId: liker.id,
      createdAt,
    },
  })
}
</file>

<file path="backend/src/utils/can.unit.test.ts">
import { canEditIdea, hasPermission } from './can'

describe('can', () => {
  it('hasPermission return true for user with this permission', () => {
    expect(hasPermission({ permissions: ['BLOCK_IDEAS'], id: 'x' }, 'BLOCK_IDEAS')).toBe(true)
  })

  it('hasPermission return false for user without this permission', () => {
    expect(hasPermission({ permissions: [], id: 'x' }, 'BLOCK_IDEAS')).toBe(false)
  })

  it('hasPermission return true for user with "ALL" permission', () => {
    expect(hasPermission({ permissions: ['ALL'], id: 'x' }, 'BLOCK_IDEAS')).toBe(true)
  })

  it('only author can edit his idea', () => {
    expect(canEditIdea({ permissions: [], id: 'x' }, { authorId: 'x' })).toBe(true)
    expect(canEditIdea({ permissions: [], id: 'hacker' }, { authorId: 'x' })).toBe(false)
  })
})
</file>

<file path="backend/src/utils/deepMap.unit.test.ts">
import _ from 'lodash'
import { deepMap } from './deepMap'

describe('deepMap', () => {
  it('should map object', () => {
    const fn = () => {
      return 1
    }
    const fn1 = () => {
      return 2
    }
    fn1.fn2 = fn1
    const input = {
      object: {
        a: 1,
        x: null,
        z: undefined,
        o: fn,
        p: fn1,
        b: '22',
        c: [3, 4],
        c1: [3, 4],
        d: [{ e: 5 }, { f: 6 }],
        g: [
          [7, 8],
          [{ x: 0 }, 10],
        ],
        s: {
          t: 11,
          u: 12,
        },
        s1: {
          t: 11,
          u: 12,
        },
      },
      objectRecursive: null as any,
    }
    input.objectRecursive = input

    const output = deepMap(input, ({ key, path, value }) => {
      if (path === 'object.c1.0') {
        return 'my path is object.c1.0'
      }
      if (key === 'u') {
        return 'my key is u'
      }
      if (key === 's1') {
        return 'me was an object'
      }

      if (_.isString(value) || _.isNumber(value)) {
        return `${value}` + 'XXX'
      }
      return value
    })
    expect(output).toMatchInlineSnapshot(`
{
  "object": {
    "a": "1XXX",
    "b": "22XXX",
    "c": [
      "3XXX",
      "4XXX",
    ],
    "c1": [
      "my path is object.c1.0",
      "4XXX",
    ],
    "d": [
      {
        "e": "5XXX",
      },
      {
        "f": "6XXX",
      },
    ],
    "g": [
      [
        "7XXX",
        "8XXX",
      ],
      [
        {
          "x": "0XXX",
        },
        "10XXX",
      ],
    ],
    "o": {},
    "p": {
      "fn2": "!!!CIRCULAR!!!",
    },
    "s": {
      "t": "11XXX",
      "u": "my key is u",
    },
    "s1": "me was an object",
    "x": null,
    "z": undefined,
  },
  "objectRecursive": "!!!CIRCULAR!!!",
}
`)
  })
})
</file>

<file path="backend/src/utils/getRandomString.ts">
import randomstring from 'randomstring'

export const getRandomString = (length: number) => {
  return randomstring.generate({
    length,
    charset: 'alphanumeric',
    capitalization: 'lowercase',
  })
}
</file>

<file path="backend/tsconfig.build.json">
{
    "extends": "./tsconfig.json",
    "exclude": ["**/test/**/*", "**/*.test.ts"]
  }
</file>

<file path="jest.config.cjs">
/** @type {import('ts-jest').JestConfigWithTsJest} */
module.exports = {
    preset: 'ts-jest',
    testEnvironment: 'node',
    passWithNoTests: true,
    verbose: true,
    prettierPath: null,
  }
</file>

<file path="shared/jest.config.js">
/** @type {import('ts-jest').JestConfigWithTsJest} */
module.exports = {
    ...require('../jest.config.js'),
  }
</file>

<file path="shared/src/cloudinary.ts">
import { sharedEnv } from "./env"

const cloudinaryUrl = `https://res.cloudinary.com/${sharedEnv.CLOUDINARY_CLOUD_NAME}/image/upload`

type CloudinaryUploadType = {
  folder: string
  transformation: string
  format: string
  presets: Record<string, string>
}

export const cloudinaryUploadTypes = {
  avatar: {
    folder: 'avatars',
    transformation: 'w_400,h_400,c_fill',
    format: 'png',
    presets: {
      small: 'w_200,h_200,c_fill',
      big: 'w_400,h_400,c_fill',
    },
  },
  image: {
    folder: 'images',
    transformation: 'w_1000,h_1000,c_limit',
    format: 'jpg',
    presets: {
      preview: 'w_200,h_200,c_fit,q_80',
      large: 'w_1000,h_1000,c_limit,q_80',
    },
  },
} satisfies Record<string, CloudinaryUploadType>

type CloudinaryUploadTypes = typeof cloudinaryUploadTypes
export type CloudinaryUploadTypeName = keyof CloudinaryUploadTypes
export type CloudinaryUploadPresetName<TTypeName extends CloudinaryUploadTypeName> =
  keyof CloudinaryUploadTypes[TTypeName]['presets']

export const getCloudinaryUploadUrl = <TTypeName extends CloudinaryUploadTypeName>(
  publicId: string,
  typeName: TTypeName,
  presetName: CloudinaryUploadPresetName<TTypeName>
) => {
  const type = cloudinaryUploadTypes[typeName] as CloudinaryUploadType
  const preset = type.presets[presetName as string]
  return `${cloudinaryUrl}/${preset}/${publicId}`
}

export const getAvatarUrl = (
  publicId: string | null | undefined,
  preset: keyof CloudinaryUploadTypes['avatar']['presets']
) =>
  publicId
    ? getCloudinaryUploadUrl(publicId, 'avatar', preset)
    : getCloudinaryUploadUrl('v1695811282/avatars/avatar-placeholder', 'avatar', preset)
</file>

<file path="shared/src/env.ts">
import { z } from 'zod'
import { zEnvNonemptyTrimmed } from './zod'

const sharedEnvRaw = {
  CLOUDINARY_CLOUD_NAME: process.env.VITE_CLOUDINARY_CLOUD_NAME || process.env.CLOUDINARY_CLOUD_NAME,
  S3_URL: process.env.VITE_S3_URL || process.env.S3_URL,
  WEBAPP_URL: process.env.VITE_WEBAPP_URL || process.env.WEBAPP_URL,
}

const zEnv = z.object({
  WEBAPP_URL: zEnvNonemptyTrimmed,
  CLOUDINARY_CLOUD_NAME: zEnvNonemptyTrimmed,
  S3_URL: zEnvNonemptyTrimmed,
})

export const sharedEnv = zEnv.parse(sharedEnvRaw)
</file>

<file path="shared/src/getKeysAsArray.ts">
import lodashKeys from 'lodash/keys'

// https://catchts.com/union-array
type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never
type UnionToOvlds<U> = UnionToIntersection<U extends any ? (f: U) => void : never>
type PopUnion<U> = UnionToOvlds<U> extends (a: infer A) => void ? A : never
type IsUnion<T> = [T] extends [UnionToIntersection<T>] ? false : true
type UnionToArray<T, A extends unknown[] = []> = IsUnion<T> extends true
  ? UnionToArray<Exclude<T, PopUnion<T>>, [PopUnion<T>, ...A]>
  : [T, ...A]

export const getKeysAsArray = <T>(obj: T): UnionToArray<keyof T> => {
  return lodashKeys(obj) as UnionToArray<keyof T>
}
</file>

<file path="shared/src/omit.ts">
import lodashOmit from 'lodash/omit'

export const omit = <TObject extends Object, TKeys extends keyof TObject>(
  obj: TObject,
  keys: TKeys[]
): Omit<TObject, TKeys> => {
  return lodashOmit(obj, keys)
}
</file>

<file path="shared/src/pick.ts">
import lodashPick from 'lodash/pick'

export const pick = <TObject extends Object, TKeys extends keyof TObject>(
  obj: TObject,
  keys: TKeys[]
): Pick<TObject, TKeys> => {
  return lodashPick(obj, keys)
}
</file>

<file path="shared/src/s3.ts">
import { sharedEnv } from "./env"

export const getS3UploadName = (path: string) => {
  const filename = path.replace(/^.*[\\/]/, '')
  const parts = filename.split('-')
  parts.shift()
  return parts.join('-')
}

export const getS3UploadUrl = (s3Key: string) => {
  return `${sharedEnv.S3_URL}/${s3Key}`
}
</file>

<file path="web-stepik/eslint.config.mjs">
import path from "node:path";
import { fileURLToPath } from "node:url";
import { fixupConfigRules } from "@eslint/compat";
import { FlatCompat } from "@eslint/eslintrc";
import js from "@eslint/js";
import { defineConfig } from "eslint/config";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const compat = new FlatCompat({
    baseDirectory: __dirname,
    recommendedConfig: js.configs.recommended,
    allConfig: js.configs.all
});

export default defineConfig([{
    extends: fixupConfigRules(compat.extends("react-app", "../eslint.config.mjs")),

    languageOptions: {
        ecmaVersion: 5,
        sourceType: "script",

        parserOptions: {
            project: "./tsconfig.json",
        },
    },

    rules: {
        "no-console": ["error", {
            allow: ["info", "error", "warn"],
        }],

        "@typescript-eslint/no-restricted-imports": ["error", {
            patterns: [{
                group: [
                    "@stepik/backend/**",
                    "!@stepik/backend/**/",
                    "!@stepik/backend/**/input",
                    "!@stepik/backend/src/utils/can",
                ],

                allowTypeImports: true,
                message: "Only types and input schemas are allowed to be imported from backend workspace",
            }],
        }],
    },
}, {
    files: ["**/vite.config.ts"],

    languageOptions: {
        ecmaVersion: 5,
        sourceType: "script",

        parserOptions: {
            project: "./tsconfig.node.json",
        },
    },
}]);
</file>

<file path="web-stepik/jest.config.cjs">
/** @type {import('ts-jest').JestConfigWithTsJest} */
module.exports = {
    ...require('../jest.config.cjs'),
  }
</file>

<file path="web-stepik/src/components/UploadMoreToCloudinary/index.module.scss">
@use '../../styles/vars' as *;
@use '../UploadToCloudinary/index.module' as *;

.field {
  input {
    display: none;
  }

  .previews {
    display: flex;
    flex-flow: row wrap;
    margin-right: -5px;

    .previewPlace {
      margin-right: 5px;

      .delete {
        position: absolute;
        top: 0;
        right: 0;
        padding: 5px;
        background: none;
        border: none;
        cursor: pointer;

        .deleteIcon {
          color: $red;
        }
      }
    }
  }
}
</file>

<file path="web-stepik/src/components/UploadMoreToCloudinary/index.tsx">
import {
    type CloudinaryUploadPresetName,
    type CloudinaryUploadTypeName,
    getCloudinaryUploadUrl,
  } from '@stepik/shared/src/cloudinary'
  import cn from 'classnames'
  import { type FormikProps } from 'formik'
  import { useRef, useState } from 'react'
  import { Button } from '../Button'
  import { Icon } from '../Icon'
  import { useUploadToCloudinary } from '../UploadToCloudinary'
  import css from './index.module.scss'
  
  export const UploadsToCloudinary = <TTypeName extends CloudinaryUploadTypeName>({
    label,
    name,
    formik,
    type,
    preset,
  }: {
    label: string
    name: string
    formik: FormikProps<any>
    type: TTypeName
    preset: CloudinaryUploadPresetName<TTypeName>
  }) => {
    const value = (Array.isArray(formik.values[name]) 
    ? formik.values[name] 
    : []) as string[];
    const safeValue = value || [];
    const error = formik.errors[name] as string | undefined
    const touched = formik.touched[name] as boolean
    const invalid = touched && !!error
    const disabled = formik.isSubmitting
  
    const inputEl = useRef<HTMLInputElement>(null)
    const [loading, setLoading] = useState(false)
  
    const { uploadToCloudinary } = useUploadToCloudinary(type)
  
    return (
      <div className={cn({ [css.field]: true, [css.disabled]: disabled })}>
        <input
          className={css.fileInput}
          type="file"
          disabled={loading || disabled}
          accept="image/*"
          multiple
          ref={inputEl}
          onChange={({ target: { files } }) => {
            void (async () => {
              setLoading(true)
              try {
                if (files?.length) {
                  const newValue = [...safeValue]
                  await Promise.all(
                    Array.from(files).map(async (file) => {
                      await uploadToCloudinary(file).then(({ publicId }) => {
                        newValue.push(publicId)
                      })
                    })
                  )
                  void formik.setFieldValue(name, newValue)
                }
              } catch (err: any) {
                console.error(err)
                formik.setFieldError(name, err.message)
              } finally {
                void formik.setFieldTouched(name, true, false)
                setLoading(false)
                if (inputEl.current) {
                  inputEl.current.value = ''
                }
              }
            })()
          }}
        />
        <label className={css.label} htmlFor={name}>
          {label}
        </label>
        {!!value?.length && (
          <div className={css.previews}>
            {safeValue.map((publicId) => (
              <div key={publicId} className={css.previewPlace}>
                <button
                  type="button"
                  className={css.delete}
                  onClick={() => {
                    void formik.setFieldValue(
                      name,
                      value.filter((deletedPublicId) => deletedPublicId !== publicId)
                    )
                  }}
                >
                  <Icon className={css.deleteIcon} name="Delete" />
                </button>
                <img className={css.preview} alt="" src={getCloudinaryUploadUrl(publicId, type, preset)} />
              </div>
            ))}
          </div>
        )}
        <div className={css.buttons}>
          <Button
            type="button"
            onClick={() => inputEl.current?.click()}
            loading={loading}
            disabled={loading || disabled}
            color="green"
          >
            {value?.length ? 'Upload more' : 'Upload'}
          </Button>
        </div>
        {invalid && <div className={css.error}>{error}</div>}
      </div>
    )
  }
</file>

<file path="web-stepik/src/components/UploadsToS3/index.module.scss">
@use '../UploadToS3/index.module';

.field {
  .uploads {
    .upload {
      & + .upload {
        margin-top: 3px;
      }

      .delete {
        padding: 5px;
        margin-bottom: -5px;
        margin-top: -5px;
        vertical-align: -2px;
        line-height: 0;
        background: none;
        border: none;
        cursor: pointer;

        .deleteIcon {
          color: $red;
        }
      }
    }
  }
}
</file>

<file path="web-stepik/src/components/UploadsToS3/index.tsx">
import { getS3UploadName, getS3UploadUrl } from '@stepik/shared/src/s3'
import cn from 'classnames'
import { type FormikProps } from 'formik'
import { useRef, useState } from 'react'
import { Button } from '../Button'
import { Icon } from '../Icon'
import { useUploadToS3 } from '../uploadToS3'
import css from './index.module.scss'

export const UploadsToS3 = ({ label, name, formik }: { label: string; name: string; formik: FormikProps<any> }) => {
  const value = formik.values[name] as string[]
  const error = formik.errors[name] as string | undefined
  const touched = formik.touched[name] as boolean
  const invalid = touched && !!error
  const disabled = formik.isSubmitting

  const inputEl = useRef<HTMLInputElement>(null)
  const [loading, setLoading] = useState(false)

  const { uploadToS3 } = useUploadToS3()

  return (
    <div className={cn({ [css.field]: true, [css.disabled]: disabled })}>
      <input
        className={css.fileInput}
        type="file"
        disabled={loading || disabled}
        accept="*"
        multiple
        ref={inputEl}
        onChange={({ target: { files } }) => {
          void (async () => {
            setLoading(true)
            try {
              if (files?.length) {
                const newValue = [...value]
                await Promise.all(
                  Array.from(files).map(async (file) => {
                    await uploadToS3(file).then(({ s3Key }) => {
                      newValue.push(s3Key)
                    })
                  })
                )
                void formik.setFieldValue(name, newValue)
              }
            } catch (err: any) {
              console.error(err)
              formik.setFieldError(name, err.message)
            } finally {
              void formik.setFieldTouched(name, true, false)
              setLoading(false)
              if (inputEl.current) {
                inputEl.current.value = ''
              }
            }
          })()
        }}
      />
      <label className={css.label} htmlFor={name}>
        {label}
      </label>
      {!!value?.length && (
        <div className={css.uploads}>
          {value.map((s3Key) => (
            <div key={s3Key} className={css.upload}>
              <a className={css.uploadLink} target="_blank" href={getS3UploadUrl(s3Key)} rel="noreferrer">
                {getS3UploadName(s3Key)}
              </a>
              <button
                type="button"
                className={css.delete}
                onClick={() => {
                  void formik.setFieldValue(
                    name,
                    value.filter((deletedS3Key) => deletedS3Key !== s3Key)
                  )
                }}
              >
                <Icon className={css.deleteIcon} name="Delete" />
              </button>
            </div>
          ))}
        </div>
      )}
      <div className={css.buttons}>
        <Button
          type="button"
          onClick={() => inputEl.current?.click()}
          loading={loading}
          disabled={loading || disabled}
          color="green"
        >
          {value ? 'Upload more' : 'Upload'}
        </Button>
      </div>
      {invalid && <div className={css.error}>{error}</div>}
    </div>
  )
}
</file>

<file path="web-stepik/src/components/UploadToCloudinary/index.module.scss">
@use "../../styles/vars" as *;
@use '../Input/index.module' as *;

.field {
  input {
    display: none;
  }

  .previewPlace {
    position: relative;
    box-sizing: content-box;
    width: 100px;
    height: 100px;
    padding: 10px;
    border: 1px solid $gray;
    background-color: $grayLight;
    border-radius: $borderRadiusSmall;
    margin-bottom: 5px;
    display: flex;
    align-items: center;
    justify-content: center;

    .preview {
      max-width: 100%;
      max-height: 100%;
    }
  }
}
</file>

<file path="web-stepik/src/components/UploadToCloudinary/index.tsx">
import {
    type CloudinaryUploadPresetName,
    type CloudinaryUploadTypeName,
    getCloudinaryUploadUrl,
  } from '@stepik/shared/src/cloudinary'
  import cn from 'classnames'
  import { type FormikProps } from 'formik'
  import { useCallback, useRef, useState } from 'react'
  import trpc from '../../utils/trpc'
  import { Button, Buttons } from '../Button'
  import css from './index.module.scss'
import { memoize } from 'lodash'
  
  export const useUploadToCloudinary = (type: CloudinaryUploadTypeName) => {
    const prepareCloudinaryUpload = trpc.prepareCLoudinaryUpload.useMutation()
    
    const getPreparedData = useCallback(
      memoize(
        async () => {
          const { preparedData } = await prepareCloudinaryUpload.mutateAsync({ type })
          return preparedData
        },
        () => JSON.stringify({ type, minutes: new Date().getMinutes() })
      ),
      [type]
    )

    const uploadToCloudinary = async (file: File) => {
      const preparedData = await getPreparedData()
  
      const formData = new FormData()
      formData.append('file', file)
      formData.append('timestamp', preparedData.timestamp)
      formData.append('folder', preparedData.folder)
      formData.append('transformation', preparedData.transformation)
      formData.append('eager', preparedData.eager)
      formData.append('signature', preparedData.signature)
      formData.append('api_key', preparedData.apiKey)
  
      return await fetch(preparedData.url, {
        method: 'POST',
        body: formData,
      })
        .then(async (rawRes) => {
          return await rawRes.json()
        })
        .then((res) => {
          if (res.error) {
            throw new Error(res.error.message)
          }
          return {
            publicId: res.public_id as string,
            res,
          }
        })
    }
  
    return { uploadToCloudinary }
  }
  
  

  export const UploadToCloudinary = <TTypeName extends CloudinaryUploadTypeName>({
    label,
    name,
    formik,
    type,
    preset,
  }: {
    label: string
    name: string
    formik: FormikProps<any>
    type: TTypeName
    preset: CloudinaryUploadPresetName<TTypeName>
  }) => {
    const value = formik.values[name]
    const error = formik.errors[name] as string | undefined
    const touched = formik.touched[name] as boolean
    const invalid = touched && !!error
    const disabled = formik.isSubmitting
  
    const inputEl = useRef<HTMLInputElement>(null)
    const [loading, setLoading] = useState(false)
  
    const { uploadToCloudinary } = useUploadToCloudinary(type)
  
    return (
      <div className={cn({ [css.field]: true, [css.disabled]: disabled })}>
        <input
          className={css.fileInput}
          type="file"
          disabled={loading || disabled}
          accept="image/*"
          ref={inputEl}
          onChange={({ target: { files } }) => {
            void (async () => {
              setLoading(true)
              try {
                if (files?.length) {
                  const file = files[0]
                  const { publicId } = await uploadToCloudinary(file)
                  void formik.setFieldValue(name, publicId)
                }
              } catch (err: any) {
                console.error(err)
                formik.setFieldError(name, err.message)
              } finally {
                void formik.setFieldTouched(name, true, false)
                setLoading(false)
                if (inputEl.current) {
                  inputEl.current.value = ''
                }
              }
            })()
          }}
        />
        <label className={css.label} htmlFor={name}>
          {label}
        </label>
        {!!value && !loading && (
          <div className={css.previewPlace}>
            <img className={css.preview} alt="" src={getCloudinaryUploadUrl(value, type, preset)} />
          </div>
        )}
        <div className={css.buttons}>
          <Buttons>
            <Button
              type="button"
              onClick={() => inputEl.current?.click()}
              loading={loading}
              disabled={loading || disabled}
              color="green"
            >
              {value ? 'Upload another' : 'Upload'}
            </Button>
            {!!value && !loading && (
              <Button
                type="button"
                color="red"
                onClick={() => {
                  void formik.setFieldValue(name, null)
                  formik.setFieldError(name, undefined)
                  void formik.setFieldTouched(name)
                }}
                disabled={disabled}
              >
                Remove
              </Button>
            )}
          </Buttons>
        </div>
        {invalid && <div className={css.error}>{error}</div>}
      </div>
    )
  }
</file>

<file path="web-stepik/src/components/uploadToS3/index.module.scss">
@use '../Input/index.module';

.field {
  input {
    display: none;
  }

  .uploads {
    margin-bottom: 5px;

    .upload {
      .uploadLink {
        @include link;
      }
    }
  }
}
</file>

<file path="web-stepik/src/components/uploadToS3/index.tsx">
import { getS3UploadUrl, getS3UploadName } from '@stepik/shared/src/s3'
import cn from 'classnames'
import { type FormikProps } from 'formik'
import { useRef, useState } from 'react'
import trpc from '../../utils/trpc'
import { Button, Buttons } from '../Button'
import css from './index.module.scss'

export const useUploadToS3 = () => {
  const prepareS3Upload = trpc.prepareS3Upload.useMutation()

  const uploadToS3 = async (file: File) => {
    const { signedUrl, s3Key } = await prepareS3Upload.mutateAsync({
      fileName: file.name,
      fileType: file.type,
      fileSize: file.size,
    })

    return await fetch(signedUrl, {
      method: 'PUT',
      body: file,
    })
      .then(async (rawRes) => {
        return await rawRes.text()
      })
      .then((res) => {
        return { s3Key, res }
      })
  }

  return { uploadToS3 }
}

export const UploadToS3 = ({ label, name, formik }: { label: string; name: string; formik: FormikProps<any> }) => {
  const value = formik.values[name]
  const error = formik.errors[name] as string | undefined
  const touched = formik.touched[name] as boolean
  const invalid = touched && !!error
  const disabled = formik.isSubmitting

  const inputEl = useRef<HTMLInputElement>(null)
  const [loading, setLoading] = useState(false)

  const { uploadToS3 } = useUploadToS3()

  return (
    <div className={cn({ [css.field]: true, [css.disabled]: disabled })}>
      <input
        className={css.fileInput}
        type="file"
        disabled={loading || disabled}
        accept="*"
        ref={inputEl}
        onChange={({ target: { files } }) => {
          void (async () => {
            setLoading(true)
            try {
              if (files?.length) {
                const file = files[0]
                const { s3Key } = await uploadToS3(file)
                void formik.setFieldValue(name, s3Key)
              }
            } catch (err: any) {
              console.error(err)
              formik.setFieldError(name, err.message)
            } finally {
              void formik.setFieldTouched(name, true, false)
              setLoading(false)
              if (inputEl.current) {
                inputEl.current.value = ''
              }
            }
          })()
        }}
      />
      <label className={css.label} htmlFor={name}>
        {label}
      </label>
      {!!value && !loading && (
        <div className={css.uploads}>
          <div className={css.upload}>
            <a className={css.uploadLink} target="_blank" href={getS3UploadUrl(value)} rel="noreferrer">
              {getS3UploadName(value)}
            </a>
          </div>
        </div>
      )}
      <div className={css.buttons}>
        <Buttons>
          <Button
            type="button"
            onClick={() => inputEl.current?.click()}
            loading={loading}
            disabled={loading || disabled}
            color="green"
          >
            {value ? 'Upload another' : 'Upload'}
          </Button>
          {!!value && !loading && (
            <Button
              type="button"
              color="red"
              onClick={() => {
                void formik.setFieldValue(name, null)
                formik.setFieldError(name, undefined)
                void formik.setFieldTouched(name)
              }}
              disabled={disabled}
            >
              Remove
            </Button>
          )}
        </Buttons>
      </div>
      {invalid && <div className={css.error}>{error}</div>}
    </div>
  )
}
</file>

<file path="web-stepik/src/utils/pumpGetRoute.unit.test.ts">
process.env.WEBAPP_URL = 'https://example.com'

// eslint-disable-next-line import/first
import { pgr } from './pumpGetRoute'

describe('pgr', () => {
  it('return simple route', () => {
    const getSimpleRoute = pgr(() => '/simple')
    expect(getSimpleRoute()).toBe('/simple')
  })

  it('return route with params', () => {
    const getWithParamsRoute = pgr({ param1: true, param2: true }, ({ param1, param2 }) => `/a/${param1}/b/${param2}/c`)
    expect(getWithParamsRoute({ param1: 'xxx', param2: 'yyy' })).toBe('/a/xxx/b/yyy/c')
  })

  it('return route definition', () => {
    const getWithParamsRoute = pgr({ param1: true, param2: true }, ({ param1, param2 }) => `/a/${param1}/b/${param2}/c`)
    expect(getWithParamsRoute.definition).toBe('/a/:param1/b/:param2/c')
  })

  it('return route placeholders', () => {
    const getWithParamsRoute = pgr({ param1: true, param2: true }, ({ param1, param2 }) => `/a/${param1}/b/${param2}/c`)
    expect(getWithParamsRoute.placeholders).toMatchObject({ param1: ':param1', param2: ':param2' })
  })

  it('return absolute route', () => {
    const getSimpleRoute = pgr(() => '/simple')
    expect(getSimpleRoute({ abs: true })).toBe('https://example.com/simple')
  })
})
</file>

<file path=".husky/commit-msg">
#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

# Extract the relevant line from the COMMIT_EDITMSG
relevant_line=$(awk '/^# ------------------------ >8 ------------------------/{exit} !/^#/ && NF {print; exit}' "$1")

# If no relevant line is found, just leave the commit message unchanged
[ -z "$relevant_line" ] && exit 0

# Extract all lines except for the relevant_line and comments
all_other_lines=$(awk 'BEGIN{flag=0} /^# ------------------------ >8 ------------------------/{flag=1} !/^#/ && NF && flag {print}' "$1")

# Format the relevant line
formatted_relevant_line=$(echo "$relevant_line" | sed -e $'s/^[ \t]*//' -e $'s/[ \t]*\.*[ \t]*$//' -E -e $'s/[ \t]+/ /g' | awk '{ $0=toupper(substr($0,1,1)) substr($0,2); } 1')

# Update the commit message to include both the formatted relevant line and all other lines
{
  echo "$formatted_relevant_line"
  echo "$all_other_lines"
} > "$1"
</file>

<file path=".lintstagedrc.yml">
'*.{ts,js,json,yml}': 'prettier --loglevel warn --cache --write'
</file>

<file path="backend/src/emails/_footer.mjml">
<mjml>
  <mj-head>
    <mj-style> .unsubscribe-link { color: #aaaaaa !important; } </mj-style>
  </mj-head>
  <mj-body>
    <mj-section padding="0">
      <mj-column>
        <mj-text mj-class="text" padding-top="30px" padding-bottom="20px" align="left" color="#aaaaaa"
          >Change the world — support the ideas that inspire you
        </mj-text>
      </mj-column>
    </mj-section>
  </mj-body>
</mjml>
</file>

<file path="backend/src/emails/_head.mjml">
<mj-attributes>
  <mj-font name="Rubik" href="https://fonts.googleapis.com/css?family=Rubik:400,500,700&display=swap&subset=cyrillic" />
  <mj-class name="body" font-family="Rubik, Helvetica, Arial" background-color="#ffffff" />
  <mj-class name="content" font-family="Rubik, Helvetica, Arial" background-color="#ffffff" />
  <mj-class name="text" font-family="Rubik, Helvetica, Arial" css-class="text" color="#222222" font-size="16px" line-height="26px" />
  <mj-class name="h1" font-family="Rubik, Helvetica, Arial" font-weight="bold" padding-bottom="10px" color="#222222" font-size="24px" line-height="30px" />
  <mj-class name="button" font-family="Rubik, Helvetica, Arial" css-class="button" align="left" font-size="16px" font-weight="500" inner-padding="16px 35px 15px" background-color="#0066ff" color="#ffffff" />
</mj-attributes>
<mj-style inline="inline">
  .link-nostyle {
    color: inherit;
    text-decoration: none
  }
</mj-style>
</file>

<file path="backend/src/emails/_header.mjml">
<mjml>
  <mj-body>
    <mj-section padding="0">
      <mj-column>
        <mj-text
          padding-top="20px"
          padding-bottom="30px"
          color="#222222"
          font-size="16px"
          font-weight="bold"
          line-height="38px"
        >
          <a class="link-nostyle" href="{{homeUrl}}">IdeaNick</a>
        </mj-text>
      </mj-column>
    </mj-section>
  </mj-body>
</mjml>
</file>

<file path="backend/src/emails/ideaBlocked.mjml">
<mjml>
  <mj-head>
    <mj-title>Your Idea Blocked!</mj-title>
    <mj-include path="./_head.mjml" />
  </mj-head>
  <mj-body mj-class="body">
    <mj-include path="./_header.mjml" />
    <mj-section mj-class="content">
      <mj-column>
        <mj-text mj-class="h1">Your Idea Blocked!</mj-text>
        <mj-text mj-class="text">Sorry, but we block your idea "{{ideaNick}}"</mj-text>
      </mj-column>
    </mj-section>
    <mj-include path="./_footer.mjml" />
  </mj-body>
</mjml>
</file>

<file path="backend/src/emails/mostLikedIdeas.mjml">
<mjml>
  <mj-head>
    <mj-title>Most Liked Ideas!</mj-title>
    <mj-include path="./_head.mjml" />
  </mj-head>
  <mj-body mj-class="body">
    <mj-include path="./_header.mjml" />
    <mj-section mj-class="content">
      <mj-column>
        <mj-text mj-class="h1">Hello! Check this month most liked ideas:</mj-text>
        <mj-text mj-class="text">
          {{#each ideas}}
            <a href="{{this.url}}">{{this.name}}</a><br />
          {{/each}}
        </mj-text>
      </mj-column>
    </mj-section>
    <mj-include path="./_footer.mjml" />
  </mj-body>
</mjml>
</file>

<file path="backend/src/emails/welcome.mjml">
<mjml>
  <mj-head>
    <mj-title>Thanks For Registration!</mj-title>
    <mj-include path="./_head.mjml" />
  </mj-head>
  <mj-body mj-class="body">
    <mj-include path="./_header.mjml" />
    <mj-section mj-class="content">
      <mj-column>
        <mj-text mj-class="h1">Thanks For Registration, {{userNick}}!</mj-text>
        <mj-text mj-class="text">Publish your first idea:</mj-text>
        <mj-button mj-class="button" href="{{addIdeaUrl}}">Add Idea</mj-button>
      </mj-column>
    </mj-section>
    <mj-include path="./_footer.mjml" />
  </mj-body>
</mjml>
</file>

<file path="backend/src/lib/brevo.ts">
import { env } from "./env";
import axios, { type AxiosResponse } from "axios";
import _ from "lodash";

const makeRequestToBrevo = async ({
  path,
  data,
}: {
  path: string;
  data: Record<string, any>;
}): Promise<{
  originalResponse?: AxiosResponse;
  loggableResponse: Pick<AxiosResponse, "status" | "statusText" | "data">;
}> => {
  if (!env.BREVO_API_KEY) {
    return {
      loggableResponse: {
        status: 200,
        statusText: "OK",
        data: { message: "BREVO_API_KEY is not set" },
      },
    };
  }
  const response = await axios({
    method: "POST",
    url: `https://api.brevo.com/v3/${path}`,
    headers: {
      accept: "application/json",
      "api-key": env.BREVO_API_KEY,
      "content-type": "application/json",
    },
    data,
  });
  return {
    originalResponse: response,
    loggableResponse: _.pick(response, ["status", "statusText", "data"]),
  };
};

export const sendEmailThroughBrevo = async ({
  to,
  subject,
  html,
}: {
  to: string;
  subject: string;
  html: string;
}) => {
  return await makeRequestToBrevo({
    path: "smtp/email",
    data: {
      subject,
      htmlContent: html,
      sender: { email: env.FROM_EMAIL_ADDRESS, name: env.FROM_EMAIL_NAME },
      to: [{ email: to }],
    },
  });
};
</file>

<file path="backend/src/lib/cron.ts">
import { CronJob } from "cron";
import { notifyAboutMostLikedIdeas } from "../scripts/notifyAboutLkedIdeas";
import { type AppContext } from "./ctx";
import { logger } from "./logger";

export const applyCron = (ctx: AppContext) => {
  new CronJob(
    "0 10 1 * *", // At 10:00 on day-of-month 1
    () => {
      notifyAboutMostLikedIdeas({ctx}).catch((error) => {
        logger.error("cron", error);
      });
    },
    null, // onComplete
    true, // start right now
  );
};
</file>

<file path="backend/src/lib/error.ts">
export class ExpectedError extends Error {
  isExpected = true as const;
}
</file>

<file path="backend/src/lib/ideas.ts">
import _ from "lodash";

export const ideas = _.times(100, (i) => ({
  nick: `nick${i}`,
  name: `Idea ${i}`,
  description: `Description ${i}`,
  text: _.times(1000, (i) => `Text ${i}`).join(" "),
}));
</file>

<file path="backend/src/lib/logger.ts">
import { env } from "./env";
import { EOL } from "os";
import {omit} from "@stepik/shared/src/omit"
import { TRPCError } from "@trpc/server";
import debug from "debug";
import _ from "lodash";
import pc from "picocolors";
import { serializeError } from "serialize-error";
import { MESSAGE } from "triple-beam";
import winston from "winston";
import * as yaml from "yaml";
import { deepMap } from "../utils/deepMap";
import { ExpectedError } from "./error";
import { sentryCaptureException } from "./sentry";

export const winstonLogger = winston.createLogger({
  level: "debug",
  format: winston.format.combine(
    winston.format.timestamp({
      format: "YYYY-MM-DD HH:mm:ss",
    }),
    winston.format.errors({ stack: true }),
    winston.format.json(),
  ),
  defaultMeta: { service: "backend", hostEnv: env.HOST_ENV },
  transports: [
    new winston.transports.Console({
      format:
        env.HOST_ENV !== "local"
          ? winston.format.json()
          : winston.format((logData) => {
              const setColor = {
                info: (str: string) => pc.blue(str),
                error: (str: string) => pc.red(str),
                debug: (str: string) => pc.cyan(str),
              }[logData.level as "info" | "error" | "debug"];
              const levelAndType = `${logData.level} ${logData.logType}`;
              const timestamp =
                typeof logData.timestamp === "string" ? logData.timestamp : "";
              const topMessage = `[${setColor(levelAndType)}] ${pc.green(timestamp)}${EOL}${logData.message}`;

              const visibleMessageTags = omit(logData, [
                "level",
                "logType",
                "timestamp",
                "message",
                "service",
                "hostEnv",
              ]);

              const stringifyedLogData = _.trim(
                yaml.stringify(visibleMessageTags, (_k, v) =>
                  _.isFunction(v) ? "Function" : v,
                ),
              );

              const resultLogData = {
                ...logData,
                [MESSAGE]:
                  [
                    topMessage,
                    Object.keys(visibleMessageTags).length > 0
                      ? `${EOL}${stringifyedLogData}`
                      : "",
                  ]
                    .filter(Boolean)
                    .join("") + EOL,
              };

              return resultLogData;
            })(),
    }),
  ],
});

export type LoggerMetaData = Record<string, any> | undefined;
const prettifyMeta = (meta: LoggerMetaData): LoggerMetaData => {
  return deepMap(meta, ({ key, value }) => {
    if (
      [
        "email",
        "password",
        "newPassword",
        "oldPassword",
        "token",
        "text",
        "description",
      ].includes(key)
    ) {
      return "🙈";
    }
    return value;
  });
};

export const logger = {
  info: (logType: string, message: string, meta?: LoggerMetaData) => {
    if (!debug.enabled(`stepik:${logType}`)) {
      return;
    }
    winstonLogger.info(message, { logType, ...prettifyMeta(meta) });
  },
  error: (logType: string, error: any, meta?: LoggerMetaData) => {
    const isNativeExpectedError = error instanceof ExpectedError
    const isTrpcExpectedError = error instanceof TRPCError && error.cause instanceof ExpectedError
    const prettifiedMetaData = prettifyMeta(meta)
    if (!isNativeExpectedError && !isTrpcExpectedError) {
      sentryCaptureException(error, prettifiedMetaData)
    }
    if (!debug.enabled(`stepik:${logType}`)) {
      return;
    }
    const serializedError = serializeError(error);
    winstonLogger.error(serializedError.message || "Unknown error", {
      logType,
      error,
      errorStack: serializedError.stack,
      ...prettifiedMetaData,
    });
  },
};
</file>

<file path="backend/src/lib/passport.ts">
import { env } from "./env";
import { type Express } from "express";
import { Passport } from "passport";
import { ExtractJwt, Strategy as JWTStrategy } from "passport-jwt";
import { type AppContext } from "./ctx";

export const applyPassportToExpressApp = (
  expressApp: Express,
  ctx: AppContext,
): void => {
  const passport = new Passport();

  passport.use(
    new JWTStrategy(
      {
        secretOrKey: env.JWT_SECRET,
        jwtFromRequest: ExtractJwt.fromAuthHeaderWithScheme("Bearer"),
      },
      (jwtPayload: string, done) => {
        ctx.prisma.user
          .findUnique({
            where: { id: jwtPayload },
          })
          .then((user) => {
            if (!user) {
              done(null, false);
              return;
            }
            done(null, user);
          })
          .catch((error) => {
            done(error, false);
          });
      },
    ),
  );

  expressApp.use((req, res, next) => {
    if (!req.headers.authorization) {
      next();
      return;
    }
    passport.authenticate("jwt", { session: false }, (...args: any) => {
      req.user = args[1] || undefined;
      next();
    })(req, res, next);
  });
};
</file>

<file path="backend/src/lib/prisma.ts">
import { env } from "./env";
import { PrismaClient } from "@prisma/client";
import { logger } from "./logger";

export const createPrismaClient = () => {
  const prisma = new PrismaClient({
    log: [
      {
        emit: "event",
        level: "query",
      },
      {
        emit: "event",
        level: "info",
      },
    ],
  });

  prisma.$on("query", (e) => {
    logger.info("prisma:low:query", "Successfull request", {
      query: e.query,
      duration: e.duration,
      params: env.HOST_ENV === "local" ? e.params : "***",
    });
  });

  prisma.$on("info", (e) => {
    logger.info("prisma:low:info", e.message);
  });

  const extendedPrisma = prisma.$extends({
    client: {},
    query: {
      $allModels: {
        $allOperations: async ({ model, operation, args, query }) => {
          const start = Date.now();
          try {
            const result = await query(args);
            const durationMs = Date.now() - start;
            logger.info("prisma:high", "Successfull request", {
              model,
              operation,
              args,
              durationMs,
            });
            return result;
          } catch (error) {
            const durationMs = Date.now() - start;
            logger.error("prisma:high", error, {
              model,
              operation,
              args,
              durationMs,
            });
            throw error;
          }
        },
      },
    },
  });

  return extendedPrisma;
};
</file>

<file path="backend/src/prisma/migrations/20250308164954_add_idea_model/migration.sql">
-- CreateTable
CREATE TABLE "Idea" (
    "id" TEXT NOT NULL,
    "nick" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "description" TEXT NOT NULL,
    "text" TEXT NOT NULL,

    CONSTRAINT "Idea_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "Idea_nick_key" ON "Idea"("nick");
</file>

<file path="backend/src/prisma/migrations/20250309133435_added_datetime/migration.sql">
-- AlterTable
ALTER TABLE "Idea" ADD COLUMN     "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP;
</file>

<file path="backend/src/prisma/migrations/20250310115236_added_user_shema/migration.sql">
-- CreateTable
CREATE TABLE "User" (
    "id" TEXT NOT NULL,
    "nick" TEXT NOT NULL,
    "password" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "User_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "User_nick_key" ON "User"("nick");
</file>

<file path="backend/src/prisma/migrations/20250312104124_added_relations/migration.sql">
/*
  Warnings:

  - Added the required column `authorId` to the `Idea` table without a default value. This is not possible if the table is not empty.

*/
-- AlterTable
ALTER TABLE "Idea" ADD COLUMN     "authorId" TEXT NOT NULL;

-- AddForeignKey
ALTER TABLE "Idea" ADD CONSTRAINT "Idea_authorId_fkey" FOREIGN KEY ("authorId") REFERENCES "User"("id") ON DELETE RESTRICT ON UPDATE CASCADE;
</file>

<file path="backend/src/prisma/migrations/20250320183204_added_name_to_user/migration.sql">
-- AlterTable
ALTER TABLE "User" ADD COLUMN     "name" TEXT NOT NULL DEFAULT '';
</file>

<file path="backend/src/prisma/migrations/20250321191512_added_serial_number/migration.sql">
/*
  Warnings:

  - A unique constraint covering the columns `[serialNumber]` on the table `Idea` will be added. If there are existing duplicate values, this will fail.

*/
-- AlterTable
ALTER TABLE "Idea" ADD COLUMN     "serialNumber" SERIAL NOT NULL;

-- CreateIndex
CREATE UNIQUE INDEX "Idea_serialNumber_key" ON "Idea"("serialNumber");
</file>

<file path="backend/src/prisma/migrations/20250324143247_added_likes/migration.sql">
-- CreateTable
CREATE TABLE "IdeaLike" (
    "id" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "ideaId" TEXT NOT NULL,
    "userId" TEXT NOT NULL,

    CONSTRAINT "IdeaLike_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "IdeaLike_ideaId_userId_key" ON "IdeaLike"("ideaId", "userId");

-- AddForeignKey
ALTER TABLE "IdeaLike" ADD CONSTRAINT "IdeaLike_ideaId_fkey" FOREIGN KEY ("ideaId") REFERENCES "Idea"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "IdeaLike" ADD CONSTRAINT "IdeaLike_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE RESTRICT ON UPDATE CASCADE;
</file>

<file path="backend/src/prisma/migrations/20250325190313_added_permissions_and_blocked_at/migration.sql">
-- CreateEnum
CREATE TYPE "UserPermission" AS ENUM ('BLOCK_IDEAS', 'ALL');

-- AlterTable
ALTER TABLE "Idea" ADD COLUMN     "blockedAt" TIMESTAMP(3);

-- AlterTable
ALTER TABLE "User" ADD COLUMN     "permissions" TEXT[];
</file>

<file path="backend/src/prisma/migrations/20250328170440_temp_email/migration.sql">
-- AlterTable
ALTER TABLE "User" ADD COLUMN     "email" TEXT;
</file>

<file path="backend/src/prisma/migrations/20250328170601_set_email_to_user/migration.sql">
-- This is an empty migration.
update "User"
set email = concat(nick, '@example.com')
where email is null;
</file>

<file path="backend/src/prisma/migrations/20250328170906_added_unique_email_to_user/migration.sql">
/*
  Warnings:

  - A unique constraint covering the columns `[email]` on the table `User` will be added. If there are existing duplicate values, this will fail.
  - Made the column `email` on table `User` required. This step will fail if there are existing NULL values in that column.

*/
-- AlterTable
ALTER TABLE "User" ALTER COLUMN "email" SET NOT NULL;

-- CreateIndex
CREATE UNIQUE INDEX "User_email_key" ON "User"("email");
</file>

<file path="backend/src/prisma/migrations/migration_lock.toml">
# Please do not edit this file manually
# It should be added in your version-control system (e.g., Git)
provider = "postgresql"
</file>

<file path="backend/src/router/auth/SignIn/input.ts">
import { z } from "zod";

export const zSignIn = z.object({
  nick: z.string().min(1).max(30),
  password: z.string().min(5).max(30),
});
</file>

<file path="backend/src/router/auth/UpdatePassword/input.ts">
import { z } from "zod";

export const ZUpdatePassowordInput = z.object({
  oldPassword: z.string().min(5).max(30),
  newPassword: z.string().min(5).max(30),
});
</file>

<file path="backend/src/router/auth/UpdateProfile/input.ts">
import { z } from "zod";

export const ZUpdateProfileInput = z.object({
  nick: z
    .string()
    .min(5)
    .max(30)
    .regex(
      /^[a-z0-9-]+$/,
      "Nick may contain only lowercase letters, numbers and dashes",
    ),
  name: z.string().min(5).max(30).default(""),
  avatar: z.string().nullable()
});
</file>

<file path="backend/src/router/ideas/setIdeaLike/input.ts">
import { z } from "zod";

export const zSetLikeInput = z.object({
  ideaId: z.string().min(1),
  isLikedByMe: z.boolean(),
});
</file>

<file path="backend/src/router/ideas/UpdateIdea/input.ts">
import { z } from "zod";
import { zCreateIdeaTrpcInput } from "../CreateIdea/input";

export const zUpdateInput = zCreateIdeaTrpcInput.extend({
  ideaId: z.string().min(1),
});
</file>

<file path="backend/src/scripts/notifyAboutLkedIdeas.ts">
import { Prisma, type Idea } from "@prisma/client";
import { type AppContext } from "../lib/ctx";
import { sendMostLikedIdeasEmail } from "../lib/emails";



export const getMostLikedIdeas = async ({ ctx, limit = 10, now }: { ctx: AppContext; limit?: number; now?: Date }) => {
  const sqlNow = now ? Prisma.sql`${now.toISOString()}::timestamp` : Prisma.sql`now()`
  return await ctx.prisma.$queryRaw<Array<Pick<Idea, 'id' | 'nick' | 'name'> & { thisMonthLikesCount: number }>>`
  with "topIdeas" as (
    select id,
      nick,
      name,
      (
        select count(*)::int
        from "IdeaLike" il
        where il."ideaId" = i.id
          and il."createdAt" > ${sqlNow} - interval '1 month'
          and i."blockedAt" is null
      ) as "thisMonthLikesCount"
    from "Idea" i
    order by "thisMonthLikesCount" desc
    limit ${limit}
  )
  select *
  from "topIdeas"
  where "thisMonthLikesCount" > 0
`
}




export const notifyAboutMostLikedIdeas = async ({
  ctx,
  limit,
  now,
}: {
  ctx: AppContext
  limit?: number
  now?: Date
}) => {
  // const mostLikedIdeas = await ctx.prisma.$queryRaw<
  //   Array<Pick<Idea, "id" | "nick" | "name"> & { thisMonthLikesCount: number }>
  // >`
  //   WITH "topIdeas" as (
  //   SELECT "id", "nick", "name", (
  //       SELECT COUNT(*)::int FROM "IdeaLike" il
  //       WHERE il."ideaId" = i."id" AND il."createdAt" > NOW() - interval '1 month'
  //   ) as "TopMonthLikes"
  //   FROM "Idea" i
  //   WHERE i."blockedAt" is NULL
  //   ORDER BY "TopMonthLikes" DESC
  //   LIMIT 10
  //   )
  //   SELECT * FROM "topIdeas" WHERE "TopMonthLikes" > 0
  // `;

  const users = await ctx.prisma.user.findMany({
    select: {
      email: true,
    },
  });
  const mostLikedIdeas = await getMostLikedIdeas({ ctx, limit, now })
  if (!mostLikedIdeas.length) {
    return;
  }
  for (const user of users) {
    sendMostLikedIdeasEmail({ user, ideas: mostLikedIdeas });
  }
};
</file>

<file path="backend/src/scripts/presetDB.ts">
import { env } from "../lib/env";
import { type AppContext } from "../lib/ctx";
import { getPasswordHash } from "../utils/getPasswordHash";

export const presetDb = async (ctx: AppContext) => {
  await ctx.prisma.user.upsert({
    where: {
      nick: "admin",
    },
    create: {
      nick: "admin",
      password: getPasswordHash(env.INITIAL_ADMIN_PASSWORD),
      permissions: ["ALL"],
      email: "nechyzhoi@gmail.com",
    },
    update: {
      permissions: ["ALL"],
    },
  });
};
</file>

<file path="backend/src/utils/can.ts">
import type { Idea, User, UserPermission } from "@prisma/client";

type MaybeUser = Pick<User, "permissions" | "id"> | null;
type MaybeIdea = Pick<Idea, "authorId"> | null;

export const hasPermission = (user: MaybeUser, permission: UserPermission) => {
  return (
    user?.permissions.includes(permission) ||
    user?.permissions.includes("ALL") ||
    false
  );
};

export const canBlockIdeas = (user: MaybeUser) => {
  return hasPermission(user, "BLOCK_IDEAS");
};

export const canEditIdea = (user: MaybeUser, idea: MaybeIdea) => {
  return !!user && !!idea && user?.id === idea?.authorId;
};
</file>

<file path="backend/src/utils/deepMap.ts">
import _ from "lodash";

type ReplaceFn = ({
  path,
  key,
  value,
}: {
  path: string;
  key: string;
  value: Value;
}) => Value;
type Value =
  | Object
  | number
  | string
  | boolean
  | null
  | undefined
  | Function
  | Symbol
  | any[];

const recursion = ({
  input,
  replaceFn,
  seen,
  pathStartsWith,
  parentKey,
}: {
  input: Value;
  replaceFn: ReplaceFn;
  seen: WeakSet<any>;
  pathStartsWith: string;
  parentKey: string;
}): Value => {
  if (
    ["object", "function", "symbol"].includes(typeof input) &&
    input !== null
  ) {
    if (seen.has(input)) {
      return "!!!CIRCULAR!!!";
    } else {
      seen.add(input);
    }
  }
  const result = replaceFn({
    path: pathStartsWith.replace(/\.$/, ""),
    key: parentKey,
    value: input,
  });
  if (!result) {
    return result;
  }
  if (_.isArray(result)) {
    return result.map((item, index) =>
      recursion({
        input: item,
        replaceFn,
        seen,
        pathStartsWith: `${pathStartsWith}${index}.`,
        parentKey: index.toString(),
      }),
    );
  }
  if (_.isObject(result)) {
    const object: any = {};
    for (const [key, value] of Object.entries(result)) {
      object[key] = recursion({
        input: value,
        replaceFn,
        seen,
        pathStartsWith: `${pathStartsWith}${key}.`,
        parentKey: key,
      });
    }
    return object;
  }
  return result;
};

export const deepMap = <T = Value>(input: Value, replaceFn: ReplaceFn): T => {
  const seen = new WeakSet();
  const mappedObject = recursion({
    input,
    replaceFn,
    seen,
    pathStartsWith: "",
    parentKey: "",
  });
  const clonedMappedObject = _.cloneDeep(mappedObject);
  return clonedMappedObject as T;
};
</file>

<file path="backend/src/utils/getPasswordHash.ts">
import { env } from "../lib/env";
import crypto from "crypto";

export const getPasswordHash = (password: string) => {
  return crypto
    .createHash("sha256")
    .update(`${env.PASSWORD_SALT}${password}`)
    .digest("hex");
};
</file>

<file path="backend/src/utils/signJWT.ts">
import { env } from "../lib/env";
import jwt from "jsonwebtoken";

export const signJWT = (userId: string): string => {
  return jwt.sign(userId, env.JWT_SECRET);
};
</file>

<file path="backend/src/utils/types.ts">
import { type User } from "@prisma/client";
import { type Request } from "express";

export type ExpressRequest = Request & {
  user: User | undefined;
};
</file>

<file path="eslint.config.mjs">
import { defineConfig, globalIgnores } from "eslint/config";
import node from "eslint-plugin-node";
import jest from "eslint-plugin-jest";
import path from "node:path";
import { fileURLToPath } from "node:url";
import js from "@eslint/js";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const compat = new FlatCompat({
    baseDirectory: __dirname,
    recommendedConfig: js.configs.recommended,
    allConfig: js.configs.all
});

export default defineConfig([globalIgnores(["**/node_modules", "**/dist", "**/*.config.js"]), {
    extends: compat.extends("standard-with-typescript", "prettier", "plugin:jest/recommended"),

    plugins: {
        node,
        jest,
    },

    rules: {
        "no-new": "off",

        "import/order": ["error", {
            alphabetize: {
                order: "asc",
                caseInsensitive: false,
                orderImportKind: "asc",
            },
        }],

        "@typescript-eslint/consistent-type-definitions": ["error", "type"],
        "@typescript-eslint/strict-boolean-expressions": "off",
        "@typescript-eslint/prefer-nullish-coalescing": "off",
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/restrict-template-expressions": "off",
        "@typescript-eslint/triple-slash-reference": "off",
        "@typescript-eslint/ban-types": "off",
        "@typescript-eslint/consistent-type-assertions": "off",
        "jsx-a11y/anchor-is-valid": "off",
        curly: ["error", "all"],

        "no-irregular-whitespace": ["error", {
            skipTemplates: true,
            skipStrings: true,
        }],

        "node/no-process-env": "error",

        "no-restricted-syntax": ["error", {
            selector: "[object.type=MetaProperty][property.name=env]",
            message: "Use instead import { env } from \"lib/env\"",
        }],
    },
}]);
</file>

<file path="shared/.lintstagedrc.yml">
"*.{ts,tsx,js}":
  - eslint --cache --cache-location ./node_modules/.cache/.eslintcache --fix
  - prettier --loglevel warn --cache --write
"*.{json,yml,scss}": prettier --loglevel warn --cache --write
</file>

<file path="shared/package.json">
{
  "name": "@stepik/shared",
  "private": true,
  "version": "0.0.0",
  "scripts": {
    "types": "tsc --noEmit --project ./tsconfig.json",
    "lint": "eslint --cache --cache-location ./node_modules/.cache/.eslintcache --ext .ts .",
    "prettify": "prettier --loglevel warn --cache --write '{src/**/*,*}.{ts,tsx,js,json,yml,scss}' '!**/{node_modules,dist}/**/*'",
    "test": "jest"
  },
  "dependencies": {
    "lodash": "^4.17.21",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@types/lodash": "^4.17.15",
    "@types/node": "^22.10.7"
  }
}
</file>

<file path="shared/src/zod.ts">
import { z } from "zod";

export const zEnvNonemptyTrimmed = z.string().trim().min(1);
export default zEnvNonemptyTrimmed;
export const zEnvNonemptyTrimmedRequiredOnNotLocal = zEnvNonemptyTrimmed
  .optional()
  .refine(
    // eslint-disable-next-line node/no-process-env
    (val) => `${process.env.HOST_ENV}` === "local" || !!val,
    "Required on not local host",
  );
export const zEnvHost = z.enum(["local", "production"]);

export const zStringRequired = z
  .string({ required_error: "Please, fill it" })
  .min(1, "Please, fill it");
export const zStringOptional = z.string().optional();
export const zEmailRequired = zStringRequired.email();
export const zNickRequired = zStringRequired.regex(
  /^[a-z0-9-]+$/,
  "Nick may contain only lowercase letters, numbers and dashes",
);
export const zStringMin = (min: number) =>
  zStringRequired.min(min, `Text should be at least ${min} characters long`);
export const zPasswordsMustBeTheSame =
  (passwordFieldName: string, passwordAgainFieldName: string) =>
  (val: any, ctx: z.RefinementCtx) => {
    if (val[passwordFieldName] !== val[passwordAgainFieldName]) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: "Passwords must be the same",
        path: [passwordAgainFieldName],
      });
    }
  };
</file>

<file path="shared/tsconfig.json">
{
  "extends": "../backend/tsconfig.json",
  "include": ["src"]
}
</file>

<file path="web-stepik/.lintstagedrc.yml">
'*.{ts,tsx,js}':
  - 'eslint --cache --cache-location ./node_modules/.cache/.eslintcache --fix'
  - 'prettier --loglevel warn --cache --write'
'*.scss':
  - 'stylelint --cache --cache-location ./node_modules/.cache/.stylelintcache --fix'
  - 'prettier --loglevel warn --cache --write'
'*.{json,yml}': 'prettier --loglevel warn --cache --write'
</file>

<file path="web-stepik/.pnpm/lock.yaml">
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    dependencies:
      '@stepik/backend':
        specifier: workspace:*
        version: link:../backend
      sass-migrator:
        specifier: ^2.3.1
        version: 2.3.1

packages:

  sass-migrator@2.3.1:
    resolution: {integrity: sha512-JXXLZfzrnxtUWz/TS4xnbJq4g709wqYFgUb2s32FTDsEQSgPThRWrwT49vxfQK+eUbavJUzoQZ/tR5lq7fFnyA==}
    engines: {node: '>=10.12.0'}
    hasBin: true

snapshots:

  sass-migrator@2.3.1: {}
</file>

<file path="web-stepik/.stylelintrc.yml">
extends:
  - stylelint-config-standard-scss
  - stylelint-config-prettier-scss
rules:
  # scss/at-import-no-partial-leading-underscore: null
  selector-class-pattern: null
  scss/dollar-variable-pattern: null
  scss/at-mixin-pattern:
    - ^[a-z][a-zA-Z0-9]+$
    - message: Expected mixin to be camelCase
  selector-pseudo-element-colon-notation: "single"
  scss/dollar-variable-empty-line-before: null
  block-no-empty: null
  declaration-empty-line-before: null
  color-function-notation: null
  alpha-value-notation: null
  no-descending-specificity: null
  scss/double-slash-comment-empty-line-before: null
  declaration-block-no-redundant-longhand-properties: null
  shorthand-property-no-redundant-values: null
  color-hex-length: null
  no-empty-source: null
</file>

<file path="web-stepik/public/favicon.svg">
<svg xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.dev/svgjs" width="512" height="512"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="SvgjsSvg1118" x="0px" y="0px" viewBox="0 0 512 512" style="enable-background:new 0 0 512 512;" xml:space="preserve">
<polyline style="fill:#BAB0A8;" points="306.456,413.723 306.456,449.665 205.542,449.665 205.542,413.723 "></polyline>
<path style="fill:#D6CCC5;" d="M205.542,471.09c0,5.545,4.495,10.037,10.037,10.037h80.839c5.544,0,10.038-4.493,10.038-10.037  v-21.425H205.543v21.425H205.542z"></path>
<path style="fill:#3C4956;" d="M281.79,491.86c0-5.928-4.804-10.734-10.732-10.734h-8.191h-9.384h-3.346h-9.194  c-5.928,0-10.733,4.805-10.733,10.734c0,5.927,4.804,10.733,10.733,10.733h9.194h3.346h9.384h8.191  C276.986,502.593,281.79,497.787,281.79,491.86z"></path>
<path style="fill:#485360;" d="M288.619,418.2h17.569c5.926,0,10.732-4.805,10.732-10.733s-4.805-10.734-10.732-10.734h-38.853  h-3.346h-1.479h-3.346h-6.329h-3.346h-1.479h-3.346h-2.431h-14.499h-9.383h-3.347h-9.193c-5.928,0-10.734,4.806-10.734,10.734  s4.805,10.733,10.734,10.733h9.193h3.347h9.383h14.499h2.431h3.346h1.479h3.346h6.329h3.346h1.479h3.346h-0.742"></path>
<rect x="205.544" y="413.727" style="fill:#ADA199;" width="52.628" height="35.937"></rect>
<path style="fill:#C9C2BD;" d="M258.171,471.09v-21.425h-52.628v21.425c0,5.545,4.495,10.037,10.037,10.037h52.629  C262.666,481.126,258.171,476.634,258.171,471.09z"></path>
<path style="fill:#3C4956;" d="M247.709,407.467c0-5.927,4.805-10.734,10.734-10.734h-5.606h-3.346h-1.479h-3.346h-2.431h-14.499  h-9.383h-3.347h-9.193c-5.928,0-10.734,4.806-10.734,10.734s4.805,10.733,10.734,10.733h9.193h3.347h9.383h14.499h2.431h3.346h1.479  h3.346h5.606C252.514,418.2,247.709,413.395,247.709,407.467z"></path>
<path style="fill:#FE9900;" d="M160.435,322.745c0.662,0.789,1.333,1.568,2.015,2.34c0.018,0.021,0.036,0.04,0.054,0.059  c0.674,0.764,1.357,1.518,2.049,2.265c0.022,0.022,0.041,0.044,0.061,0.066c0.692,0.744,1.393,1.481,2.103,2.209  c0.022,0.022,0.042,0.042,0.061,0.064c0.715,0.731,1.436,1.452,2.168,2.165c0.015,0.015,0.031,0.029,0.047,0.044  c0.739,0.72,1.488,1.431,2.244,2.133c0.003,0.004,0.009,0.008,0.013,0.012c0.103,0.1,27.597,26.64,32.462,62.634h4.211h9.674h4.825  h45.254h14.499h9.383h14.499h2.229c4.866-35.994,32.358-62.535,32.462-62.634c0.003-0.004,0.009-0.008,0.012-0.012  c0.758-0.701,1.506-1.413,2.246-2.133c0.015-0.015,0.029-0.029,0.046-0.044c0.73-0.714,1.454-1.435,2.165-2.165  c0.023-0.022,0.043-0.042,0.063-0.064c0.71-0.728,1.412-1.464,2.103-2.209c0.022-0.023,0.04-0.044,0.061-0.066  c0.694-0.746,1.375-1.5,2.05-2.265c0.019-0.019,0.036-0.039,0.055-0.059c0.679-0.772,1.352-1.551,2.014-2.34  c0.009-0.01,0.016-0.019,0.025-0.029c6.733-8.021,12.474-16.899,17.036-26.452c0.017-0.032,0.031-0.067,0.047-0.099  c0.428-0.9,0.846-1.805,1.255-2.716c0.063-0.142,0.122-0.286,0.186-0.427c0.356-0.805,0.705-1.613,1.046-2.425  c0.089-0.215,0.175-0.432,0.264-0.649c0.304-0.742,0.605-1.488,0.897-2.237c0.106-0.269,0.205-0.542,0.307-0.812  c0.268-0.7,0.529-1.403,0.785-2.111c0.112-0.308,0.219-0.619,0.328-0.929c0.237-0.675,0.469-1.351,0.694-2.029  c0.113-0.34,0.222-0.68,0.332-1.02c0.209-0.654,0.417-1.31,0.617-1.969c0.111-0.365,0.218-0.733,0.327-1.099  c0.188-0.639,0.371-1.279,0.548-1.921c0.108-0.389,0.212-0.778,0.317-1.168c0.165-0.625,0.327-1.254,0.483-1.884  c0.101-0.406,0.2-0.815,0.296-1.223c0.15-0.62,0.289-1.241,0.428-1.865c0.094-0.421,0.186-0.841,0.275-1.263  c0.13-0.615,0.252-1.234,0.374-1.854c0.083-0.433,0.168-0.867,0.248-1.301c0.113-0.613,0.219-1.23,0.322-1.845  c0.074-0.443,0.151-0.886,0.22-1.33c0.097-0.615,0.185-1.235,0.274-1.854c0.064-0.447,0.128-0.894,0.188-1.343  c0.082-0.623,0.152-1.249,0.225-1.876c0.051-0.448,0.107-0.895,0.154-1.344c0.066-0.635,0.121-1.274,0.178-1.911  c0.039-0.444,0.083-0.886,0.117-1.332c0.053-0.662,0.092-1.328,0.134-1.994c0.027-0.423,0.058-0.844,0.08-1.268  c0.038-0.735,0.063-1.472,0.088-2.211c0.012-0.358,0.031-0.714,0.041-1.072c0.027-1.098,0.044-2.199,0.044-3.303  c0-8.611-0.874-17.019-2.536-25.139c-0.622-3.045-1.358-6.05-2.197-9.01c-0.562-1.973-1.168-3.927-1.823-5.858  c-16.673-49.268-63.289-84.732-118.186-84.732c-54.898,0-101.514,35.464-118.186,84.732c-0.653,1.932-1.261,3.885-1.822,5.858  c-0.841,2.96-1.575,5.965-2.198,9.01c-1.662,8.12-2.534,16.527-2.534,25.139c0,1.105,0.015,2.205,0.042,3.303  c0.01,0.359,0.029,0.715,0.042,1.072c0.025,0.738,0.05,1.476,0.087,2.211c0.023,0.424,0.054,0.845,0.081,1.268  c0.041,0.665,0.081,1.331,0.133,1.994c0.034,0.446,0.079,0.888,0.119,1.332c0.056,0.638,0.112,1.277,0.179,1.911  c0.047,0.449,0.102,0.896,0.154,1.344c0.072,0.626,0.144,1.253,0.225,1.876c0.059,0.449,0.125,0.896,0.188,1.343  c0.088,0.619,0.177,1.237,0.273,1.854c0.07,0.444,0.147,0.887,0.221,1.33c0.103,0.615,0.208,1.232,0.32,1.845  c0.081,0.434,0.166,0.868,0.25,1.301c0.12,0.619,0.244,1.237,0.373,1.854c0.089,0.423,0.181,0.842,0.275,1.263  c0.138,0.623,0.28,1.244,0.427,1.865c0.098,0.409,0.197,0.817,0.299,1.223c0.157,0.631,0.318,1.259,0.484,1.884  c0.103,0.39,0.208,0.779,0.315,1.168c0.178,0.642,0.36,1.282,0.548,1.921c0.108,0.366,0.217,0.734,0.327,1.099  c0.2,0.66,0.406,1.316,0.618,1.969c0.11,0.34,0.218,0.681,0.331,1.02c0.224,0.678,0.457,1.354,0.693,2.029  c0.109,0.31,0.217,0.621,0.328,0.929c0.253,0.707,0.516,1.411,0.784,2.111c0.102,0.269,0.203,0.542,0.308,0.812  c0.291,0.749,0.592,1.495,0.897,2.237c0.088,0.216,0.175,0.433,0.264,0.649c0.34,0.813,0.69,1.62,1.046,2.425  c0.064,0.141,0.123,0.285,0.188,0.427c0.406,0.911,0.826,1.816,1.254,2.716c0.016,0.032,0.03,0.067,0.046,0.099  c4.562,9.552,10.305,18.431,17.036,26.452C160.418,322.725,160.426,322.735,160.435,322.745z"></path>
<path style="fill:#EF7A06;" d="M275.051,389.188h-4.826h-13.986h-4.211c-4.866-35.994-28.048-62.535-28.15-62.634  c-0.004-0.004-0.009-0.008-0.013-0.012c-0.757-0.701-1.505-1.413-2.244-2.133c-0.016-0.015-0.031-0.029-0.047-0.044  c-0.731-0.714-1.453-1.435-2.168-2.165c-0.02-0.022-0.041-0.042-0.061-0.064c-0.71-0.728-1.411-1.464-2.103-2.209  c-0.02-0.023-0.041-0.044-0.061-0.066c-0.693-0.746-1.375-1.5-2.049-2.265c-0.018-0.019-0.037-0.039-0.054-0.059  c-0.68-0.772-1.352-1.551-2.015-2.34c-0.009-0.01-0.017-0.019-0.025-0.029c-6.733-8.021-12.474-16.899-17.036-26.452  c-0.016-0.032-0.03-0.067-0.046-0.099c-0.428-0.9-0.847-1.805-1.254-2.716c-0.064-0.142-0.124-0.286-0.188-0.427  c-0.356-0.805-0.706-1.613-1.046-2.425c-0.089-0.215-0.176-0.432-0.264-0.649c-0.305-0.742-0.606-1.487-0.897-2.237  c-0.106-0.269-0.206-0.542-0.308-0.812c-0.266-0.7-0.529-1.403-0.784-2.111c-0.112-0.308-0.219-0.619-0.328-0.929  c-0.236-0.675-0.469-1.351-0.693-2.029c-0.113-0.338-0.222-0.68-0.331-1.02c-0.211-0.653-0.417-1.31-0.618-1.969  c-0.11-0.365-0.219-0.733-0.327-1.099c-0.186-0.639-0.37-1.278-0.548-1.921c-0.107-0.389-0.212-0.778-0.316-1.168  c-0.166-0.625-0.328-1.254-0.484-1.884c-0.101-0.406-0.202-0.815-0.299-1.223c-0.147-0.62-0.289-1.241-0.427-1.865  c-0.094-0.421-0.185-0.841-0.275-1.263c-0.129-0.615-0.253-1.234-0.373-1.854c-0.085-0.433-0.17-0.867-0.25-1.301  c-0.112-0.613-0.217-1.23-0.32-1.845c-0.074-0.443-0.151-0.886-0.22-1.33c-0.096-0.615-0.184-1.235-0.274-1.854  c-0.063-0.447-0.128-0.894-0.188-1.343c-0.081-0.623-0.153-1.249-0.225-1.876c-0.052-0.448-0.107-0.895-0.154-1.344  c-0.067-0.635-0.122-1.274-0.179-1.911c-0.04-0.444-0.084-0.886-0.119-1.332c-0.052-0.662-0.092-1.328-0.133-1.994  c-0.027-0.423-0.059-0.844-0.081-1.268c-0.039-0.735-0.063-1.472-0.088-2.211c-0.013-0.358-0.031-0.714-0.042-1.072  c-0.028-1.098-0.043-2.199-0.043-3.303c0-8.611,0.872-17.019,2.534-25.139c0.623-3.045,1.357-6.05,2.198-9.01  c0.561-1.973,1.168-3.927,1.822-5.858c12.001-35.464,39.519-63.774,74.471-76.855c-2.946-0.207-5.914-0.333-8.914-0.333  c-54.898,0-101.514,35.464-118.186,84.732c-0.653,1.932-1.261,3.885-1.822,5.858c-0.841,2.96-1.575,5.965-2.198,9.01  c-1.662,8.12-2.534,16.527-2.534,25.139c0,1.105,0.015,2.205,0.042,3.303c0.01,0.359,0.029,0.715,0.042,1.073  c0.025,0.738,0.05,1.476,0.087,2.211c0.023,0.424,0.054,0.845,0.081,1.268c0.041,0.665,0.081,1.331,0.133,1.994  c0.034,0.446,0.079,0.888,0.119,1.332c0.056,0.638,0.112,1.277,0.179,1.911c0.047,0.449,0.102,0.896,0.154,1.344  c0.072,0.626,0.144,1.253,0.225,1.876c0.059,0.449,0.125,0.896,0.188,1.343c0.088,0.619,0.177,1.237,0.273,1.854  c0.07,0.444,0.147,0.887,0.221,1.33c0.103,0.615,0.208,1.232,0.32,1.845c0.081,0.434,0.166,0.868,0.25,1.301  c0.12,0.619,0.244,1.237,0.373,1.854c0.089,0.423,0.181,0.842,0.275,1.263c0.138,0.623,0.28,1.244,0.427,1.865  c0.098,0.409,0.197,0.817,0.299,1.223c0.157,0.631,0.318,1.259,0.484,1.884c0.103,0.39,0.208,0.779,0.315,1.168  c0.178,0.642,0.36,1.282,0.548,1.921c0.108,0.366,0.217,0.734,0.327,1.099c0.2,0.66,0.406,1.316,0.618,1.969  c0.11,0.34,0.218,0.681,0.331,1.02c0.224,0.678,0.457,1.354,0.693,2.029c0.109,0.31,0.217,0.621,0.328,0.929  c0.253,0.707,0.516,1.411,0.784,2.111c0.102,0.269,0.203,0.542,0.308,0.812c0.291,0.749,0.592,1.495,0.897,2.237  c0.088,0.216,0.175,0.433,0.264,0.649c0.34,0.813,0.69,1.62,1.046,2.425c0.064,0.141,0.123,0.285,0.188,0.427  c0.406,0.911,0.826,1.816,1.254,2.716c0.016,0.032,0.03,0.067,0.046,0.099c4.562,9.552,10.305,18.431,17.036,26.452  c0.008,0.011,0.016,0.019,0.025,0.029c0.662,0.789,1.333,1.568,2.015,2.34c0.018,0.02,0.036,0.04,0.054,0.059  c0.674,0.764,1.357,1.518,2.049,2.265c0.022,0.022,0.041,0.044,0.061,0.066c0.692,0.744,1.393,1.481,2.103,2.209  c0.022,0.022,0.042,0.042,0.061,0.064c0.715,0.731,1.436,1.452,2.168,2.165c0.015,0.015,0.031,0.029,0.047,0.044  c0.739,0.72,1.488,1.431,2.244,2.133c0.003,0.004,0.009,0.008,0.013,0.012c0.103,0.1,27.597,26.64,32.462,62.634h4.211h9.674h4.825  h45.254h14.499h9.383h14.499h2.229c0.347-2.568,0.821-5.08,1.38-7.545h-34.61V389.188z"></path>
<g>
	<path style="fill:#231F20;" d="M387.541,261.042c0.053-0.365,0.105-0.732,0.152-1.093c0.071-0.541,0.135-1.083,0.198-1.627   l0.101-0.88c0.036-0.307,0.072-0.614,0.108-0.943c0.063-0.607,0.116-1.218,0.17-1.828l0.055-0.593   c0.031-0.343,0.064-0.688,0.087-1.009c0.046-0.583,0.083-1.17,0.12-1.756l0.05-0.788c0.02-0.313,0.042-0.624,0.059-0.943   c0.035-0.681,0.059-1.365,0.084-2.048l0.025-0.707c0.011-0.243,0.022-0.485,0.027-0.743c0.029-1.164,0.047-2.333,0.047-3.504   c0-9.001-0.909-18.004-2.7-26.757c-0.653-3.197-1.44-6.426-2.341-9.602c-0.592-2.084-1.244-4.182-1.94-6.24   c-18.262-53.966-68.835-90.225-125.844-90.225s-107.581,36.259-125.843,90.225c-0.695,2.052-1.348,4.152-1.941,6.241   c-0.896,3.155-1.684,6.384-2.341,9.598c-1.79,8.748-2.698,17.752-2.698,26.76c0,1.173,0.016,2.342,0.045,3.528   c0.006,0.25,0.017,0.5,0.028,0.749l0.02,0.529c0.025,0.736,0.051,1.47,0.088,2.201c0.017,0.32,0.038,0.64,0.059,0.959l0.031,0.474   c0.041,0.679,0.083,1.359,0.135,2.033c0.026,0.337,0.057,0.672,0.088,1.007l0.046,0.515c0.057,0.647,0.114,1.293,0.182,1.945   c0.037,0.344,0.077,0.687,0.116,1.029l0.068,0.583c0.069,0.603,0.139,1.203,0.219,1.812c0.045,0.34,0.093,0.679,0.141,1.018   l0.059,0.417c0.094,0.653,0.188,1.309,0.291,1.969c0.057,0.363,0.119,0.728,0.18,1.091l0.054,0.323   c0.11,0.652,0.221,1.305,0.344,1.976c0.075,0.407,0.155,0.813,0.234,1.219l0.029,0.149c0.128,0.66,0.26,1.322,0.399,1.982   c0.095,0.452,0.194,0.901,0.292,1.342c0.146,0.66,0.296,1.318,0.458,2.002c0.105,0.433,0.21,0.869,0.316,1.29   c0.167,0.673,0.34,1.343,0.513,1.996c0.11,0.416,0.222,0.829,0.34,1.257c0.188,0.681,0.383,1.36,0.584,2.052l0.345,1.159   c0.215,0.707,0.435,1.41,0.659,2.102l0.065,0.201c0.097,0.301,0.194,0.604,0.287,0.882c0.239,0.722,0.487,1.442,0.741,2.165   l0.347,0.983c0.271,0.756,0.552,1.507,0.838,2.258l0.328,0.861c0.31,0.799,0.631,1.594,0.952,2.376l0.286,0.698   c0.361,0.863,0.732,1.721,1.126,2.614l0.182,0.417c0.433,0.97,0.88,1.936,1.337,2.896l0.001,0.001   c0.018,0.039,0.038,0.081,0.051,0.108c4.818,10.088,10.92,19.564,18.139,28.164c0.011,0.014,0.023,0.027,0.033,0.041   c0.702,0.834,1.413,1.662,2.173,2.522c0.02,0.023,0.044,0.05,0.07,0.078c0.701,0.793,1.413,1.58,2.199,2.426   c0.714,0.766,1.435,1.526,2.228,2.339c0.025,0.026,0.051,0.053,0.075,0.079c0.759,0.776,1.524,1.541,2.325,2.322   c0.016,0.016,0.044,0.042,0.072,0.069c0.751,0.732,1.512,1.455,2.281,2.169c1.161,1.147,22.911,23.008,29.063,52.332   c-4.682,3.427-7.743,8.945-7.743,15.18c0,7.373,4.273,13.75,10.462,16.835v25.362v21.425c0,9.992,8.13,18.122,18.122,18.122h6.755   c-0.123,0.868-0.209,1.748-0.209,2.649c0,10.376,8.441,18.817,18.817,18.817h30.114c10.376,0,18.816-8.441,18.816-18.817   c0-0.901-0.085-1.782-0.209-2.649h6.753c9.993,0,18.123-8.129,18.123-18.122v-21.425v-25.361   c6.19-3.085,10.463-9.463,10.463-16.836c0-6.233-3.059-11.753-7.741-15.18c6.213-29.604,28.33-51.614,29.068-52.339   c0.781-0.723,1.551-1.457,2.315-2.199c0.001-0.002,0.002-0.003,0.004-0.005c0.019-0.018,0.037-0.035,0.055-0.053   c0.771-0.753,1.536-1.516,2.287-2.286c0.025-0.024,0.047-0.05,0.072-0.073c0.758-0.776,1.506-1.561,2.177-2.286   c0.023-0.023,0.107-0.112,0.128-0.136c0.721-0.777,1.43-1.561,2.133-2.355c0.042-0.046,0.082-0.091,0.114-0.127   c0.722-0.82,1.437-1.649,2.14-2.487v-0.001c0.016-0.018,0.031-0.038,0.048-0.057c7.209-8.593,13.303-18.059,18.114-28.136   c0.017-0.036,0.036-0.071,0.053-0.108c0.455-0.956,0.897-1.915,1.362-2.951l0.174-0.398c0.378-0.854,0.747-1.711,1.106-2.568   l0.289-0.707c0.322-0.787,0.642-1.577,0.947-2.362l0.326-0.858c0.288-0.751,0.568-1.507,0.838-2.256l0.352-1.001   c0.252-0.718,0.499-1.436,0.738-2.157l0.326-1c0.002-0.003,0.031-0.099,0.033-0.103c0.223-0.696,0.444-1.395,0.651-2.084   l0.35-1.177c0.201-0.682,0.395-1.365,0.583-2.047l0.341-1.258c0.174-0.661,0.345-1.325,0.511-1.992   c0.11-0.442,0.218-0.885,0.31-1.281c0.16-0.664,0.31-1.33,0.461-2.003c0.101-0.454,0.2-0.908,0.292-1.342   c0.14-0.66,0.271-1.323,0.403-1.998l0.262-1.373c0.12-0.654,0.234-1.312,0.342-1.961l0.036-0.207   c0.068-0.402,0.135-0.804,0.2-1.217c0.101-0.648,0.195-1.298,0.29-1.973L387.541,261.042z M306.188,404.818   c1.459,0,2.647,1.189,2.647,2.649c0,1.459-1.188,2.648-2.647,2.648h-11.101c-4.465,0-8.084,3.618-8.084,8.084   c0,4.466,3.62,8.084,8.084,8.084h3.285v15.295h-84.745v-15.295h53.708c4.466,0,8.084-3.618,8.084-8.084   c0-4.466-3.618-8.084-8.084-8.084h-61.522c-1.461,0-2.648-1.189-2.648-2.648c0-1.461,1.189-2.649,2.648-2.649H306.188z    M273.705,491.86c0,1.459-1.188,2.648-2.647,2.648h-30.114c-1.461,0-2.648-1.189-2.648-2.648c0-1.461,1.188-2.649,2.648-2.649   h30.114C272.518,489.211,273.705,490.4,273.705,491.86z M298.372,471.09c0,1.077-0.876,1.953-1.954,1.953h-25.36h-30.114h-25.365   c-1.077,0-1.953-0.876-1.953-1.953v-13.341h84.745v13.341H298.372z M372.615,245.67l-0.05,1.293   c-0.022,0.597-0.041,1.192-0.072,1.781l-0.099,1.562c-0.03,0.494-0.061,0.988-0.101,1.503c-0.02,0.261-0.044,0.52-0.07,0.78   l-0.059,0.649c-0.046,0.536-0.095,1.073-0.148,1.586l-0.188,1.638c-0.054,0.459-0.107,0.916-0.167,1.379l-0.176,1.262   c-0.083,0.58-0.166,1.159-0.254,1.727c-0.055,0.344-0.112,0.689-0.17,1.032l-0.038,0.222c-0.096,0.575-0.195,1.149-0.299,1.718   l-0.234,1.219c-0.112,0.574-0.225,1.15-0.35,1.742c-0.081,0.389-0.167,0.776-0.252,1.16c-0.129,0.578-0.258,1.153-0.409,1.779   c-0.087,0.373-0.179,0.746-0.271,1.117c-0.15,0.595-0.301,1.188-0.446,1.741l-0.303,1.117c-0.165,0.599-0.337,1.196-0.506,1.773   l-0.314,1.054c-0.188,0.618-0.382,1.231-0.603,1.923l-0.279,0.856c-0.211,0.635-0.429,1.269-0.653,1.912l-0.301,0.856   c-0.237,0.654-0.478,1.306-0.734,1.973l-0.288,0.758c-0.274,0.703-0.556,1.404-0.829,2.072l-0.254,0.624   c-0.32,0.763-0.649,1.521-0.945,2.197l-0.205,0.467c-0.383,0.855-0.777,1.704-1.179,2.549h0.001   c-0.015,0.03-0.029,0.06-0.043,0.091c-4.23,8.858-9.591,17.181-15.932,24.737c-0.018,0.022-0.036,0.042-0.053,0.064   c-0.604,0.719-1.217,1.428-1.798,2.091c-0.038,0.04-0.074,0.081-0.112,0.122c-0.63,0.714-1.265,1.416-1.846,2.044   c-0.022,0.023-0.106,0.112-0.126,0.135c-0.647,0.695-1.301,1.383-1.964,2.062c-0.004,0.004-0.009,0.01-0.013,0.014   c-0.019,0.019-0.038,0.039-0.057,0.058c-0.663,0.68-1.337,1.351-2.017,2.016c-0.014,0.014-0.027,0.027-0.042,0.04   c-0.691,0.673-1.389,1.338-2.098,1.993c-0.058,0.054-0.114,0.108-0.169,0.162c-1.68,1.623-26.301,25.905-33.609,60.335h-15.079   V271.835c0-3.896,3.169-7.066,7.065-7.066c3.897,0,7.067,3.169,7.067,7.066c0,3.04-1.934,5.731-4.812,6.699   c-4.232,1.422-6.509,6.006-5.088,10.238c1.422,4.233,6.003,6.512,10.239,5.089c9.467-3.181,15.829-12.033,15.829-22.026   c0-12.812-10.423-23.234-23.235-23.234c-12.811,0-23.233,10.422-23.233,23.234v116.815h-28.493V271.835   c0-12.812-10.422-23.234-23.233-23.234s-23.234,10.422-23.234,23.234c0,10.172,6.51,19.071,16.2,22.146   c4.253,1.355,8.801-1.005,10.151-5.26c1.351-4.256-1.006-8.8-5.26-10.151c-2.944-0.935-4.922-3.641-4.922-6.736   c0-3.896,3.169-7.066,7.066-7.066c3.896,0,7.065,3.169,7.065,7.066v116.815h-15.082c-7.38-34.619-32.495-59.26-33.63-60.359   c-0.046-0.045-0.094-0.089-0.141-0.134l0,0c-0.707-0.654-1.407-1.32-2.097-1.993c-0.025-0.025-0.056-0.054-0.085-0.081   c-0.672-0.655-1.334-1.319-1.991-1.99c-0.024-0.025-0.045-0.047-0.057-0.059c-0.665-0.68-1.32-1.37-1.962-2.06   c-0.015-0.017-0.04-0.043-0.065-0.07c-0.645-0.694-1.281-1.397-1.908-2.108c-0.037-0.041-0.073-0.081-0.11-0.122   c-0.619-0.702-1.23-1.413-1.831-2.13c-0.003-0.004-0.008-0.009-0.011-0.013c-0.004-0.005-0.009-0.01-0.013-0.015   c-6.324-7.536-11.673-15.833-15.914-24.699c-0.018-0.04-0.04-0.084-0.061-0.129c-0.4-0.84-0.791-1.685-1.187-2.571l-0.158-0.364   c-0.334-0.755-0.662-1.511-0.978-2.267l-0.25-0.614c-0.285-0.693-0.565-1.387-0.844-2.103l-0.282-0.744   c-0.248-0.651-0.493-1.306-0.737-1.987l-0.3-0.852c-0.221-0.63-0.439-1.261-0.655-1.914l-0.306-0.945   c-0.196-0.608-0.388-1.217-0.572-1.827l-0.305-1.026c-0.176-0.6-0.348-1.201-0.511-1.79l-0.299-1.107   c-0.155-0.583-0.305-1.17-0.454-1.768c-0.095-0.38-0.189-0.763-0.274-1.119c-0.137-0.583-0.271-1.167-0.403-1.763   c-0.087-0.391-0.172-0.783-0.254-1.171c-0.121-0.575-0.236-1.151-0.35-1.741l-0.032-0.163c-0.069-0.352-0.138-0.705-0.199-1.04   c-0.106-0.577-0.204-1.156-0.3-1.728l-0.207-1.245c-0.091-0.58-0.174-1.163-0.254-1.727l-0.177-1.264   c-0.069-0.524-0.129-1.051-0.19-1.578l-0.165-1.439c-0.058-0.558-0.108-1.118-0.157-1.678c0-0.001-0.01-0.108-0.01-0.109   l-0.043-0.475c-0.024-0.255-0.047-0.512-0.068-0.77c-0.046-0.585-0.081-1.174-0.116-1.761c0-0.008-0.006-0.111-0.008-0.117   l-0.031-0.47c-0.016-0.236-0.032-0.471-0.044-0.707c-0.033-0.635-0.055-1.272-0.077-1.909l-0.045-1.157   c-0.027-1.029-0.04-2.062-0.04-3.098c0-7.923,0.798-15.834,2.369-23.518c0.578-2.821,1.269-5.655,2.054-8.422   c0.521-1.832,1.094-3.675,1.703-5.476c16.039-47.396,60.457-79.24,110.529-79.24c50.071,0,94.489,31.844,110.528,79.238   c0.61,1.805,1.185,3.649,1.702,5.474c0.79,2.786,1.482,5.62,2.054,8.426c1.574,7.691,2.371,15.604,2.371,23.518   C372.656,243.618,372.64,244.651,372.615,245.67z"></path>
	<path style="fill:#231F20;" d="M259.551,278.937h-7.103c-4.465,0-8.084,3.618-8.084,8.084c0,4.466,3.62,8.084,8.084,8.084h7.103   c4.465,0,8.084-3.618,8.084-8.084C267.635,282.557,264.015,278.937,259.551,278.937z"></path>
	<path style="fill:#231F20;" d="M58.746,249.236H8.084C3.62,249.236,0,252.854,0,257.32c0,4.466,3.62,8.084,8.084,8.084h50.662   c4.465,0,8.084-3.618,8.084-8.084C66.831,252.854,63.211,249.236,58.746,249.236z"></path>
	<path style="fill:#231F20;" d="M503.916,249.236h-50.662c-4.465,0-8.084,3.618-8.084,8.084c0,4.466,3.62,8.084,8.084,8.084h50.662   c4.466,0,8.084-3.618,8.084-8.084C512,252.854,508.382,249.236,503.916,249.236z"></path>
	<path style="fill:#231F20;" d="M110.804,391.082l-35.824,35.823c-3.157,3.158-3.157,8.276,0,11.433   c1.578,1.578,3.648,2.367,5.716,2.367c2.068,0,4.138-0.789,5.716-2.367l35.824-35.823c3.157-3.158,3.157-8.276,0-11.433   C119.08,387.926,113.961,387.926,110.804,391.082z"></path>
	<path style="fill:#231F20;" d="M425.587,76.299l-35.824,35.824c-3.157,3.158-3.157,8.276,0,11.433   c1.578,1.578,3.648,2.367,5.717,2.367c2.068,0,4.137-0.789,5.716-2.367l35.823-35.824c3.158-3.158,3.158-8.276,0-11.433   C433.863,73.143,428.743,73.143,425.587,76.299z"></path>
	<path style="fill:#231F20;" d="M256,68.15c4.466,0,8.084-3.618,8.084-8.084V9.404c0-4.466-3.618-8.084-8.084-8.084   c-4.465,0-8.084,3.618-8.084,8.084v50.663C247.916,64.532,251.535,68.15,256,68.15z"></path>
	<path style="fill:#231F20;" d="M401.196,391.082c-3.156-3.156-8.276-3.156-11.431,0c-3.158,3.158-3.158,8.276,0,11.433   l35.823,35.823c1.578,1.578,3.647,2.367,5.716,2.367s4.138-0.789,5.716-2.367c3.158-3.158,3.158-8.276,0-11.433L401.196,391.082z"></path>
	<path style="fill:#231F20;" d="M110.805,123.557c1.578,1.578,3.648,2.367,5.716,2.367s4.138-0.789,5.716-2.368   c3.157-3.157,3.157-8.276,0-11.433L86.413,76.3c-3.157-3.156-8.276-3.157-11.432,0.001c-3.157,3.157-3.157,8.276,0,11.433   L110.805,123.557z"></path>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
</svg><style>@media (prefers-color-scheme: light) { :root { filter: none; } }
@media (prefers-color-scheme: dark) { :root { filter: contrast(0.3846153846153846) brightness(4.5); } }
</style></svg>
</file>

<file path="web-stepik/public/site.webmanifest">
{
  "name": "MyWebSite",
  "short_name": "MySite",
  "icons": [
    {
      "src": "/web-app-manifest-192x192.png",
      "sizes": "192x192",
      "type": "image/png",
      "purpose": "maskable"
    },
    {
      "src": "/web-app-manifest-512x512.png",
      "sizes": "512x512",
      "type": "image/png",
      "purpose": "maskable"
    }
  ],
  "theme_color": "#ffffff",
  "background_color": "#ffffff",
  "display": "standalone"
}
</file>

<file path="web-stepik/README.md">
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
```
</file>

<file path="web-stepik/src/assets/AkarAir.tsx">
import { SVGProps } from "react";

export default function AkarIconsAir(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="1em"
      height="1em"
      viewBox="0 0 24 24"
      {...props}
    >
      {/* Icon from Akar Icons by Arturo Wibawa - https://github.com/artcoholic/akar-icons/blob/master/LICENSE */}
      <path
        fill="none"
        stroke="currentColor"
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth="2"
        d="M3 8h7a3 3 0 1 0-3-3M4 16h11a3 3 0 1 1-3 3M2 12h17a3 3 0 1 0-3-3"
      ></path>
    </svg>
  );
}
</file>

<file path="web-stepik/src/assets/capy.svg">
<?xml version="1.0" encoding="utf-8" ?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="320" height="320">
	<path fill="#8DC7FA" d="M0 0L320 0L320 60.0059L320 90.1971L320 100.13L320 120.195L320 140.03L320 150.007L320 160.062L320 190.284L320 200.064L320 220.157L320 229.988L320 240.119L320 250.086L320 270.236L320 290.006L320 300.277L320 320L300.325 320L30.2844 320L0 320L0 300.194L0 290.278L0 280.139L0 260.059L0 250.239L0 230.085L0 190.049L0 180.046L0 150.031L0 120.087L0 109.997L0 100.09L0 60.171L0 50.2462L0 40.0741L0 0Z"/>
	<path fill="#2B6E34" d="M250.28 269.925C250.841 273.505 250.802 286.102 250.414 289.747L249.949 290.279C243.344 290.388 236.756 290.5 230.151 290.294C230.275 293.689 230.349 297.063 230.298 300.461C223.84 300.567 217.405 300.517 210.948 300.493C207.426 300.48 203.628 300.723 200.139 300.281L199.824 289.998C196.758 290.266 193.616 290.075 190.54 290.017C190.414 289.886 190.229 289.792 190.161 289.623C189.935 289.067 190.182 281.406 190.18 280.18C196.754 280.137 203.339 279.772 209.911 280C209.695 277.121 210.066 274.222 209.979 271.336L210.295 270.61C211.94 269.957 217.676 270.539 220.042 270.267C230.124 270.105 240.202 270.326 250.28 269.925Z"/>
	<path fill="#4FA5F7" d="M0 0L320 0L320 60.0059L320 90.1971L320 100.13L320 120.195L320 140.03L320 150.007L320 160.062C316.712 160.172 313.371 160.053 310.079 160.041C306.221 160.324 302.299 160.122 298.435 160.089C295.69 160.066 292.896 160.236 290.159 160.063L288.564 160.034C282.604 159.818 276.553 159.92 270.59 160.058C267.173 160.138 263.514 160.506 260.127 160.124L250.457 160.165L250.221 160.199C249.992 163.412 249.984 166.8 250.186 170.016C246.901 170.051 243.554 169.952 240.279 170.174C240.041 171.988 240.129 173.842 240.142 175.669L240.052 180.118L230.435 180.157L230.272 180.071C230.136 177.316 229.653 173.856 230.097 171.151C230.199 170.533 230.191 170.535 230.71 170.169C229.752 168.852 230.191 161.944 230.201 159.994L219.981 160.036L220.014 169.961L210.21 169.986C205.01 169.973 199.373 169.561 194.233 170.205L161.713 170.222C154.537 170.225 147.22 170.409 140.063 169.902C137.21 169.311 133.357 169.751 130.442 169.976C130.607 166.694 130.541 163.396 130.534 160.11C127.088 159.859 123.625 160.23 120.185 160.005C118.555 160.044 116.819 159.963 115.211 160.216C113.502 160.208 111.801 160.187 110.094 160.102C110.121 156.844 110.333 153.472 110.048 150.228C113.287 150.177 116.546 150.198 119.778 149.986C120.153 149.51 120.051 149.21 120.056 148.615C119.728 142.513 119.989 136.324 119.947 130.209L75.3012 130.276C66.8818 130.287 58.4121 130.464 49.9995 130.211C49.9978 133.461 49.9246 136.727 50.0257 139.975C36.7099 140.569 23.3322 140.084 10.0075 139.992Q10.0095 144.888 9.95479 149.784C6.65133 150.059 3.31327 150.005 0 150.031L0 120.087L0 109.997L0 100.09L0 60.171L0 50.2462L0 40.0741L0 0Z"/>
	<path fill="#1388ED" d="M0 0L320 0L320 60.0059L280 60.0415Q280.041 55.1356 280.012 50.2296C290.055 50.4997 300.164 50.1671 310.21 49.9959L310.159 40.0106C293.682 40.4183 277.107 40.0398 260.617 40.0405C254.315 40.0408 246.199 39.575 240.056 40.1741C240.133 36.8637 240.019 33.5359 239.978 30.2245L80.0311 30.2181L80.034 40.0703C103.387 39.7596 126.767 40.1127 150.123 40.0166C150.252 43.3295 150.232 46.6571 150.272 49.9726Q100.182 50.3624 50.0904 49.9861C50.1916 46.6597 50.0539 43.3188 50.0997 39.989C33.4061 40.2792 16.696 39.8686 0 40.0741L0 0Z"/>
	<path fill="#A46C3D" d="M120.105 90.3246C124.166 89.7465 132.236 89.9902 136.61 90.0692C137.758 90.2814 138.849 90.2995 140.014 90.2899C139.986 91.9249 139.613 99.0852 140.287 99.9524C140.32 99.995 140.368 100.023 140.409 100.058C139.608 101.148 140.026 108.218 140.022 109.972C160.028 110.075 180.028 110.478 200.036 110.027L200.011 119.993C203.316 119.982 206.622 119.996 209.926 119.948C210.087 136.61 209.721 153.337 210.21 169.986C205.01 169.973 199.373 169.561 194.233 170.205L161.713 170.222C154.537 170.225 147.22 170.409 140.063 169.902C137.21 169.311 133.357 169.751 130.442 169.976C130.607 166.694 130.541 163.396 130.534 160.11C127.088 159.859 123.625 160.23 120.185 160.005C118.555 160.044 116.819 159.963 115.211 160.216C113.502 160.208 111.801 160.187 110.094 160.102C110.121 156.844 110.333 153.472 110.048 150.228C113.287 150.177 116.546 150.198 119.778 149.986C120.153 149.51 120.051 149.21 120.056 148.615C120.325 145.769 120.213 142.8 120.21 139.94C120.203 133.378 119.977 126.798 120.186 120.24Q115.188 120.122 110.19 120.054Q110.015 105.054 110.167 90.0532C113.391 90.3784 116.655 89.9726 119.894 90.208L120.105 90.3246Z"/>
	<path fill="#082232" d="M110.167 90.0532C113.391 90.3784 116.655 89.9726 119.894 90.208L120.105 90.3246C120.45 93.6973 120.121 97.2822 120.113 100.688L120.222 120.149Q125.187 120.138 130.15 120.001C129.93 123.69 130.164 127.429 130.187 131.124Q130.234 140.677 130.027 150.227C126.759 150.042 123.51 150.091 120.241 150.143C120.211 153.418 120.07 156.735 120.185 160.005C118.555 160.044 116.819 159.963 115.211 160.216C113.502 160.208 111.801 160.187 110.094 160.102C110.121 156.844 110.333 153.472 110.048 150.228C113.287 150.177 116.546 150.198 119.778 149.986C120.153 149.51 120.051 149.21 120.056 148.615C120.325 145.769 120.213 142.8 120.21 139.94C120.203 133.378 119.977 126.798 120.186 120.24Q115.188 120.122 110.19 120.054Q110.015 105.054 110.167 90.0532Z"/>
	<path fill="#082232" d="M150.154 120.006C153.516 120.556 158.508 120.115 162.003 120.112L190.232 120.044Q190.256 125.034 190.418 130.022C185.241 130.289 180.052 130.121 174.87 130.121L150.104 130.182C150.36 126.86 150.157 123.348 150.154 120.006Z"/>
	<path fill="#B78041" d="M140.057 140.014L159.964 140.214C159.866 146.794 159.985 153.386 160.019 159.966L140.029 159.999C139.885 153.35 139.996 146.664 140.057 140.014Z"/>
	<path fill="#B78041" d="M177.045 150.111C181.46 149.887 185.907 150.356 190.305 150.005Q190.153 154.99 190.212 159.976C188.102 159.941 185.986 159.975 183.875 159.976L169.884 159.986L170.054 150.359C172.374 150.209 174.72 150.215 177.045 150.111Z"/>
	<path fill="#CCD1D4" d="M9.97772 60.0544L11.5866 60.059Q25.8985 59.9582 40.21 60.0952Q40.1017 65.1508 40.2578 70.2051L50.1339 69.9867C50.232 75.7567 50.6742 84.4711 50.0177 89.9965C53.38 90.319 56.8246 90.0921 60.1979 90.0118L60.1955 94.8672C60.2159 96.5935 60.2321 98.3137 60.1689 100.04C66.7591 100.133 73.4642 100.271 80.0473 100.002Q79.9792 105.042 80.2043 110.077C70.1231 109.793 60.0445 110.231 49.9678 110.251L50.1615 120.087C47.7631 119.851 45.23 120 42.8199 120.006L30.0651 120.047C27.0688 120.268 24.0043 120.023 21.0009 119.96Q15.572 119.874 10.1448 120.037C6.78229 119.861 3.37436 120.163 0 120.087L0 109.997L0 100.09L0 60.171Q4.98952 60.1708 9.97772 60.0544Z"/>
	<path fill="#FDFDFC" d="M11.5866 60.059Q25.8985 59.9582 40.21 60.0952Q40.1017 65.1508 40.2578 70.2051L50.1339 69.9867C50.232 75.7567 50.6742 84.4711 50.0177 89.9965C53.38 90.319 56.8246 90.0921 60.1979 90.0118L60.1955 94.8672C59.8971 96.5394 59.9873 98.3162 59.969 100.012C53.3292 99.9539 46.6473 100.494 40.0155 100.017C40.0596 96.6909 40.0164 93.358 40.015 90.0314C33.3641 90.2971 26.6506 90.07 19.9951 89.9726L20.0619 80.0075Q15.1486 80.1311 10.2345 80.0452Q10.299 70.3335 10.1224 60.6232C10.4758 60.1998 11.0563 60.1829 11.5866 60.059Z"/>
	<path fill="#98A5AF" d="M0 100.09Q10.086 100.042 20.1702 100.241Q20.0196 105.144 20.0682 110.05C23.4147 110.268 26.8972 110.262 30.2468 110.1C30.2468 113.394 30.396 116.769 30.0651 120.047C27.0688 120.268 24.0043 120.023 21.0009 119.96Q15.572 119.874 10.1448 120.037C6.78229 119.861 3.37436 120.163 0 120.087L0 109.997L0 100.09Z"/>
	<path fill="#CCD1D4" d="M0 109.997Q5.02069 109.999 10.0345 110.262C10.0857 113.517 10.1915 116.782 10.1448 120.037C6.78229 119.861 3.37436 120.163 0 120.087L0 109.997Z"/>
	<path fill="#B78041" d="M140.409 100.058C144.85 99.9443 149.305 100.08 153.748 100.127C155.759 100.148 158.095 100.36 160.069 100.061C180.064 100.709 200.141 99.6502 220.139 100.227C220.201 103.45 220.376 106.804 220.093 110.011C226.716 110.394 233.347 109.892 239.964 110.191L240.166 110.329L240.226 120.189Q245.199 120.227 250.171 120.115C249.888 127.11 250.58 134.158 250.197 141.137C250.216 143.782 249.798 158.935 250.457 160.165L250.221 160.199C249.992 163.412 249.984 166.8 250.186 170.016C246.901 170.051 243.554 169.952 240.279 170.174C240.041 171.988 240.129 173.842 240.142 175.669L240.052 180.118L230.435 180.157L230.272 180.071C230.136 177.316 229.653 173.856 230.097 171.151C230.199 170.533 230.191 170.535 230.71 170.169C229.752 168.852 230.191 161.944 230.201 159.994L219.981 160.036L220.014 169.961L210.21 169.986C209.721 153.337 210.087 136.61 209.926 119.948C206.622 119.996 203.316 119.982 200.011 119.993L200.036 110.027C180.028 110.478 160.028 110.075 140.022 109.972C140.026 108.218 139.608 101.148 140.409 100.058Z"/>
	<path fill="#8D5D3C" d="M239.964 110.191L240.166 110.329L240.226 120.189Q245.199 120.227 250.171 120.115C249.888 127.11 250.58 134.158 250.197 141.137C250.216 143.782 249.798 158.935 250.457 160.165L250.221 160.199C249.992 163.412 249.984 166.8 250.186 170.016C246.901 170.051 243.554 169.952 240.279 170.174C240.041 171.988 240.129 173.842 240.142 175.669L240.052 180.118L230.435 180.157L230.272 180.071C230.136 177.316 229.653 173.856 230.097 171.151C230.199 170.533 230.191 170.535 230.71 170.169C229.752 168.852 230.191 161.944 230.201 159.994C229.83 156.362 230.133 152.424 230.145 148.761C230.167 142.537 230.082 136.332 230 130.11Q224.977 130.027 219.963 129.726C220.037 126.492 219.986 123.241 219.993 120.006L239.957 120.042L239.964 110.191Z"/>
	<path fill="#B78041" d="M240.036 130.262C243.358 130.103 246.599 130.127 249.924 130.284C249.924 133.774 249.585 137.732 250.197 141.137C250.216 143.782 249.798 158.935 250.457 160.165L250.221 160.199C249.992 163.412 249.984 166.8 250.186 170.016C246.901 170.051 243.554 169.952 240.279 170.174C240.041 171.988 240.129 173.842 240.142 175.669L240.052 180.118L230.435 180.157L230.272 180.071C230.136 177.316 229.653 173.856 230.097 171.151C230.199 170.533 230.191 170.535 230.71 170.169C229.752 168.852 230.191 161.944 230.201 159.994C233.482 160.061 236.767 160.047 240.049 160.066C239.937 150.137 240.054 140.193 240.036 130.262Z"/>
	<defs>
		<linearGradient id="gradient_0" gradientUnits="userSpaceOnUse" x1="240.53862" y1="160.70979" x2="249.34142" y2="169.1651">
			<stop offset="0" stop-color="#1B201E"/>
			<stop offset="1" stop-color="#00243D"/>
		</linearGradient>
	</defs>
	<path fill="url(#gradient_0)" d="M240.193 160.1C243.399 160.335 247.124 159.431 250.221 160.199C249.992 163.412 249.984 166.8 250.186 170.016C246.901 170.051 243.554 169.952 240.279 170.174C239.663 169.131 240.159 161.935 240.193 160.1Z"/>
	<path fill="#082232" d="M230.71 170.169C233.844 170.318 236.976 170.164 240.11 170.178C240.108 172.007 240.079 173.841 240.142 175.669L240.052 180.118L230.435 180.157L230.272 180.071C230.136 177.316 229.653 173.856 230.097 171.151C230.199 170.533 230.191 170.535 230.71 170.169Z"/>
	<path fill="#CCD1D4" d="M290.004 99.9641Q294.983 100.059 299.962 100.074C306.632 100.083 313.334 99.9608 320 100.13L320 120.195L320 140.03L320 150.007L320 160.062C316.712 160.172 313.371 160.053 310.079 160.041C306.221 160.324 302.299 160.122 298.435 160.089C295.69 160.066 292.896 160.236 290.159 160.063L288.564 160.034C282.604 159.818 276.553 159.92 270.59 160.058C267.173 160.138 263.514 160.506 260.127 160.124C260.011 158.319 260.109 156.442 260.109 154.63C260.299 153.217 260.301 151.737 260.353 150.311C263.638 150.74 266.864 149.315 269.998 150.027C270.113 146.694 270.075 143.367 270.017 140.033L280.054 140.031C279.699 135.944 279.964 131.532 280.043 127.416L279.987 120.06Q285.076 120.075 290.164 120.186C289.853 113.492 290.068 106.672 290.004 99.9641Z"/>
	<path fill="#FDFDFC" d="M290.004 99.9641Q294.983 100.059 299.962 100.074C306.632 100.083 313.334 99.9608 320 100.13L320 120.195C313.495 120.221 306.692 120.626 300.227 119.984C300.129 123.303 299.964 126.636 300.026 129.956C296.701 130.03 293.323 130.288 290.004 130.245Q290.026 135.122 289.954 139.998C286.717 140.032 283.475 140.109 280.239 140.075C280.234 135.898 280.429 131.571 280.043 127.416L279.987 120.06Q285.076 120.075 290.164 120.186C289.853 113.492 290.068 106.672 290.004 99.9641Z"/>
	<path fill="#98A5AF" d="M320 140.03L320 150.007L320 160.062C316.712 160.172 313.371 160.053 310.079 160.041C306.221 160.324 302.299 160.122 298.435 160.089C295.69 160.066 292.896 160.236 290.159 160.063C289.962 156.801 290.025 153.499 289.989 150.23C293.339 150.17 296.685 150.083 300.033 150.23L300.021 140.017C306.618 140.404 313.386 140.073 320 140.03Z"/>
	<path fill="#CCD1D4" d="M310.251 150.194C313.5 149.959 316.745 150 320 150.007L320 160.062C316.712 160.172 313.371 160.053 310.079 160.041C310.063 156.753 310.04 153.478 310.251 150.194Z"/>
	<path fill="#FDFDFC" d="M280.054 140.031C280.517 143.103 280.095 146.866 280.04 149.989C276.757 150.026 273.258 150.301 269.998 150.027C270.113 146.694 270.075 143.367 270.017 140.033L280.054 140.031Z"/>
	<path fill="#082232" d="M160.163 90.1098C172.382 90.548 184.717 90.2211 196.948 90.2175L211.532 90.2044C214.338 90.1923 217.292 90.3064 220.081 90.0099Q220.032 95.041 220.18 100.07C226.812 100.191 233.502 100.221 240.133 100.05C240.122 102.053 239.652 108.883 240.391 110.215C243.6 110.027 246.802 110.167 250.011 110.085Q250.094 115.098 250.233 120.11C253.481 120.124 256.771 120.25 260.013 120.065C260.047 123.271 259.909 126.613 260.139 129.805C263.373 129.814 266.883 130.235 270.08 129.817C270.005 133.209 270.217 136.652 270.017 140.033C270.075 143.367 270.113 146.694 269.998 150.027C266.864 149.315 263.638 150.74 260.353 150.311C260.301 151.737 260.299 153.217 260.109 154.63C260.109 156.442 260.011 158.319 260.127 160.124L250.457 160.165C249.798 158.935 250.216 143.782 250.197 141.137C250.58 134.158 249.888 127.11 250.171 120.115Q245.199 120.227 240.226 120.189L240.166 110.329L239.964 110.191C233.347 109.892 226.716 110.394 220.093 110.011C220.376 106.804 220.201 103.45 220.139 100.227C200.141 99.6502 180.064 100.709 160.069 100.061C160.24 96.8099 160.081 93.4667 160.058 90.2053L160.163 90.1098Z"/>
	<path fill="#8DC7FA" d="M260.139 129.805C263.373 129.814 266.883 130.235 270.08 129.817C270.005 133.209 270.217 136.652 270.017 140.033C270.075 143.367 270.113 146.694 269.998 150.027C266.864 149.315 263.638 150.74 260.353 150.311C260.301 151.737 260.299 153.217 260.109 154.63Q259.991 142.217 260.139 129.805Z"/>
	<path fill="#082232" d="M120.175 80.0898C125.216 80.5048 130.562 80.1712 135.628 80.1724C143.799 80.1743 152.017 80.335 160.183 80.0805Q160.102 85.095 160.163 90.1098L160.058 90.2053C160.081 93.4667 160.24 96.8099 160.069 100.061C158.095 100.36 155.759 100.148 153.748 100.127C149.305 100.08 144.85 99.9443 140.409 100.058C140.368 100.023 140.32 99.995 140.287 99.9524C139.613 99.0852 139.986 91.9249 140.014 90.2899C138.849 90.2995 137.758 90.2814 136.61 90.0692C132.236 89.9902 124.166 89.7465 120.105 90.3246L119.894 90.208C120.418 89.5133 120.175 81.4869 120.175 80.0898Z"/>
	<path fill="#764E39" d="M136.61 90.0692C144.345 89.965 152.35 89.6811 160.058 90.2053C160.081 93.4667 160.24 96.8099 160.069 100.061C158.095 100.36 155.759 100.148 153.748 100.127C149.305 100.08 144.85 99.9443 140.409 100.058C140.368 100.023 140.32 99.995 140.287 99.9524C139.613 99.0852 139.986 91.9249 140.014 90.2899C138.849 90.2995 137.758 90.2814 136.61 90.0692Z"/>
	<path fill="#98A5AF" d="M49.9678 110.251C60.0445 110.231 70.1231 109.793 80.2043 110.077C83.4276 110.412 86.7214 110.167 89.9644 110.263C89.9941 113.59 90.071 116.925 90.0141 120.252C85.4014 120.41 80.6651 119.895 76.0317 119.833Q63.0945 119.742 50.1615 120.087L49.9678 110.251Z"/>
	<path fill="#1388ED" d="M300.011 89.9877Q310.004 90.249 320 90.1971L320 100.13C313.334 99.9608 306.632 100.083 299.962 100.074C300.083 96.7267 299.998 93.3394 300.011 89.9877Z"/>
	<path fill="#CCD1D4" d="M89.9644 110.263Q95.1217 110.199 100.274 109.963C100.206 113.295 99.9779 116.737 100.202 120.058C96.8065 119.971 93.4077 120.135 90.0141 120.252C90.071 116.925 89.9941 113.59 89.9644 110.263Z"/>
	<path fill="#1388ED" d="M0 50.2462Q5.07843 50.2287 10.1567 50.2636Q9.94297 55.1567 9.97772 60.0544Q4.98952 60.1708 0 60.171L0 50.2462Z"/>
	<path fill="#8DC7FA" d="M250.457 160.165L260.127 160.124C263.514 160.506 267.173 160.138 270.59 160.058C276.553 159.92 282.604 159.818 288.564 160.034L290.159 160.063C292.896 160.236 295.69 160.066 298.435 160.089C302.299 160.122 306.221 160.324 310.079 160.041C313.371 160.053 316.712 160.172 320 160.062L320 190.284L320 200.064L320 220.157L320 229.988L320 240.119L320 250.086L320 270.236L320 290.006C316.583 289.981 313.129 290.39 309.73 290.28L283.687 290.296C279.413 290.3 274.531 289.823 270.365 290.622Q270.261 295.418 270.291 300.216C268.067 300.205 261.747 300.839 260.066 299.957C260.087 298.153 260.019 296.338 259.987 294.533C259.684 293.248 259.729 291.809 259.667 290.49C256.467 290.116 253.164 290.203 249.949 290.279L250.414 289.747C250.802 286.102 250.841 273.505 250.28 269.925C240.202 270.326 230.124 270.105 220.042 270.267C217.676 270.539 211.94 269.957 210.295 270.61L209.979 271.336L209.871 270.061C208.416 269.99 201.449 270.463 200.649 270.135C200.462 270.058 200.331 269.885 200.172 269.759C200.319 257.876 200.225 245.978 200.213 234.093Q200.289 221.74 200.201 209.388C200.541 199.633 199.692 189.837 200.116 180.084C199.892 176.859 200.054 173.486 200.06 170.251Q197.146 170.292 194.233 170.205C199.373 169.561 205.01 169.973 210.21 169.986L220.014 169.961L219.981 160.036L230.201 159.994C230.191 161.944 229.752 168.852 230.71 170.169C230.191 170.535 230.199 170.533 230.097 171.151C229.653 173.856 230.136 177.316 230.272 180.071L230.435 180.157L240.052 180.118L240.142 175.669C240.129 173.842 240.041 171.988 240.279 170.174C243.554 169.952 246.901 170.051 250.186 170.016C249.984 166.8 249.992 163.412 250.221 160.199L250.457 160.165Z"/>
	<path fill="#265A43" d="M290.18 230.07C293.256 230.22 296.863 229.648 299.833 230.182C300.118 230.721 300.087 231.092 300.047 231.691C300.276 234.445 300.222 237.237 300.245 240.001L303.402 240.031L303.471 240.221L320 240.119L320 250.086L320 270.236L320 290.006C316.583 289.981 313.129 290.39 309.73 290.28L283.687 290.296C279.413 290.3 274.531 289.823 270.365 290.622Q270.261 295.418 270.291 300.216C268.067 300.205 261.747 300.839 260.066 299.957C260.087 298.153 260.019 296.338 259.987 294.533C259.684 293.248 259.729 291.809 259.667 290.49C256.467 290.116 253.164 290.203 249.949 290.279L250.414 289.747C250.802 286.102 250.841 273.505 250.28 269.925Q250.163 265.118 250.179 260.31C250.541 254.012 249.542 246.576 250.364 240.516C250.982 240.098 251.856 240.203 252.581 240.188Q256.351 240.24 260.117 240.057Q260.184 235.056 260.038 230.056C263.27 230.3 266.545 229.839 269.763 230.198C270.211 230.843 270.07 231.668 270.049 232.423C270.173 234.463 269.463 238.339 270.719 239.881C271.377 240.195 272.061 240.175 272.776 240.21C273.821 240.206 274.896 240.147 275.937 240.205C277.286 240.04 278.718 240.09 280.079 240.051C280.179 236.791 279.785 233.405 280.243 230.176C283.549 230.172 286.878 230.247 290.18 230.07Z"/>
	<path fill="#082232" d="M320 240.119L320 250.086L320 270.236L320 290.006C316.583 289.981 313.129 290.39 309.73 290.28C310.737 289.038 310.247 282.014 310.213 280.07C307.086 280.025 302.992 280.57 300.02 280.016L300.01 265.986C300.011 263.016 299.816 259.924 300.217 256.981L300.256 240.16C301.326 240.198 302.4 240.202 303.471 240.221L320 240.119Z"/>
	<path fill="#265A43" d="M300.217 256.981L300.247 260.008Q305.133 260.061 310.02 260.047Q310.028 265.006 309.98 269.964Q314.984 270.327 320 270.236L320 290.006C316.583 289.981 313.129 290.39 309.73 290.28C310.737 289.038 310.247 282.014 310.213 280.07C307.086 280.025 302.992 280.57 300.02 280.016L300.01 265.986C300.011 263.016 299.816 259.924 300.217 256.981Z"/>
	<path fill="#468434" d="M310.062 249.99L320 250.086L320 270.236Q314.984 270.327 309.98 269.964Q310.028 265.006 310.02 260.047C309.899 256.718 310.04 253.325 310.062 249.99Z"/>
	<path fill="#2B6E34" d="M270.033 269.909C276.605 270.529 283.581 269.991 290.197 269.978C290.016 273.312 290.028 276.652 290.011 279.99C293.21 279.961 296.873 279.6 300.02 280.016C302.992 280.57 307.086 280.025 310.213 280.07C310.247 282.014 310.737 289.038 309.73 290.28L283.687 290.296C279.413 290.3 274.531 289.823 270.365 290.622Q270.261 295.418 270.291 300.216C268.067 300.205 261.747 300.839 260.066 299.957C260.087 298.153 260.019 296.338 259.987 294.533C260.417 289.809 259.824 285.002 260.306 280.228C263.597 280.314 266.948 280.012 270.251 280.007C270.012 276.638 269.978 273.285 270.033 269.909Z"/>
	<path fill="#468434" d="M300.047 231.691C300.276 234.445 300.222 237.237 300.245 240.001L303.402 240.031L303.471 240.221C302.4 240.202 301.326 240.198 300.256 240.16L300.217 256.981C299.816 259.924 300.011 263.016 300.01 265.986L300.02 280.016C296.873 279.6 293.21 279.961 290.011 279.99C290.028 276.652 290.016 273.312 290.197 269.978C283.581 269.991 276.605 270.529 270.033 269.909C269.955 266.613 270.045 263.303 270.07 260.005C273.375 260.175 276.68 259.964 279.986 260.21L280.309 240.278C283.74 240.126 291.591 240.837 294.449 240.07L300.045 239.994C300 237.225 299.937 234.459 300.047 231.691Z"/>
	<path fill="#082232" d="M260.038 230.056C263.27 230.3 266.545 229.839 269.763 230.198C270.211 230.843 270.07 231.668 270.049 232.423C269.845 234.948 269.941 237.507 269.965 240.039C266.744 240.052 263.444 239.93 260.232 240.112C259.877 246.801 259.999 253.55 260.032 260.248C256.785 260.106 253.404 259.795 250.179 260.31C250.541 254.012 249.542 246.576 250.364 240.516C250.982 240.098 251.856 240.203 252.581 240.188Q256.351 240.24 260.117 240.057Q260.184 235.056 260.038 230.056Z"/>
	<path fill="#082232" d="M290.18 230.07C293.256 230.22 296.863 229.648 299.833 230.182C300.118 230.721 300.087 231.092 300.047 231.691C299.937 234.459 300 237.225 300.045 239.994L294.449 240.07C290.379 239.524 284.565 239.998 280.311 240.022C280.317 236.746 280.4 233.449 280.243 230.176C283.549 230.172 286.878 230.247 290.18 230.07Z"/>
	<path fill="#082232" d="M272.776 240.21C273.821 240.206 274.896 240.147 275.937 240.205C277.319 240.382 278.783 240.294 280.177 240.296C279.859 243.489 279.997 246.798 279.97 250.009C276.764 250.016 273.449 250.005 270.274 250.464C270.208 247.061 269.895 243.69 270.084 240.282C270.98 240.323 271.881 240.252 272.776 240.21Z"/>
	<path fill="#082232" d="M219.981 160.036L230.201 159.994C230.191 161.944 229.752 168.852 230.71 170.169C230.191 170.535 230.199 170.533 230.097 171.151C229.653 173.856 230.136 177.316 230.272 180.071L230.435 180.157C229.576 182.087 230.026 187.875 230.115 190.221Q223.924 190.129 217.732 190.108C215.214 190.114 212.553 190.329 210.051 190.069L210.092 221.3C210.092 227.567 209.936 233.881 210.226 240.141Q215.17 240.223 220.111 240.02Q220.12 235.044 220.03 230.069C225.409 230.27 230.827 230.111 236.212 230.12C240.782 230.127 245.477 230.355 250.032 230.032L250.064 234.654C250.126 235.797 249.754 239.03 250.653 239.831C251.041 240.177 252.049 240.155 252.581 240.188C251.856 240.203 250.982 240.098 250.364 240.516C249.542 246.576 250.541 254.012 250.179 260.31Q250.163 265.118 250.28 269.925C240.202 270.326 230.124 270.105 220.042 270.267C217.676 270.539 211.94 269.957 210.295 270.61L209.979 271.336L209.871 270.061C208.416 269.99 201.449 270.463 200.649 270.135C200.462 270.058 200.331 269.885 200.172 269.759C200.319 257.876 200.225 245.978 200.213 234.093Q200.289 221.74 200.201 209.388C200.541 199.633 199.692 189.837 200.116 180.084C199.892 176.859 200.054 173.486 200.06 170.251Q197.146 170.292 194.233 170.205C199.373 169.561 205.01 169.973 210.21 169.986L220.014 169.961L219.981 160.036Z"/>
	<path fill="#468434" d="M250.064 234.654C250.126 235.797 249.754 239.03 250.653 239.831C251.041 240.177 252.049 240.155 252.581 240.188C251.856 240.203 250.982 240.098 250.364 240.516C249.542 246.576 250.541 254.012 250.179 260.31Q250.163 265.118 250.28 269.925C240.202 270.326 230.124 270.105 220.042 270.267C219.965 263.584 220.053 256.888 220.055 250.203L219.994 250.049C220.004 246.759 219.869 243.391 220.244 240.12C229.575 240.466 239.022 239.888 248.379 240.043C248.789 240.047 249.205 239.998 249.614 239.97C250.535 238.872 250.013 236.079 250.064 234.654Z"/>
	<path fill="#265A43" d="M220.244 240.12C229.575 240.466 239.022 239.888 248.379 240.043C243.54 240.688 235.181 240.375 230.081 240.211C230.185 243.476 230.153 246.721 230.088 249.986C227.374 250.043 222.51 249.752 220.055 250.203L219.994 250.049C220.004 246.759 219.869 243.391 220.244 240.12Z"/>
	<path fill="#8D5D3C" d="M219.981 160.036L230.201 159.994C230.191 161.944 229.752 168.852 230.71 170.169C230.191 170.535 230.199 170.533 230.097 171.151C229.653 173.856 230.136 177.316 230.272 180.071C228.39 179.616 225.788 180.013 223.807 180.015C215.956 180.02 207.944 180.425 200.116 180.084C199.892 176.859 200.054 173.486 200.06 170.251Q197.146 170.292 194.233 170.205C199.373 169.561 205.01 169.973 210.21 169.986L220.014 169.961L219.981 160.036Z"/>
	<defs>
		<linearGradient id="gradient_1" gradientUnits="userSpaceOnUse" x1="221.44002" y1="268.19604" x2="208.72508" y2="252.3222">
			<stop offset="0" stop-color="#235F3C"/>
			<stop offset="1" stop-color="#2A5549"/>
		</linearGradient>
	</defs>
	<path fill="url(#gradient_1)" d="M219.994 250.049L220.055 250.203C220.053 256.888 219.965 263.584 220.042 270.267C217.676 270.539 211.94 269.957 210.295 270.61L209.979 271.336L209.871 270.061C210.531 263.565 209.853 256.809 210.213 250.26Q215.1 249.994 219.994 250.049Z"/>
	<path fill="#4FA5F7" d="M310.079 160.041C313.371 160.053 316.712 160.172 320 160.062L320 190.284C316.752 190.108 313.263 189.932 310.026 190.224Q310.073 185.136 310.203 180.049C306.818 180.117 303.416 180.037 300.029 180.012L299.966 169.974C290.034 170.363 280.08 169.632 270.167 170.251C270.33 166.91 270.305 163.555 270.332 160.21C276.256 160.195 282.713 160.8 288.564 160.034L290.159 160.063C292.896 160.236 295.69 160.066 298.435 160.089C302.299 160.122 306.221 160.324 310.079 160.041Z"/>
	<path fill="#CCD1D4" d="M299.994 220.209C306.663 219.857 313.328 220.164 320 220.157L320 229.988L320 240.119L303.471 240.221L303.402 240.031L300.245 240.001C300.222 237.237 300.276 234.445 300.047 231.691C300.087 231.092 300.118 230.721 299.833 230.182C296.863 229.648 293.256 230.22 290.18 230.07C289.671 226.958 289.941 223.28 290.111 220.128C293.428 220.689 296.659 220.382 299.994 220.209Z"/>
	<path fill="#98A5AF" d="M309.964 230.246Q314.98 230.03 320 229.988L320 240.119L303.471 240.221L303.402 240.031C305.544 239.78 307.86 239.937 310.024 239.932Q310.048 235.089 309.964 230.246Z"/>
	<path fill="#FDFDFC" d="M320 200.064L320 220.157C313.328 220.164 306.663 219.857 299.994 220.209L299.95 209.994Q305.121 210.08 310.292 210.045C310.068 206.708 310.007 203.382 309.964 200.04C313.263 200.227 316.687 200.04 320 200.064Z"/>
	<path fill="#FDFDFC" d="M279.97 220.195Q285.039 219.944 290.111 220.128C289.941 223.28 289.671 226.958 290.18 230.07C286.839 229.75 283.35 229.954 279.991 229.957C280.076 226.702 280.015 223.449 279.97 220.195Z"/>
	<path fill="#3C3D5F" d="M69.9612 260.176C70.0003 257.739 70.0535 255.31 70.207 252.877C70.2833 255.273 70.2499 257.658 70.1962 260.054Q75.1181 259.965 80.0381 260.126C80.0624 263.473 80.1293 266.825 80.0915 270.171C83.3226 270.401 86.7385 270.284 89.9779 270.195L90.0516 267.738C90.1312 268.552 90.0839 269.455 90.6791 270.068C95.0767 270.509 99.7125 270.185 104.143 270.182Q112.408 270.284 120.673 270.238C124.432 270.231 128.259 270.346 132.005 270.038C134.689 270.139 137.356 269.84 140.053 270.035Q140.058 265.045 140.187 260.056Q143.664 259.998 147.136 259.789C148.218 259.943 149.086 260.024 149.805 260.955C151.838 263.59 148.525 269.423 152.824 270.201C155.904 270.758 159.483 270.25 162.614 270.201L177.713 270.115C182.959 270.071 188.415 270.571 193.625 270.2C195.375 270.183 198.449 270.469 199.995 269.76L200.172 269.759C200.331 269.885 200.462 270.058 200.649 270.135C201.449 270.463 208.416 269.99 209.871 270.061L209.979 271.336C210.066 274.222 209.695 277.121 209.911 280C203.339 279.772 196.754 280.137 190.18 280.18C190.182 281.406 189.935 289.067 190.161 289.623C190.229 289.792 190.414 289.886 190.54 290.017C193.616 290.075 196.758 290.266 199.824 289.998L200.139 300.281C203.628 300.723 207.426 300.48 210.948 300.493C217.405 300.517 223.84 300.567 230.298 300.461C230.349 297.063 230.275 293.689 230.151 290.294C236.756 290.5 243.344 290.388 249.949 290.279C253.164 290.203 256.467 290.116 259.667 290.49C259.729 291.809 259.684 293.248 259.987 294.533C260.019 296.338 260.087 298.153 260.066 299.957C261.747 300.839 268.067 300.205 270.291 300.216Q270.261 295.418 270.365 290.622C274.531 289.823 279.413 290.3 283.687 290.296L309.73 290.28C313.129 290.39 316.583 289.981 320 290.006L320 300.277L320 320L300.325 320L30.2844 320L0 320L0 300.194L0 290.278L0 280.139Q4.89061 279.997 9.78328 279.991C9.77818 276.74 9.85275 273.527 10.0294 270.281C16.5625 270.034 23.4032 270.65 29.8484 270.21L30.0963 269.795C30.3902 273.172 30.3079 276.633 30.2815 280.021C33.5016 279.998 36.7419 279.896 39.96 279.995Q39.9377 275.25 40.2772 270.518C43.5239 270.452 46.7666 270.284 50.0125 270.199C53.1358 270.441 56.8671 270.016 59.991 269.663C59.8786 266.455 60.0677 263.206 60.087 259.993C63.3684 260.097 66.6973 259.762 69.9612 260.176Z"/>
	<path fill="#514E6A" d="M309.73 290.28C313.129 290.39 316.583 289.981 320 290.006L320 300.277L320 320L300.325 320L30.2844 320Q30.2831 315.13 30.5113 310.266L79.8347 310.25C80.0791 306.95 80.0134 303.562 80.0805 300.249L119.996 300.248Q120.026 305.211 120.002 310.175C125.223 309.691 130.84 310.15 136.106 310.166Q152.851 310.343 169.593 309.983C169.966 306.854 169.683 303.449 170.44 300.399L171.165 299.995C177.368 299.992 183.568 299.794 189.771 299.803C193.141 299.808 196.819 299.696 200.139 300.281C203.628 300.723 207.426 300.48 210.948 300.493C217.405 300.517 223.84 300.567 230.298 300.461C230.349 297.063 230.275 293.689 230.151 290.294C236.756 290.5 243.344 290.388 249.949 290.279C253.164 290.203 256.467 290.116 259.667 290.49C259.729 291.809 259.684 293.248 259.987 294.533C260.019 296.338 260.087 298.153 260.066 299.957C261.747 300.839 268.067 300.205 270.291 300.216Q270.261 295.418 270.365 290.622C274.531 289.823 279.413 290.3 283.687 290.296L309.73 290.28Z"/>
	<path fill="#3C3D5F" d="M309.73 290.28C313.129 290.39 316.583 289.981 320 290.006L320 300.277L320 320L300.325 320C300.52 316.628 300.261 313.145 300.173 309.766C294.767 309.687 289.33 310.165 283.916 310.225C275.927 310.312 267.958 310.023 259.973 309.956L259.986 300.138C250.105 300.555 240.199 299.779 230.298 300.461C230.349 297.063 230.275 293.689 230.151 290.294C236.756 290.5 243.344 290.388 249.949 290.279C253.164 290.203 256.467 290.116 259.667 290.49C259.729 291.809 259.684 293.248 259.987 294.533C260.019 296.338 260.087 298.153 260.066 299.957C261.747 300.839 268.067 300.205 270.291 300.216Q270.261 295.418 270.365 290.622C274.531 289.823 279.413 290.3 283.687 290.296L309.73 290.28Z"/>
	<path fill="#265A43" d="M69.9612 260.176C70.0003 257.739 70.0535 255.31 70.207 252.877C70.2833 255.273 70.2499 257.658 70.1962 260.054Q75.1181 259.965 80.0381 260.126C80.0624 263.473 80.1293 266.825 80.0915 270.171C83.3226 270.401 86.7385 270.284 89.9779 270.195L90.0516 267.738C90.1312 268.552 90.0839 269.455 90.6791 270.068C95.0767 270.509 99.7125 270.185 104.143 270.182Q112.408 270.284 120.673 270.238C124.432 270.231 128.259 270.346 132.005 270.038C134.689 270.139 137.356 269.84 140.053 270.035Q140.058 265.045 140.187 260.056Q143.664 259.998 147.136 259.789C148.218 259.943 149.086 260.024 149.805 260.955C151.838 263.59 148.525 269.423 152.824 270.201C155.904 270.758 159.483 270.25 162.614 270.201L177.713 270.115C182.959 270.071 188.415 270.571 193.625 270.2C195.375 270.183 198.449 270.469 199.995 269.76L200.172 269.759C200.331 269.885 200.462 270.058 200.649 270.135C201.449 270.463 208.416 269.99 209.871 270.061L209.979 271.336C210.066 274.222 209.695 277.121 209.911 280C203.339 279.772 196.754 280.137 190.18 280.18C190.182 281.406 189.935 289.067 190.161 289.623C190.229 289.792 190.414 289.886 190.54 290.017Q180.448 289.94 170.356 290.023C170.458 291.716 170.624 293.434 170.268 295.109Q170.193 292.684 170.091 290.26C165.15 290.208 160.186 290.326 155.249 290.214C148.637 290.064 142.15 289.863 135.533 290.168C133.814 290.247 131.9 290.153 130.236 290.556L129.859 291.239L129.645 290.649C127.178 289.189 95.7393 290.359 90.3924 290.355C90.3433 286.934 90.4414 283.498 90.4249 280.073C86.9741 280.128 83.5114 279.936 80.0657 280.177C80.2265 276.942 80.0199 273.656 79.9343 270.418C76.8891 269.968 73.1234 270.265 70.0927 270.838C69.9034 267.287 69.9513 263.73 69.9612 260.176Z"/>
	<path fill="#2B6E34" d="M60.087 259.993C63.3684 260.097 66.6973 259.762 69.9612 260.176C69.9513 263.73 69.9034 267.287 70.0927 270.838C73.1234 270.265 76.8891 269.968 79.9343 270.418C80.0199 273.656 80.2265 276.942 80.0657 280.177C83.5114 279.936 86.9741 280.128 90.4249 280.073C90.4414 283.498 90.3433 286.934 90.3924 290.355C86.9748 290.318 83.5489 290.327 80.1327 290.237Q80.0019 295.144 79.9449 300.052C77.7449 300.77 63.3456 300.275 59.8415 300.244C59.8118 296.863 59.7074 293.465 59.8152 290.086C53.2833 289.928 46.7231 290.59 40.2071 290.237C40.166 293.631 39.9229 297.078 40.0087 300.466C37.7012 300.005 34.8842 300.275 32.531 300.282Q26.3764 300.323 20.2226 300.22C20.1632 296.815 19.9481 293.401 19.8261 289.997Q9.91698 290.414 0 290.278L0 280.139Q4.89061 279.997 9.78328 279.991C9.77818 276.74 9.85275 273.527 10.0294 270.281C16.5625 270.034 23.4032 270.65 29.8484 270.21L30.0963 269.795C30.3902 273.172 30.3079 276.633 30.2815 280.021C33.5016 279.998 36.7419 279.896 39.96 279.995Q39.9377 275.25 40.2772 270.518C43.5239 270.452 46.7666 270.284 50.0125 270.199C53.1358 270.441 56.8671 270.016 59.991 269.663C59.8786 266.455 60.0677 263.206 60.087 259.993Z"/>
	<path fill="#2B6E34" d="M129.859 291.239L130.236 290.556C131.9 290.153 133.814 290.247 135.533 290.168C142.15 289.863 148.637 290.064 155.249 290.214C160.186 290.326 165.15 290.208 170.091 290.26Q170.193 292.684 170.268 295.109L170.024 299.985L137.883 300.364C135.194 300.412 132.463 299.881 129.793 300.054C129.673 297.145 129.547 294.135 129.859 291.239Z"/>
	<path fill="#8D5D3C" d="M120.185 160.005C123.625 160.23 127.088 159.859 130.534 160.11C130.541 163.396 130.607 166.694 130.442 169.976C133.357 169.751 137.21 169.311 140.063 169.902C147.22 170.409 154.537 170.225 161.713 170.222L194.233 170.205Q197.146 170.292 200.06 170.251C200.054 173.486 199.892 176.859 200.116 180.084C199.692 189.837 200.541 199.633 200.201 209.388Q200.288 221.74 200.213 234.093C200.225 245.978 200.319 257.876 200.172 269.759L199.995 269.76C198.449 270.469 195.375 270.183 193.625 270.2C188.415 270.571 182.959 270.071 177.713 270.115L162.614 270.201C159.483 270.25 155.904 270.758 152.824 270.201C148.525 269.423 151.838 263.59 149.805 260.955C149.086 260.024 148.218 259.943 147.136 259.789Q143.664 259.998 140.187 260.056Q140.058 265.045 140.053 270.035C137.356 269.84 134.689 270.139 132.005 270.038C128.259 270.346 124.432 270.231 120.673 270.238Q112.408 270.284 104.143 270.182C102.898 269.807 101.373 269.941 100.077 269.923Q99.8776 264.985 99.8507 260.044C96.6785 259.983 93.5412 260.083 90.3646 259.921C90.2321 253.277 90.323 246.617 90.3207 239.971C90.1398 233.327 90.263 226.671 90.3111 220.025C93.5678 219.996 96.7964 220.089 100.049 220.238C100.01 218.288 100.037 216.332 100.033 214.382C99.6314 209.737 100.211 204.792 100.269 200.114C100.498 196.987 100.33 193.701 100.343 190.558C103.77 190.219 107.129 190.27 110.563 190.491C110.017 186.935 110.117 183.361 110.226 179.778Q110.162 174.924 110.213 170.069C110.216 166.745 110.044 163.432 110.094 160.102C111.801 160.187 113.502 160.208 115.211 160.216C116.819 159.963 118.555 160.044 120.185 160.005Z"/>
	<path fill="#A46C3D" d="M110.229 200.246C116.741 199.431 123.463 200.425 130 199.855C133.273 200.224 136.771 199.965 140.071 199.98C140.027 203.166 139.648 206.871 140.247 209.989C143.589 209.969 146.925 209.727 150.266 209.768C149.987 213.143 150.013 216.552 149.958 219.936C153.285 219.975 156.628 220.082 159.953 220.045C159.961 223.438 159.877 226.859 159.985 230.248L160.022 231.493C160.75 237.407 159.915 243.736 159.977 249.714Q155.113 249.844 150.256 250.151C150.226 252.231 150.883 257.669 149.43 259.208C148.875 259.797 147.897 259.753 147.136 259.789Q143.664 259.998 140.187 260.056Q140.058 265.045 140.053 270.035C137.356 269.84 134.689 270.139 132.005 270.038C128.259 270.346 124.432 270.231 120.673 270.238Q112.408 270.284 104.143 270.182C102.898 269.807 101.373 269.941 100.077 269.923Q99.8776 264.985 99.8507 260.044C96.6785 259.983 93.5412 260.083 90.3646 259.921C90.2321 253.277 90.323 246.617 90.3207 239.971C90.1398 233.327 90.263 226.671 90.3111 220.025C93.5678 219.996 96.7964 220.089 100.049 220.238C100.01 218.288 100.037 216.332 100.033 214.382C100.279 213.075 100.243 211.639 100.311 210.309C103.624 210.212 106.938 209.848 110.256 209.722C109.945 206.595 110.157 203.383 110.229 200.246Z"/>
	<path fill="#8D5D3C" d="M90.3207 239.971L100.036 239.993Q99.9435 249.974 100.051 259.954C102.225 259.949 107.985 259.301 109.478 260.609C110.505 262.281 109.532 267.743 109.407 269.936C114.471 270.1 119.551 269.979 124.618 269.948C127.021 269.934 129.622 269.737 132.005 270.038C128.259 270.346 124.432 270.231 120.673 270.238Q112.408 270.284 104.143 270.182C102.898 269.807 101.373 269.941 100.077 269.923Q99.8776 264.985 99.8507 260.044C96.6785 259.983 93.5412 260.083 90.3646 259.921C90.2321 253.277 90.323 246.617 90.3207 239.971Z"/>
	<path fill="#B78041" d="M120.06 249.961C126.351 250.037 133.84 250.325 140.022 249.794L140.026 252.149C139.814 254.725 139.962 257.401 139.973 259.988C133.328 260.016 126.657 259.681 120.022 259.845Q119.975 254.903 120.06 249.961Z"/>
	<path fill="#8D5D3C" d="M160.022 231.493C160.75 237.407 159.915 243.736 159.977 249.714Q155.113 249.844 150.256 250.151C150.226 252.231 150.883 257.669 149.43 259.208C148.875 259.797 147.897 259.753 147.136 259.789Q143.664 259.998 140.187 260.056C140.174 257.483 140.474 254.675 140.026 252.149L140.022 249.794C143.404 249.985 146.808 250.26 150.197 250.181L150.235 240.127C153.468 240.01 156.712 240.014 159.947 239.971C159.938 237.145 159.9 234.317 160.022 231.493Z"/>
	<path fill="#764E39" d="M130 199.855C133.273 200.224 136.771 199.965 140.071 199.98C140.027 203.166 139.648 206.871 140.247 209.989C136.838 209.957 133.61 210.304 130.193 209.9C129.879 206.587 130.013 203.183 130 199.855Z"/>
	<path fill="#B78041" d="M110.018 219.933C116.663 220.216 123.322 219.994 129.977 220.27L130.022 239.987C123.365 239.753 116.636 240.039 109.969 239.991L110.018 219.933Z"/>
	<path fill="#764E39" d="M140.063 169.902C147.22 170.409 154.537 170.225 161.713 170.222L194.233 170.205Q197.146 170.292 200.06 170.251C200.054 173.486 199.892 176.859 200.116 180.084C199.692 189.837 200.541 199.633 200.201 209.388C199.523 206.611 199.943 202.879 199.932 199.997Q195.095 200.004 190.259 199.901Q190.338 195.108 189.943 190.33C186.685 190.159 183.348 190.172 180.087 190.261C180.337 193.407 180.03 196.796 180.016 199.972Q174.86 200.032 169.705 199.945C169.703 197.917 170.332 192.267 169.644 190.669C168.385 189.663 162.086 190.264 160.054 190.265L159.941 179.93C153.462 180.242 146.764 180.136 140.277 179.947Q139.953 174.929 140.063 169.902Z"/>
	<path fill="#764E39" d="M159.985 230.248C163.345 230.172 166.73 230.144 170.079 229.843Q169.815 234.909 169.775 239.981C172.968 239.958 176.901 239.538 180.001 240.038C179.949 246.698 179.853 253.402 180.025 260.059C183.436 260.026 186.804 259.884 190.209 259.744C190.232 263.201 190.184 266.589 189.752 270.024C191.038 270.077 192.345 270.083 193.625 270.2C188.415 270.571 182.959 270.071 177.713 270.115L162.614 270.201C159.483 270.25 155.904 270.758 152.824 270.201C148.525 269.423 151.838 263.59 149.805 260.955C149.086 260.024 148.218 259.943 147.136 259.789C147.897 259.753 148.875 259.797 149.43 259.208C150.883 257.669 150.226 252.231 150.256 250.151Q155.113 249.844 159.977 249.714C159.915 243.736 160.75 237.407 160.022 231.493L159.985 230.248Z"/>
	<path fill="#A46C3D" d="M180.035 215.964C180.676 220.52 180.188 225.317 180.313 229.917Q186.415 230.094 192.52 230.045C194.948 230.046 197.564 229.858 199.957 230.259Q199.917 235.148 199.981 240.036L199.956 249.931C199.937 256.155 199.475 263.683 199.995 269.76C198.449 270.469 195.375 270.183 193.625 270.2C192.345 270.083 191.038 270.077 189.752 270.024C190.184 266.589 190.232 263.201 190.209 259.744C186.804 259.884 183.436 260.026 180.025 260.059C179.853 253.402 179.949 246.698 180.001 240.038C180.454 232.06 179.837 223.962 180.035 215.964Z"/>
	<path fill="#B78041" d="M190.054 240.065Q195.017 239.917 199.981 240.036L199.956 249.931C196.992 249.345 193.325 250.134 190.277 250.283C190.041 246.88 190.044 243.473 190.054 240.065Z"/>
	<path fill="#B78041" d="M180.018 209.964C186.657 210.139 193.345 210.042 199.971 210.327C199.967 216.967 200.055 223.621 199.957 230.259C197.564 229.858 194.948 230.046 192.52 230.045Q186.415 230.094 180.313 229.917C180.188 225.317 180.676 220.52 180.035 215.964L180.018 209.964Z"/>
	<path fill="#A46C3D" d="M110.094 160.102C111.801 160.187 113.502 160.208 115.211 160.216C116.874 160.355 118.52 160.348 120.187 160.336Q119.985 165.059 119.998 169.787Q115.103 169.838 110.213 170.069C110.216 166.745 110.044 163.432 110.094 160.102Z"/>
	<path fill="#265A43" d="M0 230.085C6.67566 230.18 13.3554 230.007 20.0307 230.195L22.3726 230.159C24.9051 230.163 27.4674 230.089 29.9949 230.233L30.2238 230.253C30.2064 233.514 30.1389 236.783 30.2511 240.042C31.8593 240.069 33.4738 240.124 35.0817 240.119L50.0906 240.065Q50.0284 235.81 50.0957 231.555C50.791 233.385 50.3178 237.974 50.3173 240.143C49.9164 250.115 50.0104 260.217 50.0125 270.199C46.7666 270.284 43.5239 270.452 40.2772 270.518Q39.9377 275.25 39.96 279.995C36.7419 279.896 33.5016 279.998 30.2815 280.021C30.3079 276.633 30.3902 273.172 30.0963 269.795L29.8484 270.21C23.4032 270.65 16.5625 270.034 10.0294 270.281C9.85275 273.527 9.77818 276.74 9.78328 279.991Q4.89061 279.997 0 280.139L0 260.059L0 250.239L0 230.085Z"/>
	<path fill="#468434" d="M10.2206 250.321C12.9238 249.871 15.8978 249.987 18.6354 250.086C21.6245 250.327 27.8316 249.727 30.2235 250.396C30.1405 256.799 29.7871 263.414 30.0963 269.795L29.8484 270.21C23.4032 270.65 16.5625 270.034 10.0294 270.281C9.85275 273.527 9.77818 276.74 9.78328 279.991Q4.89061 279.997 0 280.139L0 260.059L0 250.239C2.48169 250.211 5.52404 249.823 7.94114 250.21C8.69033 250.268 9.47082 250.376 10.2206 250.321Z"/>
	<path fill="#265A43" d="M0 250.239C2.48169 250.211 5.52404 249.823 7.94114 250.21C8.69033 250.268 9.47082 250.376 10.2206 250.321C9.99579 253.512 9.8986 256.779 10.049 259.976C10.2346 263.416 10.0044 266.842 10.0294 270.281C9.85275 273.527 9.77818 276.74 9.78328 279.991Q4.89061 279.997 0 280.139L0 260.059L0 250.239Z"/>
	<path fill="#082232" d="M0 250.239C2.48169 250.211 5.52404 249.823 7.94114 250.21C8.69033 250.268 9.47082 250.376 10.2206 250.321C9.99579 253.512 9.8986 256.779 10.049 259.976C6.70476 260.065 3.34601 260.035 0 260.059L0 250.239Z"/>
	<path fill="#4FA5F7" d="M0 230.085C6.67566 230.18 13.3554 230.007 20.0307 230.195L20.1075 237.066C20.596 237.831 20.3932 239.336 20.3155 240.232C19.9901 242.267 20.5383 248.759 19.5233 249.964L18.6354 250.086C15.8978 249.987 12.9238 249.871 10.2206 250.321C9.47082 250.376 8.69033 250.268 7.94114 250.21C5.52404 249.823 2.48169 250.211 0 250.239L0 230.085Z"/>
	<path fill="#082232" d="M20.1075 237.066C20.596 237.831 20.3932 239.336 20.3155 240.232C19.9901 242.267 20.5383 248.759 19.5233 249.964L18.6354 250.086C15.8978 249.987 12.9238 249.871 10.2206 250.321C9.47082 250.376 8.69033 250.268 7.94114 250.21C8.64771 250.139 9.42585 250.195 10.0151 249.792C10.3296 246.603 10.1742 243.306 10.178 240.101C13.4762 240.27 16.7898 240.11 20.0889 240.019L20.1075 237.066Z"/>
	<path fill="#082232" d="M22.3726 230.159C24.9051 230.163 27.4674 230.089 29.9949 230.233Q29.9231 235.125 29.9935 240.017C26.7612 240.164 23.5524 240.262 20.3155 240.232C20.3932 239.336 20.596 237.831 20.1075 237.066L20.0307 230.195L22.3726 230.159Z"/>
	<path fill="#082232" d="M35.0306 240.283Q42.5443 240.339 50.058 240.295Q49.932 245.03 49.9863 249.766C43.5723 250.582 36.8587 249.938 30.3868 250.252C29.7298 247.567 30.0364 243.123 30.1392 240.304L35.0306 240.283Z"/>
	<path fill="#CCD1D4" d="M0 180.046C6.70797 180.035 13.4515 180.165 20.1553 180C20.0006 183.419 20.0337 186.849 20.0195 190.272L30.2862 189.952L30.1887 193.399C30.197 195 29.7506 198.674 30.4471 199.988C29.5195 201.614 30.0343 208.025 30.0284 210.159C31.8259 210.056 50.359 209.927 50.9483 210.168L50.4026 210.431C49.7542 213.011 49.8106 217.332 50.224 219.979C50.252 223.023 50.75 227.114 49.9955 230.026C43.4766 230.042 36.7119 229.819 30.2238 230.253L29.9949 230.233C27.4674 230.089 24.9051 230.163 22.3726 230.159L20.0307 230.195C13.3554 230.007 6.67566 230.18 0 230.085L0 190.049L0 180.046Z"/>
	<path fill="#FDFDFC" d="M0 180.046C6.70797 180.035 13.4515 180.165 20.1553 180C20.0006 183.419 20.0337 186.849 20.0195 190.272L30.2862 189.952L30.1887 193.399C29.8842 195.517 30.0512 197.848 30.0453 199.995C23.3612 199.991 16.7282 200.175 10.0353 200.017Q10.0532 195.038 9.99556 190.06C6.68274 189.924 3.32115 190.101 0 190.049L0 180.046Z"/>
	<path fill="#4FA5F7" d="M30.2493 220.018C36.8664 220.319 43.596 220.022 50.224 219.979C50.252 223.023 50.75 227.114 49.9955 230.026C43.4766 230.042 36.7119 229.819 30.2238 230.253L29.9949 230.233C27.4674 230.089 24.9051 230.163 22.3726 230.159C24.9505 229.896 27.6271 230.021 30.2197 230.012L30.2493 220.018Z"/>
	<path fill="#98A5AF" d="M9.99185 210.305C16.6287 210.151 23.4038 209.853 30.0347 210.071Q30.0302 215.047 30.2493 220.018Q20.1179 220.056 9.98729 220.201C9.98931 216.904 10.0259 213.602 9.99185 210.305Z"/>
	<path fill="#082232" d="M100.169 160.215C103.477 160.277 106.784 160.051 110.094 160.102C110.044 163.432 110.216 166.745 110.213 170.069Q110.162 174.924 110.226 179.778C110.117 183.361 110.017 186.935 110.563 190.491C107.129 190.27 103.77 190.219 100.343 190.558C100.33 193.701 100.498 196.987 100.269 200.114C100.211 204.792 99.6314 209.737 100.033 214.382C100.037 216.332 100.01 218.288 100.049 220.238C96.7964 220.089 93.5678 219.996 90.3111 220.025C90.263 226.671 90.1398 233.327 90.3207 239.971C90.323 246.617 90.2321 253.277 90.3646 259.921C93.5412 260.083 96.6785 259.983 99.8507 260.044Q99.8776 264.985 100.077 269.923C101.373 269.941 102.898 269.807 104.143 270.182C99.7125 270.185 95.0767 270.509 90.6791 270.068C90.0839 269.455 90.1312 268.552 90.0516 267.738L89.9779 270.195C86.7385 270.284 83.3226 270.401 80.0915 270.171C80.1293 266.825 80.0624 263.473 80.0381 260.126Q75.1181 259.965 70.1962 260.054C70.2499 257.658 70.2833 255.273 70.207 252.877C70.3292 245.26 70.2016 237.627 70.2412 230.007Q75.1352 230.156 80.0314 230.145C80.5792 220.243 80.1678 210.115 80.1537 200.188L90.116 200.109C90.2643 193.49 90.1174 186.843 90.0758 180.222L94.727 180.186C96.4547 179.965 98.2841 180.061 100.027 180.04C100.242 173.44 99.8379 166.807 100.169 160.215Z"/>
	<path fill="#764E39" d="M100.169 160.215C103.477 160.277 106.784 160.051 110.094 160.102C110.044 163.432 110.216 166.745 110.213 170.069Q110.162 174.924 110.226 179.778C110.117 183.361 110.017 186.935 110.563 190.491C107.129 190.27 103.77 190.219 100.343 190.558C100.33 193.701 100.498 196.987 100.269 200.114C100.211 204.792 99.6314 209.737 100.033 214.382C100.037 216.332 100.01 218.288 100.049 220.238C96.7964 220.089 93.5678 219.996 90.3111 220.025C90.263 226.671 90.1398 233.327 90.3207 239.971C90.323 246.617 90.2321 253.277 90.3646 259.921C93.5412 260.083 96.6785 259.983 99.8507 260.044Q99.8776 264.985 100.077 269.923C101.373 269.941 102.898 269.807 104.143 270.182C99.7125 270.185 95.0767 270.509 90.6791 270.068C90.0839 269.455 90.1312 268.552 90.0516 267.738C89.9431 245.273 89.6174 222.674 90.247 200.224C93.5131 200.277 96.8021 200.274 100.063 200.074C100.044 193.451 99.8694 186.791 100.248 180.178Q97.4876 180.238 94.727 180.186C96.4547 179.965 98.2841 180.061 100.027 180.04C100.242 173.44 99.8379 166.807 100.169 160.215Z"/>
	<path fill="#082232" d="M100.169 160.215C103.477 160.277 106.784 160.051 110.094 160.102C110.044 163.432 110.216 166.745 110.213 170.069Q110.162 174.924 110.226 179.778C108.75 180.447 102.017 180.215 100.122 180.22C100.476 173.66 100.424 166.781 100.169 160.215Z"/>
	<path fill="#468434" d="M60.3205 220.038C62.4249 220.105 68.6408 219.512 70.043 220.38L70.0713 220.884C70.2618 223.918 70.2264 226.968 70.2412 230.007C70.2016 237.627 70.3292 245.26 70.207 252.877C70.0535 255.31 70.0003 257.739 69.9612 260.176C66.6973 259.762 63.3684 260.097 60.087 259.993C60.0677 263.206 59.8786 266.455 59.991 269.663C56.8671 270.016 53.1358 270.441 50.0125 270.199C50.0104 260.217 49.9164 250.115 50.3173 240.143C50.3178 237.974 50.791 233.385 50.0957 231.555L50.0456 230.214L54.4132 230.19C56.2595 229.969 58.2208 230.055 60.0846 230.028C60.0326 226.848 59.7833 223.456 60.1959 220.299L60.3205 220.038Z"/>
	<path fill="#082232" d="M60.3205 220.038C62.4249 220.105 68.6408 219.512 70.043 220.38L70.0713 220.884C69.9251 223.888 70.0776 226.929 70.1353 229.936C66.8306 229.995 63.5519 230.243 60.2397 230.243Q60.1838 225.271 60.1959 220.299L60.3205 220.038Z"/>
	<path fill="#082232" d="M50.0456 230.214L54.4132 230.19Q57.229 230.266 60.0448 230.189Q59.9865 235.113 60.0196 240.038L50.3173 240.143C50.3178 237.974 50.791 233.385 50.0957 231.555L50.0456 230.214Z"/>
	<path fill="#FDFDFC" d="M30.4471 199.988C35.2293 200.369 40.096 200.195 44.891 200.149C49.9418 200.1 55.0148 200.141 60.0626 200.01Q59.9556 205.007 60.0275 210.005C57.5514 209.994 54.7979 209.77 52.3684 210.216L50.9483 210.168C50.359 209.927 31.8259 210.056 30.0284 210.159C30.0343 208.025 29.5195 201.614 30.4471 199.988Z"/>
	<path fill="#4FA5F7" d="M50.9483 210.168L52.3684 210.216C54.9503 210.301 57.5295 210.243 60.1116 210.268C60.0638 213.348 59.6911 216.8 60.126 219.838C56.8587 220.074 53.4991 220.041 50.224 219.979C49.8106 217.332 49.7542 213.011 50.4026 210.431L50.9483 210.168Z"/>
</svg>
</file>

<file path="web-stepik/src/assets/logo.svg">
<svg id="eaFGVcZH23v1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 300 300" shape-rendering="geometricPrecision" text-rendering="geometricPrecision" project-id="27d03fa609614aa29cf44372288f8b6d" export-id="81bae1fea51942d989bd55839ffdf358" cached="false"><text dx="0" dy="0" font-family="&quot;eaFGVcZH23v1:::Roboto&quot;" font-size="15" font-weight="400" transform="matrix(4.747154 0 0 4.28677 12.24919 172.491598)" stroke-width="0"><tspan y="0" font-weight="400" stroke-width="0"><![CDATA[
Ideanick
]]></tspan></text>
<style><![CDATA[
@font-face {font-family: 'eaFGVcZH23v1:::Roboto';font-style: normal;font-weight: 400;font-stretch: normal;src: url(data:font/ttf;charset=utf-8;base64,) format('truetype');}
]]></style>
</svg>
</file>

<file path="web-stepik/src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="web-stepik/src/components/Alert/index.js">
import cn from "classnames";
import { jsx as _jsx } from "react/jsx-runtime";
import css from "./index.module.scss";
export const Alert = ({ color, hidden, children }) => {
  if (hidden) {
    return null;
  }
  return _jsx("div", {
    className: cn({ [css.alert]: true, [css[color]]: true }),
    children: children,
  });
};
</file>

<file path="web-stepik/src/components/Alert/index.tsx">
import cn from "classnames";
import css from "./index.module.scss";

export type AlertProps = {
  color: "red" | "green" | "brown";
  hidden?: boolean;
  children: React.ReactNode;
};
export const Alert = ({ color, hidden, children }: AlertProps) => {
  if (hidden) {
    return null;
  }
  return (
    <div className={cn({ [css.alert]: true, [css[color]]: true })}>
      {children}
    </div>
  );
};
</file>

<file path="web-stepik/src/components/ErrorPageComponent/index.js">
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Alert } from "../Alert";
import { Segment } from "../Segments";
export const ErrorPageComponent = ({
  title = "Oops, error",
  message = "Something went wrong",
  children,
}) => {
  return _jsxs(Segment, {
    title: title,
    children: [_jsx(Alert, { color: "red", children: message }), children],
  });
};
</file>

<file path="web-stepik/src/components/FormItems/index.js">
import { jsx as _jsx } from "react/jsx-runtime";
import css from "./index.module.scss";
export const FormItems = ({ children }) => {
  return _jsx("div", { className: css.formItems, children: children });
};
</file>

<file path="web-stepik/src/components/FormItems/index.module.scss">
// .formItems {
//     & > *:not(:first-child) {
//       margin-top: 12px;
//     }
//   }

.formItems {
  display: flex;
  flex-flow: column;
  align-items: stretch;
  justify-content: stretch;
  gap: 12px;
  width: 100%;
}
</file>

<file path="web-stepik/src/components/FormItems/index.tsx">
import css from "./index.module.scss";

export const FormItems = ({ children }: { children: React.ReactNode }) => {
  return <div className={css.formItems}>{children}</div>;
};
</file>

<file path="web-stepik/src/components/Icon/index.tsx">
import { FcLike, FcDislike } from "react-icons/fc";
import { AiFillCloseCircle } from "react-icons/ai";
import { createElement } from "react";
import type { IconBaseProps } from "react-icons/lib";

const icons = {
  FilledLike: FcLike,
  UnfilledLike: FcDislike,
  Delete: AiFillCloseCircle,
};

export const Icon = ({
  name,
  ...restProps
}: { name: keyof typeof icons } & IconBaseProps) => {
  return createElement(icons[name], restProps);
};
</file>

<file path="web-stepik/src/components/input/index.js">
import cn from "classnames";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import css from "./index.module.scss";
export const Input = ({ name, label, formik, maxWidth, type = "text" }) => {
  const value = formik.values[name];
  const error = formik.errors[name];
  const touched = formik.touched[name];
  const disabled = formik.isSubmitting;
  const invalid = error && touched;
  return _jsxs("div", {
    className: cn({ [css.field]: true, [css.disabled]: disabled }),
    children: [
      _jsx("label", { className: css.label, htmlFor: name, children: label }),
      _jsx("br", {}),
      _jsx("input", {
        className: cn({ [css.input]: true, [css.invalid]: invalid }),
        type: type,
        onChange: (e) => {
          formik.setFieldValue(name, e.target.value);
        },
        onBlur: () => {
          formik.setFieldTouched(name, true);
        },
        style: { maxWidth: maxWidth ? maxWidth : undefined },
        value: value,
        name: name,
        id: name,
        disabled: formik.isSubmitting,
      }),
      invalid && _jsx("div", { style: { color: "red" }, children: error }),
    ],
  });
};
</file>

<file path="web-stepik/src/components/input/index.module.scss">
@use "../../styles/vars" as *;
@use "../../styles/mixins" as *;

// .field {
//     margin-bottom: 10px;
// }

.field {
  margin-bottom: 10px;

  &.disabled {
    opacity: 0.5;
  }

  .label {
    font-weight: bold;
    margin-bottom: 2px;
    display: block;
  }

  .input {
    margin-top: -10px;
    display: block;
    padding: 7px;
    border: 1px solid $black;
    border-radius: $borderRadiusSmall;
    background-color: $white;
    outline: none;
    width: 100%;
    max-width: 200px;

    &:focus {
      border-color: $blue;
    }

    &.invalid {
      border-color: $red;
    }
  }

  .error {
    margin-top: 2px;
    color: $red;
  }
}
</file>

<file path="web-stepik/src/components/Loader/index.js">
import cn from "classnames";
import { jsx as _jsx } from "react/jsx-runtime";
import css from "./index.module.scss";
export const Loader = ({ type }) =>
  _jsx("span", {
    className: cn({
      [css.loader]: true,
      [css[`type-${type}`]]: true,
    }),
  });
</file>

<file path="web-stepik/src/components/Loader/index.module.scss">
@use "../../styles/vars" as *;
@use "../../styles/mixins" as *;

.loader {
  &.type-page {
    position: relative;
    display: block;
    width: 100%;
    min-height: inherit;
    height: 100%;
    @include loader($borderWidth: 5px, $size: 60px, $color: $gray);
  }

  &.type-section {
    position: relative;
    display: block;
    height: 80px;
    width: 100%;
    @include loader($borderWidth: 5px, $size: 60px, $color: $gray);
  }
}
</file>

<file path="web-stepik/src/components/Loader/index.tsx">
import cn from "classnames";
import css from "./index.module.scss";

export const Loader = ({ type }: { type: "page" | "section" }) => (
  <span
    className={cn({
      [css.loader]: true,
      [css[`type-${type}`]]: true,
    })}
  />
);
</file>

<file path="web-stepik/src/components/NotAuthRouteTracker/index.tsx">
import { atom } from 'nanostores'
import { useEffect } from 'react'
import { useLocation } from 'react-router-dom'
import { GetAllIdeas, GetSignIn, getSignOutRoute, GetSignUp } from '../../utils/routes'

export const lastVisistedNotAuthRouteStore = atom(GetAllIdeas())

export const NotAuthRouteTracker = () => {
  const { pathname } = useLocation()
  useEffect(() => {
    const authRoutes = [GetSignUp(), GetSignIn(), getSignOutRoute()]
    const isAuthRoute = authRoutes.includes(pathname)
    if (!isAuthRoute) {
      lastVisistedNotAuthRouteStore.set(pathname)
    }
  }, [pathname])

  return null
}
</file>

<file path="web-stepik/src/components/Segments/index.js">
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import css from "./index.module.scss";
export const Segment = ({ title, size = 1, description, children }) => {
  return _jsxs("div", {
    className: css.segment,
    children: [
      size === 1
        ? _jsx("h1", { className: css.title, children: title })
        : _jsx("h2", { className: css.title, children: title }),
      description &&
        _jsx("p", { className: css.description, children: description }),
      children && _jsx("div", { className: css.content, children: children }),
    ],
  });
};
</file>

<file path="web-stepik/src/components/Segments/index.module.scss">
@use "../../styles/vars" as *;
@use "../../styles/mixins" as *;

.segment {
  h1.title {
    @include h1;
  }

  h2.title {
    @include h2;
  }

  .description {
    font-size: 18px;
    margin-top: 5px;
  }

  .content {
    margin-top: 12px;
  }
}
</file>

<file path="web-stepik/src/components/Segments/index.tsx">
import css from "./index.module.scss";

export const Segment = ({
  title,
  size = 1,
  description,
  children,
}: {
  title: React.ReactNode;
  size?: 1 | 2;
  description?: string;
  children?: React.ReactNode;
}) => {
  return (
    <div className={css.segment}>
      {size === 1 ? (
        <h1 className={css.title}>{title}</h1>
      ) : (
        <h2 className={css.title}>{title}</h2>
      )}
      {description && <p className={css.description}>{description}</p>}
      {children && <div className={css.content}>{children}</div>}
    </div>
  );
};
</file>

<file path="web-stepik/src/components/textarea/index.js">
import cn from "classnames";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import css from "./index.module.scss";
export const Textarea = ({ name, label, formik, maxWidth }) => {
  const value = formik.values[name];
  const error = formik.errors[name];
  const disabled = formik.isSubmitting;
  const invalid = error && !!formik.submitCount;
  return _jsxs("div", {
    className: cn({ [css.field]: true, [css.disabled]: disabled }),
    children: [
      _jsx("label", { htmlFor: name, children: label }),
      _jsx("br", {}),
      _jsx("textarea", {
        className: cn({ [css.input]: true, [css.invalid]: invalid }),
        onChange: (e) => {
          formik.setFieldValue(name, e.target.value);
        },
        style: { maxWidth: maxWidth ? maxWidth : undefined },
        value: value,
        name: name,
        id: name,
        disabled: formik.isSubmitting,
      }),
      error &&
        !!formik.submitCount &&
        _jsx("div", { style: { color: "red" }, children: error }),
    ],
  });
};
</file>

<file path="web-stepik/src/components/textarea/index.module.scss">
@use "../input/index.module.scss" as *;

.field {
  .input {
    margin-top: 10px;
    min-height: 150px;
    width: 100%;
    max-width: none;
    resize: vertical;
    font-family: Arial, Helvetica, sans-serif;
  }
}
</file>

<file path="web-stepik/src/components/textarea/index.tsx">
import { FormikProps } from "formik";
import css from "./index.module.scss";
import cn from "classnames";

export const Textarea = ({
  name,
  label,
  formik,
  maxWidth,
}: {
  name: string;
  label: string;
  formik: FormikProps<any>;
  maxWidth?: number;
}) => {
  const value = formik.values[name];
  const error = formik.errors[name] as string | undefined;
  const disabled = formik.isSubmitting;
  const invalid = error && !!formik.submitCount;

  return (
    <div className={cn({ [css.field]: true, [css.disabled]: disabled })}>
      <label htmlFor={name}>{label}</label>
      <br />
      <textarea
        className={cn({ [css.input]: true, [css.invalid]: invalid })}
        onChange={(e) => {
          formik.setFieldValue(name, e.target.value);
        }}
        style={{ maxWidth: maxWidth ? maxWidth : undefined }}
        value={value}
        name={name}
        id={name}
        disabled={formik.isSubmitting}
      />
      {error && !!formik.submitCount && (
        <div style={{ color: "red" }}>{error}</div>
      )}
    </div>
  );
};
</file>

<file path="web-stepik/src/pages/auth/SignOutPage/index.tsx">
import Cookies from "js-cookie";
import { useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { GetSignIn } from "../../../utils/routes";
import trpc from "../../../utils/trpc";
import { Loader } from "../../../components/Loader";

export const SignOutPage = () => {
  const navigate = useNavigate();
  const trpcUtils = trpc.useContext();
  useEffect(() => {
    Cookies.remove("token");
    void trpcUtils.invalidate().then(() => {
      navigate(GetSignIn());
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  return <Loader type="page" />;
};
</file>

<file path="web-stepik/src/pages/ideas/AllIdeas/index.module.scss">
@use "../../../styles/vars" as *;
@use "../../../styles/mixins" as *;

.title {
  @include h1;
}

.ideas {
  .idea {
    padding: 20px;
    border: 1px solid $white;
    border-radius: 10px;

    & + .idea {
      margin-top: 20px;
    }

    .ideaLink {
      @include link(rgb(144, 144, 216), rgb(229, 129, 129));
    }
  }

  .more {
    margin-top: 15px;
  }
}
</file>

<file path="web-stepik/src/pages/ideas/NewIdeaPage/style.module.scss">
@use "../../../styles/vars" as *;
@use "../../../styles/mixins" as *;

h1 {
  @include h1;
}
</file>

<file path="web-stepik/src/pages/other/NotFoundPage/index.js">
import { jsx as _jsx } from "react/jsx-runtime";
import img404 from "../../../assets/images/404-not-found.png";
import { ErrorPageComponent } from "../../../components/ErrorPageComponent";
import css from "./index.module.scss";
export const NotFoundPage = ({
  title = "Not Found",
  message = "This page does not exist",
}) =>
  _jsx(ErrorPageComponent, {
    title: title,
    message: message,
    children: _jsx("img", {
      src: img404,
      className: css.img404,
      alt: "not found",
      width: 800,
      height: 600,
    }),
  });
</file>

<file path="web-stepik/src/pages/other/NotFoundPage/index.module.scss">
.img404 {
  width: 100%;
  height: auto;
}
</file>

<file path="web-stepik/src/styles/_vars.scss">
$white: #fff;
$black: #171717;
$blue: rgb(98, 98, 233);
$red: rgb(122, 24, 24);
$gray: #a9a9a9;
$yellow: #ff9b31;
$grayLight: #eee;

$defaultFontFamily: "Geologica", sans-serif;
$defaultFontSize: 14px;
$defaultBackgroundColor: $black;
$defaultTextColor: $white;
$defaultLineHeight: 1.2;

$borderRadiusSmall: 3px;
</file>

<file path="web-stepik/src/styles/global.scss">
@use "../../node_modules/reset-css/sass/reset";
@use "../styles/vars" as vars;
@use "../../node_modules/include-media/dist/include-media" as *;
@use "../styles/mixins" as mixins;
@use '../../node_modules/react-image-gallery/styles/scss/image-gallery';
html,
body,
#root {
  height: 100%;
  min-height: 100%;
  width: 100%;
  position: relative;
}

body {
  font-family: vars.$defaultFontFamily;
  font-size: vars.$defaultFontSize;
  background: vars.$defaultBackgroundColor;
  color: vars.$defaultTextColor;
  line-height: vars.$defaultLineHeight;
}

*,
*:before,
*:after {
  box-sizing: border-box;
}

a {
  text-decoration: none;
}
</file>

<file path="web-stepik/src/types.d.ts">
declare module "*.svg" {
  import * as React from "react";
  export const ReactComponent: React.FunctionComponent<
    React.SVGProps<SVGSVGElement>
  >;

  const src: string;
  export default src;
}
</file>

<file path="web-stepik/src/utils/pumpGetRoute.ts">
import { useParams as useReactRouterParams } from "react-router-dom";

const baseUrl = process.env.VITE_WEBAPP_URL || process.env.WEBAPP_URL;

type PumpedGetRouteInputBase = {
  abs?: boolean;
};

function pumpGetRoute<T extends Record<string, boolean>>(
  routeParamsDefinition: T,
  getRoute: (routeParams: Record<keyof T, string>) => string,
): {
  (routeParams: Record<keyof T, string> & PumpedGetRouteInputBase): string;
  placeholders: Record<keyof T, string>;
  useParams: () => Record<keyof T, string>;
  definition: string;
};

function pumpGetRoute(getRoute: () => string): {
  (routeParams?: PumpedGetRouteInputBase): string;
  placeholders: {};
  useParams: () => {};
  definition: string;
};

function pumpGetRoute(routeParamsOrGetRoute?: any, maybeGetRoute?: any) {
  const routeParamsDefinition =
    typeof routeParamsOrGetRoute === "function" ? {} : routeParamsOrGetRoute;
  const getRoute =
    typeof routeParamsOrGetRoute === "function"
      ? routeParamsOrGetRoute
      : maybeGetRoute;
  const placeholders = Object.keys(routeParamsDefinition).reduce(
    (acc, key) => ({ ...acc, [key]: `:${key}` }),
    {},
  );
  const definition = getRoute(placeholders);
  const pumpedGetRoute = (routeParams?: PumpedGetRouteInputBase) => {
    const route = getRoute(routeParams);
    if (routeParams?.abs) {
      return `${baseUrl}${route}`;
    } else {
      return route;
    }
  };
  pumpedGetRoute.placeholders = placeholders;
  pumpedGetRoute.definition = definition;
  pumpedGetRoute.useParams = useReactRouterParams as any;
  return pumpedGetRoute;
}

export type RouteParams<T extends { placeholders: Record<string, string> }> =
  T["placeholders"];

export const pgr = pumpGetRoute;
</file>

<file path="web-stepik/src/utils/routes.ts">
import { pgr } from "./pumpGetRoute";

export const GetSignUp = pgr(() => "/sign-up");

export const GetSignIn = pgr(() => "/sign-in");

export const getSignOutRoute = pgr(() => "/sign-out");

export const GetEditProfileRoute = pgr(() => "/edit-profile");

export const GetAllIdeas = pgr(() => "/");

export const GetIdea = pgr({ nick: true }, ({ nick }) => `/ideas/${nick}`);

export const getEditIdeaRoute = pgr(
  { nick: true },
  ({ nick }) => `/ideas/${nick}/edit`,
);

export const GetNewIdea = pgr(() => "/ideas/new");
</file>

<file path="web-stepik/src/utils/sentry.tsx">
import * as Sentry from '@sentry/react'
import { useEffect } from 'react'
import { useMe } from './ctx'
import { env } from './env'

if (env.VITE_WEBAPP_SENTRY_DSN) {
  Sentry.init({
    dsn: env.VITE_WEBAPP_SENTRY_DSN,
    environment: env.HOST_ENV,
    normalizeDepth: 10,
  })
}

export const sentryCaptureException = (error: Error) => {
  if (env.VITE_WEBAPP_SENTRY_DSN) {
    Sentry.captureException(error)
  }
}

export const SentryUser = () => {
  const me = useMe()
  useEffect(() => {
    if (env.VITE_WEBAPP_SENTRY_DSN) {
      if (me) {
        Sentry.setUser({
          email: me.email,
          id: me.id,
          ip_address: '{{auto}}',
          username: me.nick,
        })
      } else {
        Sentry.setUser(null)
      }
    }
  }, [me])
  return null
}
</file>

<file path="web-stepik/tsconfig.tsbuildinfo">
{"root":["./src/app.tsx","./src/main.tsx","./src/vite-env.d.ts","./src/components/alert/index.tsx","./src/components/button/index.tsx","./src/components/errorpagecomponent/index.tsx","./src/components/form/index.tsx","./src/components/formitems/index.tsx","./src/components/icon/index.tsx","./src/components/loader/index.tsx","./src/components/segments/index.tsx","./src/components/input/index.tsx","./src/components/layout/index.tsx","./src/components/textarea/index.tsx","./src/pages/auth/editprofilepage/index.tsx","./src/pages/auth/signinpage/index.tsx","./src/pages/auth/signoutpage/index.tsx","./src/pages/auth/signuppage/index.tsx","./src/pages/ideas/allideas/index.tsx","./src/pages/ideas/editideapage/index.tsx","./src/pages/ideas/newideapage/index.tsx","./src/pages/ideas/viewidea/index.tsx","./src/pages/other/notfoundpage/index.tsx","./src/utils/ctx.tsx","./src/utils/env.ts","./src/utils/pagewrapper.tsx","./src/utils/routes.tsx","./src/utils/trpc.tsx"],"version":"5.6.3"}
</file>

<file path="web-stepik/vite.config.d.ts">
declare const _default: import("vite").UserConfigFnObject;
export default _default;
</file>

<file path=".gitignore">
node_modules
.env
</file>

<file path="backend/.gitignore">
node-modules
dist
.DS_Store
.env
</file>

<file path="backend/.lintstagedrc.yml">
"*.{ts,tsx,js}":
  - "eslint --cache --cache-location ./node_modules/.cache/.eslintcache --fix"
  - "prettier --loglevel warn --cache --write"
"*.{json,yml,scss}": "prettier --loglevel warn --cache --write"
</file>

<file path="backend/src/lib/ctx.ts">
import { createPrismaClient } from "./prisma";

export const createAppContext = () => {
  const prisma = createPrismaClient();
  return {
    prisma,
    stop: async () => {
      await prisma.$disconnect();
    },
  };
};

export type AppContext = ReturnType<typeof createAppContext>;
</file>

<file path="backend/src/lib/emails.ts">
import { env } from "./env";
import { promises as fs } from "fs";
import path from "path";
import { type Idea, type User } from "@prisma/client";
import { GetIdea, GetNewIdea } from "@stepik/web-stepik/src/utils/routes";
import fg from "fast-glob";
import Handlebars from "handlebars";
import _ from "lodash";
import { sendEmailThroughBrevo } from "./brevo";
import { logger } from "./logger";

const getHbrTemplates = async () => {
  const htmlPathsPattern = path
    .resolve(__dirname, "../emails/dist/*.html")
    .replace(/\\/g, "/");
  // logger.log("emails", "htmlPathsPattern", htmlPathsPattern);
  const htmlPaths = fg.sync(htmlPathsPattern);
  const hbrTemplates: Record<string, HandlebarsTemplateDelegate> = {};
  for (const htmlPath of htmlPaths) {
    const templateName = path.basename(htmlPath, ".html");
    const htmlTemplate = await fs.readFile(htmlPath, "utf8");
    hbrTemplates[templateName] = Handlebars.compile(htmlTemplate);
  }
  // logger.info("emails", "Скомпилированные шаблоны:", Object.keys(hbrTemplates));
  return hbrTemplates;
};

const getEmailHtml = async (
  templateName: string,
  templateVariables: Record<string, string> = {},
) => {
  const hbrTemplates = await getHbrTemplates();
  const hbrTemplate = hbrTemplates[templateName];
  const html = hbrTemplate(templateVariables);
  return html;
};

const sendEmail = async ({
  to,
  subject,
  templateName,
  templateVariables = {},
}: {
  to: string;
  subject: string;
  templateName: string;
  templateVariables?: Record<string, any>;
}) => {
  try {
    const fullTemplateVaraibles = {
      ...templateVariables,
      homeUrl: env.WEBAPP_URL,
    };
    const html = await getEmailHtml(templateName, fullTemplateVaraibles);
    const { loggableResponse } = await sendEmailThroughBrevo({
      to,
      subject,
      html,
    });
    logger.info( "emails", "sendEmail", {
      to,
      templateName,
      templateVariables,
      response: loggableResponse,
    });
    return { ok: true };
  } catch (error) {
    logger.error("emails", error);
    return { ok: false };
  }
};

export const sendWelcomeEmail = async ({
  user,
}: {
  user: Pick<User, "nick" | "email">;
}) => {
  return await sendEmail({
    to: user.email,
    subject: "Thanks For Registration!",
    templateName: "welcome",
    templateVariables: {
      userNick: user.nick,
      addIdeaUrl: `${env.WEBAPP_URL}/${GetNewIdea}`,
    },
  });
};

export const sendIdeaBlockedEmail = async ({
  user,
  idea,
}: {
  user: Pick<User, "email">;
  idea: Pick<Idea, "nick">;
}) => {
  return await sendEmail({
    to: user.email,
    subject: "Your Idea Blocked!",
    templateName: "ideaBlocked",
    templateVariables: {
      ideaNick: idea.nick,
    },
  });
};

export const sendMostLikedIdeasEmail = async ({
  user,
  ideas,
}: {
  user: Pick<User, 'email'>
  ideas: Array<Pick<Idea, 'nick' | 'name'>>
}) => {
  return await sendEmail({
    to: user.email,
    subject: 'Most Liked Ideas!',
    templateName: 'mostLikedIdeas',
    templateVariables: {
      ideas: ideas.map((idea) => ({ name: idea.name, url: GetIdea({ abs: true, nick: idea.nick }) })),
    },
  })
}
</file>

<file path="backend/src/lib/trpc.ts">
import { inferAsyncReturnType, initTRPC } from "@trpc/server";
import * as trpcExpress from "@trpc/server/adapters/express";
import { type Express } from "express";
import { SuperJSON } from "superjson";
import { expressHandler } from "trpc-playground/handlers/express";
import { type TrpcRouter } from "../router";
import { ExpressRequest } from "../utils/types";
import { AppContext } from "./ctx";
import { ExpectedError } from "./error";
import { logger } from "./logger";

export const getTrpcContext = ({ appContext, req }: {appContext: AppContext, req: ExpressRequest}) => ({
  ...appContext,
  me: (req as ExpressRequest).user || null,
})


const getCreateTrpcContext =
  (appContext: AppContext) =>
  ({ req }: trpcExpress.CreateExpressContextOptions) =>
    getTrpcContext({ appContext, req: req as ExpressRequest })

type TrpcContext = inferAsyncReturnType<
  ReturnType<typeof getCreateTrpcContext>
>;

const trpc = initTRPC.context<TrpcContext>().create({
  transformer: SuperJSON,
  errorFormatter: ({shape, error}) => {
    const orginalError = error.cause as Error
    const expected = orginalError instanceof ExpectedError
    return {
      ...shape,
      data: {
        ...shape.data,
        expected
      }
    }
  }
});

export const createTrpcRouter = trpc.router

export const trpcLoggedProcedure = trpc.procedure.use(
  trpc.middleware(async ({ path, type, next, ctx, rawInput }) => {
    const start = Date.now()
    const result = await next()
    const durationMs = Date.now() - start
    const meta = {
      path,
      type,
      userId: ctx.me?.id || null,
      durationMs,
      rawInput: rawInput || null,
    }
    if (result.ok) {
      logger.info(`trpc:${type}:success`, 'Successfull request', { ...meta, output: result.data })
    } else {
      logger.error(`trpc:${type}:error`, result.error, meta)
    }
    return result
  })
)

export const ApplyTrpcToExpressApp = async (
  app: Express,
  ctx: AppContext,
  trpcRouter: TrpcRouter,
) => {
  app.use(
    "/trpc",
    trpcExpress.createExpressMiddleware({
      router: trpcRouter,
      createContext: getCreateTrpcContext(ctx),
    }),
  );

  app.use(
    "/trpc-playground",
    await expressHandler({
      trpcApiEndpoint: "/trpc",
      playgroundEndpoint: "/trpc-playground",
      router: trpcRouter,
      request: {
        superjson: true,
      },
    }),
  );
};
</file>

<file path="backend/src/prisma/schema.prisma">
generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id          String     @id @default(uuid())
    email       String     @unique
    nick        String     @unique
    name        String     @default("")
    avatar      String?
    password    String
    createdAt   DateTime   @default(now())
    ideas       Idea[]
    ideasLikes  IdeaLike[]
    permissions String[]
}

enum UserPermission {
    BLOCK_IDEAS
    ALL
}

model Idea {
    id           String     @id @default(uuid())
    serialNumber Int        @unique @default(autoincrement())
    nick         String     @unique
    name         String
    description  String
    images       String[]
    text         String
    certificate String?
    documents String[]
    createdAt    DateTime   @default(now())
    authorId     String
    author       User       @relation(fields: [authorId], references: [id])
    ideasLikes   IdeaLike[]
    blockedAt    DateTime?
}

model IdeaLike {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    idea      Idea     @relation(fields: [ideaId], references: [id])
    ideaId    String
    user      User     @relation(fields: [userId], references: [id])
    userId    String

    @@unique([ideaId, userId])
}
</file>

<file path="backend/src/router/auth/SignIn/index.ts">
import { ExpectedError } from "../../../lib/error";
import { trpcLoggedProcedure } from "../../../lib/trpc";
import { getPasswordHash } from "../../../utils/getPasswordHash";
import { signJWT } from "../../../utils/signJWT";
import { zSignIn } from "./input";

export const SignInTrpcRoute = trpcLoggedProcedure
  .input(zSignIn)
  .mutation(async ({ ctx, input }) => {
    const user = await ctx.prisma.user.findFirst({
      where: {
        nick: input.nick,
        password: getPasswordHash(input.password),
      },
    });
    if (!user) {
      throw new ExpectedError("Wrong nick or password");
    }
    const token = signJWT(user.id);
    return { token };
  });
</file>

<file path="backend/src/router/auth/SignUp/input.ts">
import { z } from "zod";

export const zSignUp = z.object({
  nick: z
    .string()
    .min(1)
    .max(30)
    .regex(
      /^[a-z0-9-]+$/,
      "Nick may contain only lowercase letters, numbers and dashes",
    ),
  email: z.string().email().min(1),
  password: z.string().min(5).max(30),
});
</file>

<file path="backend/src/router/auth/UpdatePassword/index.ts">
import { ExpectedError } from "../../../lib/error";
import { trpcLoggedProcedure } from "../../../lib/trpc";
import { getPasswordHash } from "../../../utils/getPasswordHash";
import { ZUpdatePassowordInput } from "./input";

export const updatePasswordTrpcRoute = trpcLoggedProcedure
  .input(ZUpdatePassowordInput)
  .mutation(async ({ ctx, input }) => {
    if (!ctx.me) {
      throw new Error("UNAUTHORIZED");
    }
    if (ctx.me.password !== getPasswordHash(input.oldPassword)) {
      throw new ExpectedError("Wrong old password");
    }
    const updatedMe = await ctx.prisma.user.update({
      where: {
        id: ctx.me.id,
      },
      data: {
        password: getPasswordHash(input.newPassword),
      },
    });
    ctx.me = updatedMe;
    return true;
  });
</file>

<file path="backend/src/router/auth/UpdateProfile/index.ts">
import { ExpectedError } from "../../../lib/error";
import { toClientMe } from "../../../lib/models";
import { trpcLoggedProcedure } from "../../../lib/trpc";
import { ZUpdateProfileInput } from "./input";

export const UpdateProfileTrpcRoute = trpcLoggedProcedure
  .input(ZUpdateProfileInput)
  .mutation(async ({ input, ctx }) => {
    if (!ctx.me) {
      throw new Error("UNAUTHORIZED");
    }
    if (ctx.me.nick !== input.nick) {
      const exUser = await ctx.prisma.user.findUnique({
        where: {
          nick: input.nick,
        },
      });
      if (exUser) {
        throw new ExpectedError("User with this nick already exists");
      }
    }
    const updatedMe = await ctx.prisma.user.update({
      where: {
        id: ctx.me.id,
      },
      data: input,
    });
    ctx.me = updatedMe;
    return toClientMe(updatedMe);
  });
</file>

<file path="backend/src/router/ideas/blockIdea/index.ts">
import { sendIdeaBlockedEmail } from "../../../lib/emails";
import { trpcLoggedProcedure } from "../../../lib/trpc";
import { canBlockIdeas } from "../../../utils/can";
import { zBlockIdeaInput } from "./input";

export const blockIdeaTrpcRoute = trpcLoggedProcedure
  .input(zBlockIdeaInput)
  .mutation(async ({ ctx, input }) => {
    const { ideaId } = input;
    if (!canBlockIdeas(ctx.me)) {
      throw new Error("PERMISSION_DENIED");
    }
    const idea = await ctx.prisma.idea.findUnique({
      where: {
        id: ideaId,
      },
      include: {
        author: true,
      },
    });
    if (!idea) {
      throw new Error("NOT_FOUND");
    }
    await ctx.prisma.idea.update({
      where: {
        id: ideaId,
      },
      data: {
        blockedAt: new Date(),
      },
    });
    void sendIdeaBlockedEmail({ user: idea.author, idea });
    return true;
  });
</file>

<file path="backend/src/router/ideas/blockIdea/input.ts">
import { zStringRequired } from "@stepik/shared/src/zod";
import { z } from "zod";

export const zBlockIdeaInput = z.object({
  ideaId: zStringRequired,
});
</file>

<file path="backend/src/router/ideas/CreateIdea/index.ts">
import { ExpectedError } from "../../../lib/error";
import { trpcLoggedProcedure } from "../../../lib/trpc";
import { zCreateIdeaTrpcInput } from "./input";

export const CreateIdeaTrpcRoute = trpcLoggedProcedure
  .input(zCreateIdeaTrpcInput)
  .mutation(async ({ input, ctx }) => {
    if (!ctx.me) {
      throw new Error("unathorised");
    }
    const idea = await ctx.prisma.idea.findUnique({
      where: {
        nick: input.nick,
      },
    });
    if (idea) {
      throw new ExpectedError("Idea with this nick already exists");
    }
    await ctx.prisma.idea.create({
      data: {
        ...input,
        author: {
          connect: {
            id: ctx.me.id,
          },
        },
      },
    });
    return true;
  });
</file>

<file path="backend/src/router/ideas/CreateIdea/input.ts">
import { zNickRequired, zStringMin, zStringRequired } from "@stepik/shared/src/zod";
import { z } from "zod";

export const zCreateIdeaTrpcInput = z.object({
  name: z.string().min(5).max(30),
  nick: zNickRequired,
  description: zStringRequired,
  text: zStringMin(100),
  images: z.array(zStringRequired),
  certificate: z.string().nullable(),
  documents: z.array(zStringRequired),
});
</file>

<file path="backend/src/router/ideas/getIdeas/input.ts">
import { z } from "zod";

export const zGetIdeasInput = z.object({
  cursor: z.coerce.number().optional(),
  limit: z.number().min(1).max(100).default(10),
  search: z.string().optional(),
});
</file>

<file path="backend/src/router/ideas/setIdeaLike/index.ts">
import { trpcLoggedProcedure } from "../../../lib/trpc";
import { zSetLikeInput } from "./input";

export const setIdeaLikeTrpcRoute = trpcLoggedProcedure
  .input(zSetLikeInput)
  .mutation(async ({ ctx, input }) => {
    const { ideaId, isLikedByMe } = input;
    if (!ctx.me) {
      throw new Error("UNAUTHORIZED");
    }
    const idea = await ctx.prisma.idea.findUnique({
      where: {
        id: ideaId,
      },
    });
    if (!idea) {
      throw new Error("NOT_FOUND");
    }
    if (isLikedByMe) {
      await ctx.prisma.ideaLike.upsert({
        where: {
          ideaId_userId: {
            ideaId,
            userId: ctx.me.id,
          },
        },
        create: {
          userId: ctx.me.id,
          ideaId,
        },
        update: {},
      });
    } else {
      await ctx.prisma.ideaLike.delete({
        where: {
          ideaId_userId: {
            ideaId,
            userId: ctx.me.id,
          },
        },
      });
    }
    const likesCount = await ctx.prisma.ideaLike.count({
      where: {
        ideaId,
      },
    });
    return {
      idea: {
        id: idea.id,
        likesCount,
        isLikedByMe,
      },
    };
  });
</file>

<file path="backend/src/router/ideas/UpdateIdea/index.ts">
import { ExpectedError } from "../../../lib/error";
import { trpcLoggedProcedure } from "../../../lib/trpc";
import { zUpdateInput } from "./input";

export const UpdateIdeaTrpcRoute = trpcLoggedProcedure
  .input(zUpdateInput)
  .mutation(async ({ ctx, input }) => {
    const { ideaId, ...ideaInput } = input;
    if (!ctx.me) {
      throw new Error("UNAUTHORIZED");
    }
    const idea = await ctx.prisma.idea.findUnique({
      where: {
        id: ideaId,
      },
    });
    if (!idea) {
      throw new Error("NOT_FOUND");
    }
    if (ctx.me.id !== idea.authorId) {
      throw new Error("NOT_YOUR_IDEA");
    }
    if (idea.nick !== input.nick) {
      const exIdea = await ctx.prisma.idea.findUnique({
        where: {
          nick: input.nick,
        },
      });
      if (exIdea) {
        throw new ExpectedError("Idea with this nick already exists");
      }
    }
    await ctx.prisma.idea.update({
      where: {
        id: ideaId,
      },
      data: {
        ...ideaInput,
      },
    });
    return true;
  });
</file>

<file path="backend/tsconfig.json">
{
  "ts-node": {
    "files": true,
    "transpile0nly": true
  },
  "compilerOptions": {
    "outDir": "./dist",
    "allowJs": true,
    "allowSyntheticDefaultImports": true,
    "downlevelIteration": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitAny": true,
    "skipLibCheck": true,
    "strict": true,
    "sourceMap": true,
    "resolveJsonModule": true,
    "inlineSources": true,
    "isolatedModules": false,
    "lib": ["ES2021"],
    "module": "commonjs",
    "moduleResolution": "Node",
    "target": "ES2021",
    // "paths": {
    //   "@stepik/web-stepik/*": ["../web-stepk/*"]
    // }
  },
  "include": ["src"]
}
</file>

<file path="stepik.session.sql">
WITH "topIdeas" as (
    SELECT "id", "nick", "name", (
        SELECT COUNT(*) FROM "IdeaLike" il
        WHERE il."ideaId" = i."id" AND il."createdAt" > NOW() - interval '1 month'
    ) as "TopMonthLikes"
    FROM "Idea" i
    WHERE i."blockedAt" is NULL
    ORDER BY "TopMonthLikes" DESC
    LIMIT 10
)
SELECT * FROM "topIdeas" WHERE "TopMonthLikes" > 0;
</file>

<file path="web-stepik/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
.env
</file>

<file path="web-stepik/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ideanick</title>
    <link rel="icon" type="image/png" href="/favicon-96x96.png" sizes="96x96" />
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  <link rel="shortcut icon" href="/favicon.ico" />
  <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
  <meta name="apple-mobile-web-app-title" content="MyWebSite" />
  <link rel="manifest" href="/site.webmanifest" />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="web-stepik/src/components/Alert/index.module.scss">
@use "../../styles/vars" as *;
@use "../../styles/mixins" as *;

.alert {
  padding: 10px;
  border-radius: $borderRadiusSmall;

  &.red {
    background-color: #ffd1d1;
    color: #631717;
  }

  &.green {
    background-color: #d7ffd7;
    color: #2b6d2b;
  }

  &.brown {
    background-color: #e9d5bd;
    color: #614f39;
  }
}
</file>

<file path="web-stepik/src/components/Button/index.module.scss">
@use 'sass:color';
@use "../../styles/vars" as *;
@use "../../styles/mixins" as *;

.button {
  max-width: 500px;
  padding: 8px 15px;
  color: $white;
  background-color: #0a980a;
  border: none;
  font-weight: bold;
  border-radius: $borderRadiusSmall;
  cursor: pointer;
  user-select: none;
  position: relative;

  &.color-green {
    background-color: #0a980a;

    &:hover {
      background-color: #21b821;
    }

    &:active {
      background-color: #39d039;
    }
  }

  &.color-red {
    background-color: $red;

    &:hover {
      background-color: color.scale($red, $lightness: 10%);
    }

    &:active {
      background-color: color.scale($red, $lightness: 30%);
    }
  }

  &.disabled {
    pointer-events: none;
    background-color: #929292;
    color: #d9d9d9;
  }

  &.loading {
    @include loader($borderWidth: 3px, $size: 20px, $color: $white);

    .text {
      opacity: 0;
    }
  }
}

.buttons {
  margin-right: -5px;

  & > * {
    margin-right: 5px;
  }
}
</file>

<file path="web-stepik/src/components/Button/index.tsx">
import cn from "classnames";
import css from "./index.module.scss";
import { Link } from "react-router-dom";

type ButtonColor = "green" | "red"
export type ButtonProps = {
  children: React.ReactNode
  loading?: boolean
  color?: ButtonColor
  type?: 'button' | 'submit'
  disabled?: boolean
  onClick?: () => void
}
export const Button = ({
  children,
  loading = false,
  color = 'green',
  type = 'submit',
  disabled,
  onClick,
}: ButtonProps) => {
  return (
    <button
      className={cn({
        [css.button]: true,
        [css.disabled]: disabled || loading,
        [css.loading]: loading,
        [css[`color-${color}`]]: true,
      })}
      type={type}
      disabled={disabled || loading}
      onClick={onClick}
    >
      <span className={css.text}>{children}</span>
    </button>
  );
};

export const LinkButton = ({
  children,
  to,
  color = "green"
}: {
  children: React.ReactNode,
  to: string,
  color: ButtonColor,
}) => {
  return (
    <Link className={cn({ [css.button]: true, [css[`color-${color}`]]: true})} to={to}>
      {children}
    </Link>
  );
};

export const Buttons = ({ children }: { children: React.ReactNode }) => {
  return <div className={css.buttons}>{children}</div>
}
</file>

<file path="web-stepik/src/components/ErrorPageComponent/index.tsx">
import { Alert } from "../Alert";
import { Segment } from "../Segments";

export const ErrorPageComponent = ({
  title = "Oops, error",
  message = "Something went wrong",
  children,
}: {
  title?: string;
  message?: string;
  children?: React.ReactNode;
}) => {
  return (
    <Segment title={title}>
      <Alert color="red">{message}</Alert>
      {children}
    </Segment>
  );
};
</file>

<file path="web-stepik/src/main.tsx">
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import { App } from "d:/web/stepik/web-stepik/src/App";

createRoot(document.getElementById("root")!).render(
  <StrictMode>
    <App />
  </StrictMode>,
);
</file>

<file path="web-stepik/src/pages/auth/SignInPage/index.tsx">
import { zSignIn } from "@stepik/backend/src/router/auth/signIn/input";
import { Alert } from "../../../components/Alert";
import { Button } from "../../../components/Button";
import { FormItems } from "../../../components/FormItems";
import { Input } from "../../../components/input";
import Cookie from "js-cookie";
import { Segment } from "../../../components/Segments";
import trpc from "../../../utils/trpc";
import { useForm } from "../../../components/Form";
import { withPageWrapper } from "../../../utils/pageWrapper";

export const SignInPage = withPageWrapper({
  redirectAuthorized: true,
  title: "Sign In"
})(() => {
  //const navigate = useNavigate()
  const trpcUtils = trpc.useUtils();
  const signIn = trpc.SignIn.useMutation();
  const { formik, alertProps, buttonProps } = useForm({
    initialValues: {
      nick: "",
      password: "",
    },
    validationSchema: zSignIn,
    successMessage: "idea created",
    showValidationAlert: true,
    onSubmit: async (values) => {
      const { token } = await signIn.mutateAsync(values);
      Cookie.set("token", token, { expires: 99999 });
      void trpcUtils.invalidate();
    },
  });

  return (
    <Segment title="Sign In">
      <form onSubmit={formik.handleSubmit}>
        <FormItems>
          <Input label="Nick" name="nick" formik={formik} />
          <Input
            label="Password"
            name="password"
            type="password"
            formik={formik}
          />
          <Alert {...alertProps} />
          <Button {...buttonProps}>Sign In</Button>
        </FormItems>
      </form>
    </Segment>
  );
});
</file>

<file path="web-stepik/src/pages/auth/SignUpPage/index.tsx">
import { zSignUp } from "@stepik/backend/src/router/auth/SignUp/input";
import { z } from "zod";
import { Alert } from "../../../components/Alert";
import { Button } from "../../../components/Button";
import { FormItems } from "../../../components/FormItems";
import { Segment } from "../../../components/Segments";
import Cookie from "js-cookie";
import { useForm } from "../../../components/Form";
import { Input } from "../../../components/input";
import trpc from "../../../utils/trpc";
import { withPageWrapper } from "../../../utils/pageWrapper";

export const SignUpPage = withPageWrapper({
  redirectAuthorized: true,
  title: "Sign Up",
})(() => {
  //const navigate = useNavigate()
  const trpcUtils = trpc.useUtils();

  const signUp = trpc.SignUp.useMutation();
  const { formik, buttonProps, alertProps } = useForm({
    initialValues: {
      nick: "",
      email: "",
      password: "",
      passwordAgain: "",
    },
    validationSchema: zSignUp
      .extend({
        passwordAgain: z.string().min(1),
      })
      .superRefine((val, ctx) => {
        if (val.password !== val.passwordAgain) {
          ctx.addIssue({
            code: z.ZodIssueCode.custom,
            message: "Passwords must be the same",
            path: ["passwordAgain"],
          });
        }
      }),

    onSubmit: async (values) => {
      const { token } = await signUp.mutateAsync(values);
      Cookie.set("token", token, { expires: 99999 });
      void trpcUtils.invalidate();
    },
    resetOnSuccess: false,
  });
  return (
    <Segment title="Sign Up">
      <form onSubmit={formik.handleSubmit}>
        <FormItems>
          <Input label="Nick" name="nick" formik={formik} />
          <Input label="Email" name="email" formik={formik} />
          <Input
            label="Password"
            name="password"
            type="password"
            formik={formik}
          />
          <Input
            label="Password again"
            name="passwordAgain"
            type="password"
            formik={formik}
          />
          <Alert {...alertProps} />
          <Button {...buttonProps}>Sign Up</Button>
        </FormItems>
      </form>
    </Segment>
  );
});
</file>

<file path="web-stepik/src/pages/ideas/AllIdeas/index.tsx">
import { Link } from "react-router-dom";
import trpc from "../../../utils/trpc";
import { GetIdea } from "../../../utils/routes";
import css from "./index.module.scss";
import { Segment } from "../../../components/Segments";
import { Alert } from "../../../components/Alert";
import InfiniteScroll from "react-infinite-scroller";
import { LayoutContentElRef } from "../../../components/layout";
import { Loader } from "../../../components/Loader";
import { useForm } from "../../../components/Form";
import { zGetIdeasInput } from "@stepik/backend/src/router/ideas/getIdeas/input";
import { Input } from "../../../components/input";
import { useDebounceValue } from "usehooks-ts";
import { Helmet } from "react-helmet-async";

function AllIdeas() {
  const { formik } = useForm({
    initialValues: {
      search: "",
    },
    validationSchema: zGetIdeasInput.pick({ search: true }),
  });
  const [search, t] = useDebounceValue(formik.values.search, 500);
  void t
  const {
    data,
    error,
    isLoading,
    isError,
    hasNextPage,
    isFetchingNextPage,
    fetchNextPage,
    isRefetching,
  } = trpc.getIdeas.useInfiniteQuery(
    {
      search: search ?? "",
    },
    {
      getNextPageParam: (lastPage) => lastPage.nextCursor,
    }
  );
  if (isLoading) {
    return <Loader type="page" />;
  }

  return (
    <div>
      <Helmet>
        <title>All ideas</title>
      </Helmet>
      <Segment title="All ideas">
        <div>
          <Input
            formik={formik}
            maxWidth={"100%"}
            label="search"
            name="search"
          ></Input>
        </div>
        {isLoading && isRefetching ? (
          <Loader type="page" />
        ) : isError ? (
          <Alert color="red">{error.message}</Alert>
        ) : !data.pages[0].ideas.length ? (
          <Alert color="brown">No ideas found</Alert>
        ) : (
          <div className={css.ideas}>
            <InfiniteScroll
              threshold={250}
              loadMore={() => {
                if (hasNextPage && !isFetchingNextPage) {
                  fetchNextPage();
                }
              }}
              hasMore={hasNextPage}
              loader={
                <div className={css.more} key="loader">
                  <Loader type="section" />
                </div>
              }
              getScrollParent={() => LayoutContentElRef.current}
              useWindow={
                (LayoutContentElRef.current &&
                  getComputedStyle(LayoutContentElRef.current).overflow) !==
                "auto"
              }
            >
              {data.pages
                .flatMap((page) => page.ideas)
                .map((idea) => (
                  <div className={css.idea} key={idea.nick}>
                    <Segment
                      size={2}
                      title={
                        <Link
                          className={css.ideaLink}
                          to={GetIdea({ nick: idea.nick })}
                        >
                          {idea.name}
                        </Link>
                      }
                      description={idea.description}
                    >
                      Likes: {idea.likesCount}
                    </Segment>
                  </div>
                ))}
            </InfiniteScroll>
          </div>
        )}
      </Segment>
    </div>
  );
}

export default AllIdeas;
</file>

<file path="web-stepik/src/pages/ideas/NewIdeaPage/index.tsx">
//import css from './style.module.scss'
import { Segment } from "../../../components/Segments";
import { Input } from "../../../components/input";
import trpc from "../../../utils/trpc";
import { zCreateIdeaTrpcInput } from "@stepik/backend/src/router/ideas/CreateIdea/input";
import { Alert } from "../../../components/Alert";
import { Button } from "../../../components/Button";
import { FormItems } from "../../../components/FormItems";
import { useForm } from "../../../components/Form";
import { withPageWrapper } from "../../../utils/pageWrapper";
import { Textarea } from "../../../components/textarea";
import { UploadsToCloudinary } from "../../../components/UploadMoreToCloudinary";
import { UploadToS3 } from "../../../components/uploadToS3";
import { UploadsToS3 } from "../../../components/UploadsToS3";

export const NewIdeaPage = withPageWrapper({
  authorizedOnly: true,
  title: "new idea"
})(() => {
  const createIdea = trpc.CreateIdea.useMutation();

  const { formik, buttonProps, alertProps } = useForm({
    initialValues: {
      name: "",
      nick: "",
      description: "",
      text: "",
      images: [],
      certificate: "",
      documents: [],
    },
    validationSchema: zCreateIdeaTrpcInput,
    onSubmit: async (values) => {
      await createIdea.mutateAsync(values);
      formik.resetForm();
    },
    successMessage: "Idea created!",
    showValidationAlert: true,
  });

  return (
    <>
      <Segment title="New Idea">
        <form
          onSubmit={(e) => {
            e.preventDefault();
            formik.handleSubmit();
          }}
        >
          <FormItems>
            <Input name="name" label="Name" formik={formik} />
            <Input name="nick" label="Nick" formik={formik} />
            <Input name="description" label="Description" formik={formik} />
            <Textarea name="text" label="Text" formik={formik} />
            <Alert {...alertProps} />
            <UploadsToCloudinary label={"Imgaes"} name={"Images"} formik={formik} type={"image"} preset={"preview"} />
            <UploadToS3 label="Certificate" name="certificate" formik={formik} />
            <UploadsToS3 label="Documents" name="documents" formik={formik} />
            <Button {...buttonProps}>Create Idea</Button>
          </FormItems>
        </form>
      </Segment>
    </>
  );
});
</file>

<file path="web-stepik/src/pages/ideas/ViewIdea/index.module.scss">
@use "../../../styles/vars" as *;
@use "../../../styles/mixins" as *;

.title {
  @include h1;
  margin-bottom: 2px;
}

.description {
  font-size: 18px;
  margin-bottom: 20px;
}

.text {
  font-size: 14px;

  & > *:not(:first-child) {
    margin-top: 10px;
  }
}

.createdAt {
  font-size: 12px;
  margin-bottom: 10px;
}

.author {
  display: flex;
  flex-flow: row nowrap;
  margin: 10px 0;
  align-items: center;

  .avatar {
    flex: 0 0 100px;
    width: 100px;
    height: 100px;
    border-radius: 50%;
  }

  .name {
    flex: 1 1 100%;
    font-weight: bold;
    font-size: 16px;
    margin-bottom: 20px;
    margin-left: 10px;
  }
}

.editButton {
  margin-top: 20px;
}

.likes {
  margin-top: 20px;

  .likeButton {
    @include link;
  }
}
.documents {
  margin: 10px 0;

  .documentLink {
    @include link;
  }
}
</file>

<file path="web-stepik/src/pages/ideas/ViewIdea/index.tsx">
import { format } from "date-fns/format";
import { Button, LinkButton } from "../../../components/Button";
import { Segment } from "../../../components/Segments";
import { getEditIdeaRoute, GetIdea } from "../../../utils/routes";
import trpc from "../../../utils/trpc";
import css from "./index.module.scss";
import { withPageWrapper } from "../../../utils/pageWrapper";
import { TrpcRouterOutput } from "@stepik/backend/src/router";
import { useForm } from "../../../components/Form";
import { FormItems } from "../../../components/FormItems";
import { Alert } from "../../../components/Alert";
import { canBlockIdeas } from "@stepik/backend/src/utils/can";
import { Icon } from "../../../components/Icon";
import { getAvatarUrl, getCloudinaryUploadUrl } from "@stepik/shared/src/cloudinary";
import ImageGallery from 'react-image-gallery'
import { Fragment } from 'react'
import { getS3UploadName, getS3UploadUrl } from "@stepik/shared/src/s3";


const LikeButton = ({ idea }: { idea: NonNullable<TrpcRouterOutput['getIdea']['idea']> }) => {
  const trpcUtils = trpc.useUtils()
  const setIdeaLike = trpc.setIdeaLike.useMutation({
    onMutate: ({ isLikedByMe }) => {
      const oldGetIdeaData = trpcUtils.getIdea.getData({ nick: idea.nick })
      if (oldGetIdeaData?.idea) {
        const newGetIdeaData = {
          ...oldGetIdeaData,
          idea: {
            ...oldGetIdeaData.idea,
            isLikedByMe,
            likesCount: oldGetIdeaData.idea.likesCount + (isLikedByMe ? 1 : -1),
          },
        }
        trpcUtils.getIdea.setData({ nick: idea.nick }, newGetIdeaData)
      }
    },
    onSuccess: () => {
      void trpcUtils.getIdea.invalidate({ nick: idea.nick })
    },
  })
  return (
    <button
      className={css.likeButton}
      onClick={() => {
        void setIdeaLike.mutateAsync({ ideaId: idea.id, isLikedByMe: !idea.isLikedByMe })
      }}
    >
      <Icon size={32} className={css.likeButton} name={idea.isLikedByMe ? 'UnfilledLike' : 'FilledLike'}></Icon>
    </button>
  )
}

const BlockIdea = ({ idea }: { idea: NonNullable<TrpcRouterOutput['getIdea']['idea']> }) => {
  const blockIdea = trpc.blockIdea.useMutation()
  const trpcUtils = trpc.useUtils()
  const { formik, alertProps, buttonProps } = useForm({
    onSubmit: async () => {
      await blockIdea.mutateAsync({ ideaId: idea.id })
      await trpcUtils.getIdea.refetch({ nick: idea.nick })
    },
  })
  return (
    <form onSubmit={formik.handleSubmit}>
      <FormItems>
        <Alert {...alertProps} />
        <Button {...buttonProps}>
          Block Idea
        </Button>
      </FormItems>
    </form>
  )
}


const ViewIdeaPage = withPageWrapper({
  useQuery: () => {
    const { nick } = GetIdea.useParams();
    return trpc.getIdea.useQuery({
      nick,
    });
  },
  setProps: ({ queryResult, checkExists, ctx }) => ({
    idea: checkExists(queryResult.data.idea, "Idea not found"),
    me: ctx.me,
  }),
  title: ({idea}) => (idea.name),
  showLoadingOnFetching: false,
})(({ idea, me }) => {
  return (
    <Segment title={idea.name} description={idea.description}>
      <div className={css.createdAt}>
        Created At: {format(idea.createdAt, "yyyy-MM-dd")}
      </div>
      <div className={css.author}>
      <img className={css.avatar} alt="" src={getAvatarUrl(idea.author.avatar, 'small')} />
      <div className={css.name}>
        Author: {idea.author.nick}
        {idea.author.name ? ` (${idea.author.name})` : ""}
      </div>
      {!!idea.images.length && (
      <div className={css.gallery}>
        <ImageGallery
          showPlayButton={false}
          showFullscreenButton={false}
          items={idea.images.map((image: string) => ({
            original: getCloudinaryUploadUrl(image, 'image', 'large'),
            thumbnail: getCloudinaryUploadUrl(image, 'image', 'preview'),
          }))}
        />
      </div>
    )}
    {!!idea.documents.length && (
      <div className={css.documents}>
        Documents:{' '}
        {idea.documents.map((document) => (
          <Fragment key={document}>
            <br />
            <a className={css.documentLink} target="_blank" href={getS3UploadUrl(document)} rel="noreferrer">
              {getS3UploadName(document)}
            </a>
          </Fragment>
        ))}
      </div>
    )}
      <div
        className={css.text}
        dangerouslySetInnerHTML={{ __html: idea.text }}
      />
      </div>
      <div className={css.likes}>
      Likes: {idea.likesCount}
      {me && (
        <>
          <br />
          <LikeButton idea={idea} />
        </>
      )}
    </div>
      {me?.id === idea.authorId && (
        <div className={css.editButton}>
          <LinkButton to={getEditIdeaRoute({ nick: idea.nick })} color="red">
            Edit Idea
          </LinkButton>
        </div>
      )}
      {canBlockIdeas(me) && (
      <div className={css.blockIdea}>
        <BlockIdea idea={idea} />
      </div>
    )}
    </Segment>
  );
});

export default ViewIdeaPage;
</file>

<file path="web-stepik/src/pages/other/NotFoundPage/index.tsx">
import { ErrorPageComponent } from "../../../components/ErrorPageComponent";
import img404 from "../../../assets/images/404-not-found.png"
import css from "./index.module.scss";

export const NotFoundPage = ({
  title = "Not Found",
  message = "This page does not exist",
}: {
  title?: string;
  message?: string;
}) => <ErrorPageComponent title={title} message={message}>
    <img src={img404} className={css.img404} alt="not found" width={800} height={600}/>
  </ErrorPageComponent>
  ;
</file>

<file path="web-stepik/src/styles/_mixins.scss">
@use "sass:math";
@use "./vars" as vars;
@use "../../node_modules/include-media/dist/include-media" as *;

@mixin link($color: vars.$blue, $hoverColor: vars.$red) {
  color: $color;
  transition: color 200ms ease;
  background: none;
  border: none;
  padding: 0;
  cursor: pointer;
  text-decoration: underline;

  &:hover,
  &:active {
    color: $hoverColor;
    transition: none;
  }
}

@mixin h1 {
  font-size: 30px;
  font-weight: bold;
}

@mixin h2 {
  font-size: 24px;
  font-weight: bold;
}

@mixin loader($borderWidth, $size, $color) {
  &:after {
    content: "";
    border-radius: 50%;
    display: block;
    position: absolute;
    left: 50%;
    top: 50%;
    text-indent: -9999em;
    transform: translateZ(0);
    animation: spin 1.1s infinite linear;
    border-top: $borderWidth solid rgba($color, 0.2);
    border-right: $borderWidth solid rgba($color, 0.2);
    border-bottom: $borderWidth solid rgba($color, 0.2);
    border-left: $borderWidth solid $color;
    width: $size;
    height: $size;
    margin-left: math.div(-$size, 2);
    margin-top: math.div(-$size, 2);
  }
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
}
</file>

<file path="web-stepik/src/utils/ctx.tsx">
import type { TrpcRouterOutput } from "@stepik/backend/src/router";
import { createContext, useContext } from "react";
import trpc from "./trpc";
import { Loader } from "../components/Loader";

export type AppContext = {
  me: TrpcRouterOutput["getMe"]["me"];
};

const AppReactContext = createContext<AppContext>({
  me: null,
});

export const AppContextProvider = ({
  children,
}: {
  children: React.ReactNode;
}) => {
  const { data, error, isLoading, isFetching, isError } = trpc.getMe.useQuery();
  return (
    <AppReactContext.Provider
      value={{
        me: data?.me || null,
      }}
    >
      {isLoading || isFetching ? (
        <Loader type="page" />
      ) : isError ? (
        <p>Error: {error?.message}</p>
      ) : (
        children
      )}
    </AppReactContext.Provider>
  );
};

export const useAppContext = () => {
  return useContext(AppReactContext);
};

export const useMe = () => {
  const { me } = useAppContext();
  return me;
};
</file>

<file path="web-stepik/src/vite-env.d.ts">
/// <reference types="vite/client" />
/// <reference types="vite-plugin-svgr/client" />
</file>

<file path="web-stepik/tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src", "src/components/layout", "src/components/Segments"]
}
</file>

<file path="web-stepik/tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
</file>

<file path="web-stepik/tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,
    "jsx": "react-jsx",
    /* Bundler mode */
    "moduleResolution": "bundler",
    "isolatedModules": true,
    "moduleDetection": "force",
    //"noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true,
    "composite": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="backend/src/lib/env.ts">
import fs from 'fs'
import path from 'path';
import {zEnvNonemptyTrimmed, zEnvNonemptyTrimmedRequiredOnNotLocal} from '@stepik/shared/src/zod'
import * as dotenv from "dotenv";
import { z } from "zod";


const findEnvFilePath = (dir: string): string | null => {
  const maybeEnvFilePath = path.join(dir, '.env')
  if (fs.existsSync(maybeEnvFilePath)) {
    return maybeEnvFilePath
  }
  if (dir === '/') {
    return null
  }
  return findEnvFilePath(path.dirname(dir))
}
const envFilePath = findEnvFilePath(__dirname)
if (envFilePath) {
  dotenv.config({ path: envFilePath, override: true })
  dotenv.config({ path: `${envFilePath}.${process.env.NODE_ENV}`, override: true })
}


const zEnv = z.object({
  NODE_ENV: z.enum(['development', 'prduction', 'test']),
  PORT: zEnvNonemptyTrimmed,
  DATABASE_URL: zEnvNonemptyTrimmed.refine((val) => {
    if (process.env.NODE_ENV !== 'test') {
      return true
    }
    const [databaseUrl] = val.split('?')
    const [databaseName] = databaseUrl.split('/').reverse()
    return databaseName.endsWith('-test')
  }, `Data base name should ends with "-test" on test environment`),
  HOST_ENV: z.enum(['local', 'production']).default('local'),
  JWT_SECRET: zEnvNonemptyTrimmed,
  PASSWORD_SALT:zEnvNonemptyTrimmed,
  INITIAL_ADMIN_PASSWORD:zEnvNonemptyTrimmed,
  WEBAPP_URL: zEnvNonemptyTrimmed,
  BREVO_API_KEY: zEnvNonemptyTrimmedRequiredOnNotLocal,
  FROM_EMAIL_NAME: zEnvNonemptyTrimmed,
  FROM_EMAIL_ADDRESS: zEnvNonemptyTrimmed,
  DEBUG: z
  .string()
  .optional()
  .refine(
    (val) => process.env.HOST_ENV === 'local' || process.env.NODE_ENV !== 'production' || (!!val && val.length > 0),
    'Required on not local host on production'
  ),
  BACKEND_SENTRY_DSN: zEnvNonemptyTrimmedRequiredOnNotLocal,
  SOURCE_VERSION: zEnvNonemptyTrimmed,
  SENTRY_AUTH_TOKEN: zEnvNonemptyTrimmedRequiredOnNotLocal,
  CLOUDINARY_CLOUD_NAME: zEnvNonemptyTrimmed,
  CLOUDINARY_API_KEY: zEnvNonemptyTrimmedRequiredOnNotLocal,
  CLOUDINARY_API_SECRET: zEnvNonemptyTrimmedRequiredOnNotLocal,
  S3_ACCESS_KEY_ID: zEnvNonemptyTrimmedRequiredOnNotLocal,
  S3_SECRET_ACCESS_KEY: zEnvNonemptyTrimmedRequiredOnNotLocal,
  S3_BUCKET_NAME: zEnvNonemptyTrimmedRequiredOnNotLocal,
  S3_REGION: zEnvNonemptyTrimmedRequiredOnNotLocal,
  S3_URL: zEnvNonemptyTrimmed,
});

export const env = zEnv.parse(process.env);
</file>

<file path="backend/src/lib/models.ts">
import { type User } from "@prisma/client";
import {pick} from "@stepik/shared/src/pick"

export const toClientMe = (user: User | null) => {
  return user && pick(user, ["id", "nick", "name", "permissions", "email", "avatar"]);
};
</file>

<file path="backend/src/router/auth/SignUp/index.ts">
import { sendWelcomeEmail } from "../../../lib/emails";
import { ExpectedError } from "../../../lib/error";
import { trpcLoggedProcedure } from "../../../lib/trpc";
import { getPasswordHash } from "../../../utils/getPasswordHash";
import { signJWT } from "../../../utils/signJWT";
import { zSignUp } from "./input";

export const SignUpTrpcRoute = trpcLoggedProcedure
  .input(zSignUp)
  .mutation(async ({ input, ctx }) => {
    const exuser = await ctx.prisma.user.findUnique({
      where: {
        nick: input.nick,
      },
    });
    const exemail = await ctx.prisma.user.findUnique({
      where: {
        email: input.email,
      },
    });
    if (exemail) {
      throw new ExpectedError("User with this email already exists");
    }
    if (exuser) {
      throw new ExpectedError("User with this nick already exists");
    }
    const user = await ctx.prisma.user.create({
      data: {
        nick: input.nick,
        email: input.email,
        password: getPasswordHash(input.password),
      },
    });
    void sendWelcomeEmail({user});
    const token = signJWT(user.id);
    return { token };
  });
</file>

<file path="backend/src/router/ideas/getIdea/index.ts">
import _ from "lodash";
import { z } from "zod";
// import { ideas } from "../../lib/ideas";
import { ExpectedError } from "../../../lib/error";
import { trpcLoggedProcedure } from "../../../lib/trpc";

export const getIdeaTrpcRoute = trpcLoggedProcedure
  .input(
    z.object({
      nick: z.string(),
    }),
  )
  .query(async ({ input, ctx }) => {
    // const idea = ideas.find((idea) => idea.nick === input.nick);
    // return { idea: idea || null };
    const rawIdea = await ctx.prisma.idea.findUnique({
      where: {
        nick: input.nick,
      },
      include: {
        author: {
          select: {
            nick: true,
            id: true,
            name: true,
            avatar: true,
            
          },
        },
      ideasLikes: {
        select: {
          id: true,
        },
        where: {
          userId: ctx.me?.id,
        },
      },
      _count: {
        select: {
          ideasLikes: true,
        },
      },
    },
    });
    if (!rawIdea) {
      throw new Error('NOT_FOUND')
    }
    if (rawIdea.blockedAt) {
      throw new ExpectedError('Idea is blocked by admin')
    }
    const isLikedByMe = !!rawIdea?.ideasLikes.length
    const likesCount = rawIdea?._count.ideasLikes || 0
    const idea = rawIdea && { ..._.omit(rawIdea, ['ideasLikes', '_count']), isLikedByMe, likesCount }

    return { idea }
  });
</file>

<file path="backend/src/router/ideas/getIdeas/index.ts">
import {omit} from "@stepik/shared/src/omit"
import _ from "lodash";
import { trpcLoggedProcedure } from "../../../lib/trpc";
import { zGetIdeasInput } from "./input";

export const getIdeasTrpcRoute = trpcLoggedProcedure
  .input(zGetIdeasInput)
  .query(async ({ ctx, input }) => {
    //const normalizedSearch = input.search ? input.search.trim().replace(/[\s\n\t]/g, ' & ') : undefined
    const normalizedSearch = input.search ? input.search.trim().replace(/[\s\n\t]/g, '_') : undefined
    const rawIdeas = await ctx.prisma.idea.findMany({
      select: {
        id: true,
        nick: true,
        name: true,
        description: true,
        serialNumber: true,
        _count: {
          select: {
            ideasLikes: true
          },
        },
      },
      where: {
        blockedAt: null,
        ...(!normalizedSearch ? {} : {
          OR: [
            {
              name: {
                search: normalizedSearch,
              },
            },
            {
              description: {
                search: normalizedSearch,
              },
            },
            {
              text: {
                search: normalizedSearch,
              },
            },
          ],
        })
      },
      orderBy: [
        {
          createdAt: "desc",
        },
        {
          serialNumber: "desc",
        },
      ],
      cursor: input.cursor ? { serialNumber: input.cursor } : undefined,
      take: input.limit + 1,
    });
    const nextIdea = rawIdeas.at(input.limit);
    const nextCursor = nextIdea?.serialNumber;
    const rawIdeasExceptNext = rawIdeas.slice(0, input.limit);
    const ideasExceptNext = rawIdeasExceptNext.map((idea) => ({
      ...omit(idea, ["_count"]),
      likesCount: idea._count.ideasLikes
    })
  )
  
    return { ideas: ideasExceptNext, nextCursor };
  });
</file>

<file path="backend/src/router/index.ts">
import { type inferRouterInputs, type inferRouterOutputs } from "@trpc/server";
import _ from "lodash";
import { createTrpcRouter} from "../lib/trpc";
// @index('./**/index.ts', f => `import { ${f.path.split('/').slice(0, -1).pop()}TrpcRoute } from '${f.path.split('/').slice(0, -1).join('/')}'`)
import { SignInTrpcRoute } from './auth/SignIn'
import { SignUpTrpcRoute } from './auth/SignUp'
import { updatePasswordTrpcRoute } from './auth/UpdatePassword'
import { UpdateProfileTrpcRoute } from './auth/UpdateProfile'
import { getMeTrpcRoute } from './auth/getMe'
import { CreateIdeaTrpcRoute } from './ideas/CreateIdea'
import { UpdateIdeaTrpcRoute } from './ideas/UpdateIdea'
import { blockIdeaTrpcRoute } from './ideas/blockIdea'
import { getIdeaTrpcRoute } from './ideas/getIdea'
import { getIdeasTrpcRoute } from './ideas/getIdeas'
import { setIdeaLikeTrpcRoute } from './ideas/setIdeaLike'
import { prepareCloudinaryUploadTrpcRoute } from './upload/prepareCLoudinaryUpload'
import { prepareS3UploadTrpcRoute } from './upload/prepareS3Upload'
// @endindex

export const trpcRouter = createTrpcRouter({
  // @index('./**/index.ts', f => `${f.path.split('/').slice(0, -1).pop()}: ${f.path.split('/').slice(0, -1).pop()}TrpcRoute,`)
  getMe: getMeTrpcRoute,
  SignIn: SignInTrpcRoute,
  SignUp: SignUpTrpcRoute,
  UpdatePassword: updatePasswordTrpcRoute,
  UpdateProfile: UpdateProfileTrpcRoute,
  blockIdea: blockIdeaTrpcRoute,
  CreateIdea: CreateIdeaTrpcRoute,
  getIdea: getIdeaTrpcRoute,
  getIdeas: getIdeasTrpcRoute,
  setIdeaLike: setIdeaLikeTrpcRoute,
  UpdateIdea: UpdateIdeaTrpcRoute,
  prepareCLoudinaryUpload: prepareCloudinaryUploadTrpcRoute,
  prepareS3Upload: prepareS3UploadTrpcRoute,
  // @endindex
});

export type TrpcRouter = typeof trpcRouter;
export type TrpcRouterInput = inferRouterInputs<TrpcRouter>;
export type TrpcRouterOutput = inferRouterOutputs<TrpcRouter>;
</file>

<file path="pnpm-workspace.yaml">
packages:
  - "web-stepik"
  - "backend"
  - "shared"
</file>

<file path="web-stepik/src/components/Form/index.tsx">
import { type FormikHelpers, useFormik } from "formik";
import { withZodSchema } from "formik-validator-zod";
import { useMemo, useState } from "react";
import { type z } from "zod";
import { type AlertProps } from "../Alert";
import { type ButtonProps } from "../Button";
import { sentryCaptureException } from '../../utils/sentry'
import { TRPCClientError } from '@trpc/client'

export const useForm = <TZodSchema extends z.ZodTypeAny>({
  successMessage = false,
  resetOnSuccess = true,
  showValidationAlert = false,
  initialValues = {},
  validationSchema,
  onSubmit,
}: {
  successMessage?: string | false;
  resetOnSuccess?: boolean;
  showValidationAlert?: boolean;
  initialValues?: z.infer<TZodSchema>;
  validationSchema?: TZodSchema;
  onSubmit?: (
    values: z.infer<TZodSchema>,
    actions: FormikHelpers<z.infer<TZodSchema>>,
  ) => Promise<any> | any;
}) => {
  const [successMessageVisible, setSuccessMessageVisible] = useState(false);
  const [submittingError, setSubmittingError] = useState<Error | null>(null);

  const formik = useFormik<z.infer<TZodSchema>>({
    initialValues,
    ...(validationSchema && { validate: withZodSchema(validationSchema) }),
    onSubmit: async (values, formikHelpers) => {
      try {

        if(!onSubmit) {
          return
        }

        setSubmittingError(null);
        await onSubmit(values, formikHelpers);
        if (resetOnSuccess) {
          formik.resetForm();
        }
        setSuccessMessageVisible(true);
        setTimeout(() => {
          setSuccessMessageVisible(false);
        }, 3000);
      } catch (error: any) {
        if (!(error instanceof TRPCClientError)) {
          sentryCaptureException(error)
        }
        setSubmittingError(error);
      }
    },
  });

  const alertProps = useMemo<AlertProps>(() => {
    if (submittingError) {
      return {
        hidden: false,
        children: submittingError.message,
        color: "red",
      };
    }
    if (showValidationAlert && !formik.isValid && !!formik.submitCount) {
      return {
        hidden: false,
        children: "Some fields are invalid",
        color: "red",
      };
    }
    if (successMessageVisible && successMessage) {
      return {
        hidden: false,
        children: successMessage,
        color: "green",
      };
    }
    return {
      color: "red",
      hidden: true,
      children: null,
    };
  }, [
    submittingError,
    formik.isValid,
    formik.submitCount,
    successMessageVisible,
    successMessage,
    showValidationAlert,
  ]);

  const buttonProps = useMemo<Omit<ButtonProps, "children">>(() => {
    return {
      loading: formik.isSubmitting,
      color: formik.isValid ? "green" : "red",
      disabled: !formik.isValid || formik.isSubmitting,
    };
  }, [formik.isSubmitting]);

  return {
    formik,
    alertProps,
    buttonProps,
  };
};
</file>

<file path="web-stepik/src/components/input/index.tsx">
import { FormikProps } from "formik";
import css from "./index.module.scss";
import cn from "classnames";

export const Input = ({
  name,
  label,
  formik,
  maxWidth,
  type = "text",
}: {
  name: string;
  label: string;
  formik: FormikProps<any>;
  maxWidth?: number | string;
  type?: string;
}) => {
  const value = formik.values[name];
  const error = formik.errors[name] as string | undefined;
  const touched = formik.touched[name] as boolean | undefined;
  const disabled = formik.isSubmitting;
  const invalid = error && touched;

  return (
    <div className={cn({ [css.field]: true, [css.disabled]: disabled })}>
      <label className={css.label} htmlFor={name}>
        {label}
      </label>
      <br />
      <input
        className={cn({ [css.input]: true, [css.invalid]: invalid })}
        type={type}
        onChange={(e) => {
          formik.setFieldValue(name, e.target.value);
        }}
        onBlur={() => {
          formik.setFieldTouched(name, true);
        }}
        style={{ maxWidth: maxWidth ? maxWidth : undefined }}
        value={value}
        name={name}
        id={name}
        disabled={formik.isSubmitting}
      />
      {invalid && <div style={{ color: "red" }}>{error}</div>}
    </div>
  );
};
</file>

<file path="web-stepik/src/components/layout/index.module.scss">
@use "../../styles/vars";
@use "../../styles/mixins" as mixins;
@use "../../../node_modules/include-media/dist/include-media" as *;

$breakpoint: "<=900px";

.layout {
  display: flex;
  flex-flow: row nowrap;
  height: 100%;
  @include media($breakpoint) {
    flex-flow: column nowrap;
  }

  .navigation {
    height: 100%;
    overflow: auto;
    flex: 0 0 200px;
    padding: 20px 30px;
    border-right: 1px solid vars.$black;
    @include media($breakpoint) {
      overflow: visible;
      flex: 0 0 auto;
      height: auto;
      border-right: none;
      border-bottom: 1px solid vars.$white;
    }

    .logo {
      width: 100%;
      max-width: 130px;
      height: auto;
      margin-bottom: 15px;
      display: block; /* Добавляем это, если лого - inline-элемент */
      padding-top: 2px;
      object-fit: contain; /* Это обеспечит правильное масштабирование */
    }

    .menu {
      .item {
        &:not(:first-child) {
          margin-top: 5px;
        }

        .link {
          @include mixins.link(rgb(164, 164, 217), rgb(229, 129, 129));
        }
      }
    }
  }

  .content {
    height: 100%;
    overflow: auto;
    flex: 1 1 100%;
    padding: 20px 30px;
    @include media($breakpoint) {
      overflow: visible;
      flex: 1 1 100%;
      height: auto;
    }
  }
}
</file>

<file path="web-stepik/src/components/layout/index.tsx">
import { Link, Outlet } from "react-router-dom";
import {
  GetAllIdeas,
  GetEditProfileRoute,
  GetNewIdea,
  GetSignIn,
  getSignOutRoute,
  GetSignUp,
} from "../../utils/routes";
import css from "./index.module.scss";
import { useMe } from "../../utils/ctx";
import { createRef } from "react";
import Logo from "../../assets/capy.svg?react";
//import AkarIconsAir from "../../assets/AkarAir"

export const LayoutContentElRef = createRef<HTMLDivElement>();

export const Layout = () => {
  const me = useMe();

  return (
    <div className={css.layout}>
      <div className={css.navigation}>
      <Logo className={css.logo} />
      {/* <AkarIconsAir className={css.logo} /> */}
        <ul className={css.menu}>
          <li className={css.item}>
            <Link className={css.link} to={GetAllIdeas()}>
              All Ideas
            </Link>
          </li>
          {me ? (
            <>
              <li className={css.item}>
                <Link className={css.link} to={GetNewIdea()}>
                  Add Idea
                </Link>
              </li>
              <li className={css.item}>
                <Link className={css.link} to={GetEditProfileRoute()}>
                  Edit Profile ({me.nick})
                </Link>
              </li>
              <li className={css.item}>
                <Link className={css.link} to={getSignOutRoute()}>
                  Log Out ({me.nick})
                </Link>
              </li>
            </>
          ) : (
            <>
              <li className={css.item}>
                <Link className={css.link} to={GetSignUp()}>
                  SignUp
                </Link>
              </li>
              <li className={css.item}>
                <Link className={css.link} to={GetSignIn()}>
                  SignIn
                </Link>
              </li>
            </>
          )}
        </ul>
      </div>
      <div className={css.content} ref={LayoutContentElRef}>
        <Outlet />
      </div>
    </div>
  );
};
</file>

<file path="web-stepik/src/pages/auth/EditProfilePage/index.tsx">
import type { TrpcRouterOutput } from '@stepik/backend/src/router'
import { ZUpdatePassowordInput } from '@stepik/backend/src/router/auth/updatePassword/input'
import { ZUpdateProfileInput } from '@stepik/backend/src/router/auth/updateProfile/input'
import { zPasswordsMustBeTheSame, zStringRequired } from '@stepik/shared/src/zod'
import { Alert } from '../../../components/Alert'
import { Button } from '../../../components/Button'
import { FormItems } from '../../../components/FormItems'
import { Input } from '../../../components/input'
import { Segment } from '../../../components/Segments'
import { UploadToCloudinary } from '../../../components/UploadToCloudinary'
import { useForm } from '../../../components/Form'
import { withPageWrapper } from '../../../utils/pageWrapper'
import trpc from '../../../utils/trpc'

const General = ({ me }: { me: NonNullable<TrpcRouterOutput['getMe']['me']> }) => {
  const trpcUtils = trpc.useUtils()
  const updateProfile = trpc.UpdateProfile.useMutation()
  const { formik, alertProps, buttonProps } = useForm({
    initialValues: {
      nick: me.nick,
      name: me.name,
      avatar: me.avatar,
    },
    validationSchema: ZUpdateProfileInput,
    onSubmit: async (values) => {
      const updatedMe = await updateProfile.mutateAsync(values)
      trpcUtils.getMe.setData(undefined, { me: updatedMe })
    },
    successMessage: 'Profile updated',
    resetOnSuccess: false,
  })

  return (
    <form onSubmit={formik.handleSubmit}>
      <FormItems>
        <Input label="Nick" name="nick" formik={formik} />
        <Input label="Name" name="name" formik={formik} />
        <UploadToCloudinary label="Avatar" name="avatar" type="avatar" preset="big" formik={formik} />
        <Alert {...alertProps} />
        <Button {...buttonProps}>Update Profile</Button>
      </FormItems>
    </form>
  )
}

const Password = () => {
  const updatePassword = trpc.UpdatePassword.useMutation()
  const { formik, alertProps, buttonProps } = useForm({
    initialValues: {
      oldPassword: '',
      newPassword: '',
      newPasswordAgain: '',
    },
    validationSchema: ZUpdatePassowordInput
      .extend({
        newPasswordAgain: zStringRequired,
      })
      .superRefine(zPasswordsMustBeTheSame('newPassword', 'newPasswordAgain')),
    onSubmit: async ({ newPassword, oldPassword }) => {
      await updatePassword.mutateAsync({ newPassword, oldPassword })
    },
    successMessage: 'Password updated',
  })

  return (
    <form onSubmit={formik.handleSubmit}>
      <FormItems>
        <Input label="Old password" name="oldPassword" type="password" formik={formik} />
        <Input label="New password" name="newPassword" type="password" formik={formik} />
        <Input label="New password again" name="newPasswordAgain" type="password" formik={formik} />
        <Alert {...alertProps} />
        <Button {...buttonProps}>Update Password</Button>
      </FormItems>
    </form>
  )
}

export const EditProfilePage = withPageWrapper({
  authorizedOnly: true,
  setProps: ({ getAuthorizedMe }) => ({
    me: getAuthorizedMe(),
  }),
  title: 'Edit Profile',
})(({ me }) => {
  return (
    <Segment title="Edit Profile">
      <Segment title="General" size={2}>
        <General me={me} />
      </Segment>
      <Segment title="Password" size={2}>
        <Password />
      </Segment>
    </Segment>
  )
})
</file>

<file path="web-stepik/src/pages/ideas/EditIdeaPage/index.tsx">
import { zUpdateInput } from '@stepik/backend/src/router/ideas/updateIdea/input'
import { canEditIdea } from '@stepik/backend/src/utils/can'
import { pick } from '@stepik/shared/src/pick'
import { useNavigate } from 'react-router-dom'
import { Alert } from '../../../components/Alert'
import { Button } from '../../../components/Button'
import { FormItems } from '../../../components/FormItems'
import { Input } from '../../../components/input'
import { Segment } from '../../../components/Segments'
import { Textarea } from '../../../components/textarea'
import { UploadToS3 } from '../../../components/uploadToS3'
import { UploadsToCloudinary } from '../../../components/UploadMoreToCloudinary'
// import { UploadsToS3 } from '../../../components/uploadsToS3'
import { useForm } from '../../../components/Form'
import { UploadsToS3 } from '../../../components/UploadsToS3'
import { withPageWrapper } from '../../../utils/pageWrapper'
import { getEditIdeaRoute, GetIdea } from '../../../utils/routes'
import trpc from '../../../utils/trpc'

export const EditIdeaPage = withPageWrapper({
  authorizedOnly: true,
  useQuery: () => {
    const { nick } = getEditIdeaRoute.useParams()
    return trpc.getIdea.useQuery({
      nick,
    })
  },
  setProps: ({ queryResult, ctx, checkExists, checkAccess }) => {
    const idea = checkExists(queryResult.data.idea, 'Idea not found')
    checkAccess(canEditIdea(ctx.me, idea), 'An idea can only be edited by the author')
    return {
      idea,
    }
  },
  title: ({ idea }) => `Edit Idea "${idea.name}"`,
})(({ idea }) => {
  const navigate = useNavigate()
  const updateIdea = trpc.UpdateIdea.useMutation()
  const { formik, buttonProps, alertProps } = useForm({
    initialValues: pick(idea, ['name', 'nick', 'description', 'text', 'images', 'certificate', 'documents']),
    validationSchema: zUpdateInput.omit({ ideaId: true }),
    onSubmit: async (values) => {
      await updateIdea.mutateAsync({ ideaId: idea.id, ...values })
      navigate(GetIdea({ nick: values.nick }))
    },
    resetOnSuccess: false,
    showValidationAlert: true,
  })

  return (
    <Segment title={`Edit Idea: ${idea.nick}`}>
      <form onSubmit={formik.handleSubmit}>
        <FormItems>
          <Input label="Name" name="name" formik={formik} />
          <Input label="Nick" name="nick" formik={formik} />
          <Input label="Description" name="description" maxWidth={500} formik={formik} />
          <Textarea label="Text" name="text" formik={formik} />
          <UploadsToCloudinary label="Images" name="images" type="image" preset="preview" formik={formik} />
          <UploadToS3 label="Certificate" name="certificate" formik={formik} />
          <UploadsToS3 label="Documents" name="documents" formik={formik} />
          <Alert {...alertProps} />
          <Button {...buttonProps}>Update Idea</Button>
        </FormItems>
      </form>
    </Segment>
  )
})
</file>

<file path="web-stepik/src/utils/env.ts">
import { z } from "zod";
import {zEnvHost, zEnvNonemptyTrimmedRequiredOnNotLocal} from '@stepik/shared/src/zod'
 
export const zEnv = z.object({
  SOURCE_VERSION: zEnvNonemptyTrimmedRequiredOnNotLocal,
  NODE_ENV: z.enum(["development", "production"]),
  VITE_BACKEND_TRPC_URL: z.string().trim().min(1),
  VITE_WEBAPP_URL: z.string().trim().min(1),
  VITE_WEBAPP_SENTRY_DSN: zEnvNonemptyTrimmedRequiredOnNotLocal,
  HOST_ENV: zEnvHost,
});

// eslint-disable-next-line no-restricted-syntax
export const env = zEnv.parse(process.env);
</file>

<file path="web-stepik/src/utils/pageWrapper.tsx">
import {
  type UseTRPCQueryResult,
  type UseTRPCQuerySuccessResult,
} from "@trpc/react-query/shared";
import React, { useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { ErrorPageComponent } from "../components/ErrorPageComponent";
import { useAppContext, type AppContext } from "./ctx";
import { NotFoundPage } from "../pages/other/NotFoundPage";
import { Loader } from "../components/Loader";
import { Helmet } from "react-helmet-async";
import {useStore} from '@nanostores/react'
import { lastVisistedNotAuthRouteStore } from "../components/NotAuthRouteTracker";

class GetAuthorizedMeError extends Error {}
class CheckExistsError extends Error {}
const checkExistsFn = <T,>(value: T, message?: string): NonNullable<T> => {
  if (!value) {
    throw new CheckExistsError(message);
  }
  return value;
};

class CheckAccessError extends Error {}
const checkAccessFn = <T,>(value: T, message?: string): void => {
  if (!value) {
    throw new CheckAccessError(message);
  }
};

type SetPropsProps<TQueryResult extends QueryResult | undefined> =
  HelperProps<TQueryResult> & {
    checkExists: typeof checkExistsFn;
    checkAccess: typeof checkAccessFn;
    getAuthorizedMe: (message?: string) => NonNullable<AppContext["me"]>;
  };

type Props = Record<string, any>;
type QueryResult = UseTRPCQueryResult<any, any>;
type QuerySuccessResult<TQueryResult extends QueryResult> =
  UseTRPCQuerySuccessResult<NonNullable<TQueryResult["data"]>, null>;
type HelperProps<TQueryResult extends QueryResult | undefined> = {
  ctx: AppContext;
  queryResult: TQueryResult extends QueryResult
    ? QuerySuccessResult<TQueryResult>
    : undefined;
};
type PageWrapperProps<
  TProps extends Props,
  TQueryResult extends QueryResult | undefined,
> = {
  redirectAuthorized?: boolean;

  authorizedOnly?: boolean;
  authorizedOnlyTitle?: string;
  authorizedOnlyMessage?: string;

  checkAccess?: (helperProps: HelperProps<TQueryResult>) => boolean;
  checkAccessTitle?: string;
  checkAccessMessage?: string;

  checkExists?: (helperProps: HelperProps<TQueryResult>) => boolean;
  checkExistsTitle?: string;
  checkExistsMessage?: string;

  useQuery?: () => TQueryResult;
  setProps?: (setPropsProps: SetPropsProps<TQueryResult>) => TProps;
  Page: React.FC<TProps>;
  showLoadingOnFetching?: boolean;
  title: string | ((titleProps: HelperProps<TQueryResult> & TProps) => string)
  isTitleExact?: boolean
};

const PageWrapper = <
  TProps extends Props = {},
  TQueryResult extends QueryResult | undefined = undefined,
>({
  authorizedOnly,
  authorizedOnlyTitle = "Please, Authorize",
  authorizedOnlyMessage = "This page is available only for authorized users",
  redirectAuthorized,
  checkAccess,
  checkAccessTitle = "Access Denied",
  checkAccessMessage = "You have no access to this page",
  checkExists,
  checkExistsTitle,
  checkExistsMessage,
  useQuery,
  setProps,
  showLoadingOnFetching = true,
  title,
  Page,
  isTitleExact = false
}: PageWrapperProps<TProps, TQueryResult>) => {
  const lastVisistedNotAuthRoute = useStore(lastVisistedNotAuthRouteStore)
  const navigate = useNavigate();
  const ctx = useAppContext();
  const queryResult = useQuery?.();

  const redirectNeeded = redirectAuthorized && ctx.me;

  useEffect(() => {
    if (redirectNeeded) {
      navigate(lastVisistedNotAuthRoute, { replace: true });
    }
  }, [redirectNeeded, navigate, lastVisistedNotAuthRoute]);

  if (
    queryResult?.isLoading ||
    (showLoadingOnFetching && queryResult?.isFetching) ||
    redirectNeeded
  ) {
    return <Loader type="page" />;
  }

  if (queryResult?.isError) {
    return <ErrorPageComponent message={queryResult.error.message} />;
  }

  if (authorizedOnly && !ctx.me) {
    return (
      <ErrorPageComponent
        title={authorizedOnlyTitle}
        message={authorizedOnlyMessage}
      />
    );
  }

  const helperProps = { ctx, queryResult: queryResult as never };

  if (checkAccess) {
    const accessDenied = !checkAccess(helperProps);
    if (accessDenied) {
      return (
        <ErrorPageComponent
          title={checkAccessTitle}
          message={checkAccessMessage}
        />
      );
    }
  }

  if (checkExists) {
    const notExists = !checkExists(helperProps);
    if (notExists) {
      return (
        <NotFoundPage title={checkExistsTitle} message={checkExistsMessage} />
      );
    }
  }
  const getAuthorizedMe = (message?: string) => {
    if (!ctx.me) {
      throw new GetAuthorizedMeError(message);
    }
    return ctx.me;
  };
  try {
    const props = setProps?.({
      ...helperProps,
      checkExists: checkExistsFn,
      checkAccess: checkAccessFn,
      getAuthorizedMe,
    }) as TProps;
    const calculatedTitle = typeof title === 'function' ? title({ ...helperProps, ...props }) : title
    const ExactTitle = isTitleExact ? calculatedTitle : `${calculatedTitle} | Web Stepik`;
    return (
      <>
        <Helmet>
          <title>{ExactTitle}</title>
        </Helmet>
        <Page {...props} />
      </>
    );
  } catch (error) {
    if (error instanceof CheckExistsError) {
      return (
        <NotFoundPage
          title={checkExistsTitle}
          message={error.message || checkExistsMessage}
        />
      );
    }
    if (error instanceof CheckAccessError) {
      return (
        <ErrorPageComponent
          title={checkAccessTitle}
          message={error.message || checkAccessMessage}
        />
      );
    }
    if (error instanceof GetAuthorizedMeError) {
      return (
        <ErrorPageComponent
          title={authorizedOnlyTitle}
          message={error.message || authorizedOnlyMessage}
        />
      );
    }
    throw error;
  }
};

export const withPageWrapper = <
  TProps extends Props = {},
  TQueryResult extends QueryResult | undefined = undefined,
>(
  pageWrapperProps: Omit<PageWrapperProps<TProps, TQueryResult>, "Page">
) => {
  return (Page: PageWrapperProps<TProps, TQueryResult>["Page"]) => {
    return () => <PageWrapper {...pageWrapperProps} Page={Page} />;
  };
};
</file>

<file path=".husky/pre-commit">
#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

pnpm lint-staged
pnpm w stylecheck
pnpm types
</file>

<file path="web-stepik/src/utils/trpc.tsx">
import { env } from "./env";
import { createTRPCReact } from "@trpc/react-query";
import type { TrpcRouter } from "@stepik/backend/src/router";
import Cookies from "js-cookie";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { httpBatchLink,loggerLink, type TRPCLink } from "@trpc/react-query";
import { SuperJSON } from "superjson";
import { observable } from '@trpc/server/observable'
import { sentryCaptureException } from './sentry'

const trpc = createTRPCReact<TrpcRouter>();

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      refetchOnWindowFocus: false,
      retry: false,
    },
  },
});

const customTrpcLink: TRPCLink<TrpcRouter> = () => {
  return ({ next, op }) => {
    return observable((observer) => {
      const unsubscribe = next(op).subscribe({
        next(value) {
          observer.next(value)
        },
        error(error) {
          if (env.NODE_ENV !== 'development') {
            console.error(error)
          }
          const expected = error.data?.expected
          if (!expected) {
            sentryCaptureException(error)
          }
          observer.error(error)
        },
        complete() {
          observer.complete()
        },
      })
      return unsubscribe
    })
  }
}

const trpcClient = trpc.createClient({
  transformer: SuperJSON,
  links: [
    customTrpcLink,
    loggerLink({
      enabled: () => env.NODE_ENV === 'development'
    }
    ),
    httpBatchLink({
      url: env.VITE_BACKEND_TRPC_URL,
      headers: () => {
        const token = Cookies.get("token");
        return {
          ...(token && { authorization: `Bearer ${token}` }),
        };
      },
    }),
  ],
});

export const TrpcProvider = ({ children }: { children: React.ReactNode }) => {
  return (
    <trpc.Provider client={trpcClient} queryClient={queryClient}>
      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
    </trpc.Provider>
  );
};
export default trpc;
</file>

<file path="web-stepik/vite.config.ts">
import react from "@vitejs/plugin-react";
import svgr from "vite-plugin-svgr";
import { defineConfig, loadEnv } from "vite";
import { sentryVitePlugin } from '@sentry/vite-plugin'

export default defineConfig(({ mode  }) => {
  const env = loadEnv(mode, process.cwd(), "");
  const publicEnv = Object.entries(env).reduce((acc, [key, value]) => {
    if (key.startsWith('VITE_') || ["HOST_ENV", "NODE_ENV", "SOURCE_VERSION"].includes(key)) {
      return {
        ...acc,
        [key]: value,
      }
    }
    return acc
  }, {})

  if (env.HOST_ENV !== 'local') {
    if (!env.SENTRY_AUTH_TOKEN) {
      throw new Error('SENTRY_AUTH_TOKEN is not defined')
    }
    if (!env.SOURCE_VERSION) {
      throw new Error('SOURCE_VERSION is not defined')
    }
  }

  return {
    plugins: [
      react(),
      svgr(),
      !env.SENTRY_AUTH_TOKEN
        ? undefined
        : sentryVitePlugin({
            org: 'no-lox',
            project: 'webapp',
            authToken: env.SENTRY_AUTH_TOKEN,
            release: { name: env.SOURCE_VERSION },
          }),
    ],
    build: {
      sourcemap: true,
    },
    server: {
      port: +env.PORT,
    },
    preview: {
      port: +env.PORT,
    },
    define: {
      'process.env': publicEnv,
    },
  };
});
</file>

<file path="backend/package.json">
{
  "name": "@stepik/backend",
  "version": "0.0.0",
  "private": "true",
  "devDependencies": {
    "@sentry/cli": "^2.43.0",
    "@types/cors": "^2.8.17",
    "@types/cron": "^2.4.3",
    "@types/debug": "^4.1.12",
    "@types/express": "^5.0.0",
    "@types/jsonwebtoken": "^9.0.9",
    "@types/lodash": "^4.17.15",
    "@types/node": "^22.10.7",
    "@types/passport": "^1.0.17",
    "@types/passport-jwt": "^4.0.1",
    "@types/randomstring": "^1.3.0",
    "@types/triple-beam": "^1.3.5",
    "@typescript-eslint/eslint-plugin": "^8.26.1",
    "@typescript-eslint/parser": "^8.26.1",
    "dotenv-cli": "^8.0.0",
    "eslint-plugin-import": "^2.31.0",
    "prisma": "^6.4.1",
    "ts-node": "^10.9.2",
    "ts-node-dev": "^2.0.0"
  },
  "scripts": {
    "dev": "cross-env NODE_ENV=development ts-node-dev --watch ./src/emails/dist,./.env --rs --exit-child ./src/index.ts",
    "build-emails": "rimraf \"./src/emails/dist\" && mkdir \"./src/emails/dist\" && mjml \"./src/emails/[!_]*.mjml\" -o \"./src/emails/dist\"",
    "copy-emails": "copyfiles ./src/emails/dist/*.html ./dist/backend",
    "watch-emails": "mjml -w ./src/emails/[!_]*.mjml -o ./src/emails/dist",
    "build-ts": "rimraf ./dist && tsc --build ./tsconfig.build.json",
    "build": "pnpm build-emails && pnpm build-ts && pnpm copy-emails",
    "start": "cross-env NODE_ENV=production node ./dist/backend/src/index.js",
    "types": "tsc --noEmit --project ./tsconfig.json",
    "lint": "eslint --cache --cache-location ./node_modules/.cache/.eslintcache .",
    "pmd": "prisma migrate dev",
    "pmt": "dotenv -e ./.env.test prisma migrate deploy",
    "pgc": "prisma generate",
    "test": "jest --runInBand",
    "prettify": "prettier --loglevel warn --cache --write '{src/**/*,*}.{ts,tsx,js,json,yml,scss}' '!**/{node_modules,dist}/**/*'",
    "prepare": "pnpm pgc && ts-patch install -s",
    "sentry-release": "dotenv -- bash -c 'sentry-cli releases new ${SOURCE_VERSION} --finalize --org no-lox --project backend --auth-token ${SENTRY_AUTH_TOKEN}'",
    "sentry-sourcemaps": "dotenv -- bash -c 'sentry-cli releases files ${SOURCE_VERSION} upload-sourcemaps ./dist --org no-lox --project backend'",
    "sentry": "pnpm sentry-release && pnpm sentry-sourcemaps"
  },
  "prisma": {
    "schema": "./src/prisma/schema.prisma"
  },
  "dependencies": {
    "@aws-sdk/client-s3": "^3.787.0",
    "@aws-sdk/s3-request-presigner": "^3.787.0",
    "@prisma/client": "^6.4.1",
    "@sentry/integrations": "^7.114.0",
    "@sentry/node": "^9.11.0",
    "@stepik/shared": "workspace:*",
    "@stepik/web-stepik": "workspace:*",
    "@trpc/server": "^10.45.2",
    "axios": "^1.8.4",
    "cloudinary": "^2.6.0",
    "cors": "^2.8.5",
    "cron": "^4.1.3",
    "date-fns": "^4.1.0",
    "debug": "^4.4.0",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "fast-glob": "^3.3.3",
    "handlebars": "^4.7.8",
    "jsonwebtoken": "^9.0.2",
    "lodash": "^4.17.21",
    "mjml": "^4.15.3",
    "passport": "^0.7.0",
    "passport-jwt": "^4.0.1",
    "picocolors": "^1.1.1",
    "randomstring": "^1.3.1",
    "serialize-error": "^8.1.0",
    "superjson": "1.13.1",
    "triple-beam": "^1.4.1",
    "trpc-playground": "^1.0.4",
    "winston": "^3.17.0",
    "yaml": "^2.7.1",
    "zod": "^3.24.2"
  },
  "Transform": "AWS::Serverless-2016-10-31"
}
</file>

<file path="backend/src/index.ts">
import { env } from "./lib/env";
import cors from "cors";
import express from "express";
import { logger } from "../src/lib/logger";
import { applyCron } from "./lib/cron";
import { AppContext, createAppContext } from "./lib/ctx";
import { applyPassportToExpressApp } from "./lib/passport";
import { initSentry } from "./lib/sentry";
import { ApplyTrpcToExpressApp } from "./lib/trpc";
import { trpcRouter } from "./router";
import { presetDb } from "./scripts/presetDB";

void (async () => {
  let ctx: AppContext | null = null;
  try {
    const app = express();
    initSentry()
    ctx = createAppContext();
    await presetDb(ctx);
    app.use(cors());

    app.get("/ping", (req, res) => {
      res.send("pong");
    });
    app.use((error: unknown, req: express.Request, res: express.Response, next: express.NextFunction) => {
      logger.error('express', error)
      if (res.headersSent) {
        next(error)
        return
      }
      res.status(500).send('Internal server error')
    })
    applyCron(ctx)
    applyPassportToExpressApp(app, ctx);
    await ApplyTrpcToExpressApp(app, ctx, trpcRouter);
    
    app.listen(env.PORT, () => {
      logger.info("app", `listening on https://localhost:${env.PORT}`);
    });
  } catch (error) {
    logger.error("app", error);
    await ctx?.stop();
  }
})();
</file>

<file path="web-stepik/package.json">
{
  "name": "@stepik/web-stepik",
  "private": true,
  "version": "0.0.0",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint --cache --cache-location ./node_modules/.cache/.eslintcache .",
    "preview": "vite preview",
    "test": "dotenv -e .env.test -e .env jest",
    "stylelint": "stylelint --cache --cache-location ./node_modules/.cache/.stylelintcache \"src/**/*.scss\"",
    "stylecheck": "sass --update -q ./src:./node_modules/.cache/.stylecheckcache",
    "types": "tsc --noEmit --project ./tsconfig.json && tsc --noEmit --project ./tsconfig.node.json"
  },
  "dependencies": {
    "@nanostores/react": "^0.8.4",
    "@sentry/react": "^9.11.0",
    "@stepik/backend": "workspace:*",
    "@stepik/shared": "workspace:*",
    "@tanstack/react-query": "^5.65.1",
    "@trpc/client": "^10.45.2",
    "@trpc/react-query": "^10.45.2",
    "@trpc/server": "^10.45.2",
    "classnames": "^2.5.1",
    "date-fns": "^4.1.0",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-react": "^7.37.5",
    "formik": "^2.4.6",
    "formik-validator-zod": "^2.2.0",
    "include-media": "^2.0.0",
    "js-cookie": "^3.0.5",
    "lodash": "^4.17.21",
    "nanostores": "^0.11.4",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-helmet-async": "^2.0.5",
    "react-icons": "^5.5.0",
    "react-image-gallery": "^1.4.0",
    "react-infinite-scroller": "^1.2.6",
    "reset-css": "^5.0.2",
    "sass": "^1.85.0",
    "sass-migrator": "^2.3.1",
    "superjson": "1.13.1",
    "usehooks-ts": "^3.1.1",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@eslint/compat": "^1.2.8",
    "@eslint/eslintrc": "^3.3.1",
    "@eslint/js": "^9.22.0",
    "@sentry/vite-plugin": "^3.3.1",
    "@svgr/cli": "^8.1.0",
    "@svgr/plugin-jsx": "^8.1.0",
    "@svgr/webpack": "^8.1.0",
    "@types/js-cookie": "^3.0.6",
    "@types/lodash": "^4.17.15",
    "@types/react": "^18.3.18",
    "@types/react-dom": "^18.3.5",
    "@types/react-image-gallery": "^1.2.4",
    "@types/react-infinite-scroller": "^1.2.5",
    "@typescript-eslint/eslint-plugin": "^8.24.0",
    "@typescript-eslint/parser": "^8.24.0",
    "@vitejs/plugin-react": "^4.3.4",
    "globals": "^15.14.0",
    "prettier": "^3.4.2",
    "stylelint": "^16.14.1",
    "stylelint-config-prettier-scss": "^1.0.0",
    "stylelint-config-standard-scss": "^14.0.0",
    "typescript": "~5.6.2",
    "vite": "^6.0.5",
    "vite-plugin-svgr": "^4.3.0"
  }
}
</file>

<file path="web-stepik/src/App.tsx">
//import { useState } from 'react'
import { TrpcProvider } from "./utils/trpc";
import AllIdeas from "./pages/ideas/AllIdeas";
import { BrowserRouter, Route, Routes } from "react-router-dom";
import ViewIdea from "./pages/ideas/ViewIdea";
import {
  GetAllIdeas,
  GetIdea,
  GetNewIdea,
  GetSignUp,
  GetSignIn,
  getSignOutRoute,
  getEditIdeaRoute,
  GetEditProfileRoute,
} from "./utils/routes";
import { Layout } from "./components/layout";
import "./styles/global.scss";
import { NewIdeaPage } from "./pages/ideas/NewIdeaPage";
import { SignUpPage } from "./pages/auth/SignUpPage";
import { SignInPage } from "./pages/auth/SignInPage";
import { SignOutPage } from "./pages/auth/SignOutPage";
import { EditIdeaPage } from "./pages/ideas/EditIdeaPage";
import { AppContextProvider } from "./utils/ctx";
import { NotFoundPage } from "./pages/other/NotFoundPage";
import { EditProfilePage } from "./pages/auth/EditProfilePage";
import {HelmetProvider} from 'react-helmet-async'
import { NotAuthRouteTracker } from "./components/NotAuthRouteTracker";
import { SentryUser } from './utils/sentry'


export const App = () => {
  return (
    <HelmetProvider>
    <TrpcProvider>
      <AppContextProvider>
        <BrowserRouter>
        <SentryUser />
        <NotAuthRouteTracker />
          <Routes>
            <Route path={getSignOutRoute.definition} element={<SignOutPage />}></Route>
            <Route element={<Layout />}>
              <Route path={GetAllIdeas.definition} element={<AllIdeas />}></Route>
              <Route
                path={GetIdea.definition}
                element={<ViewIdea />}
              ></Route>
              <Route
                path={getEditIdeaRoute.definition}
                element={<EditIdeaPage />}
              ></Route>
              <Route path={GetNewIdea.definition} element={<NewIdeaPage />}></Route>
              <Route
                path={GetEditProfileRoute.definition}
                element={<EditProfilePage />}
              ></Route>
              <Route path={GetSignUp.definition} element={<SignUpPage />}></Route>
              <Route path={GetSignIn.definition} element={<SignInPage />}></Route>
              <Route path="*" element={<NotFoundPage />} />
            </Route>
          </Routes>
        </BrowserRouter>
      </AppContextProvider>
    </TrpcProvider>
    </HelmetProvider>
  );
};
</file>

<file path="package.json">
{
  "name": "stepik",
  "version": "0.0.0",
  "private": "true",
  "dependencies": {
    "@tanstack/react-query": "4",
    "@trpc/client": "^10.45.2",
    "@trpc/next": "^10.45.2",
    "@trpc/react": "^9.27.4",
    "@trpc/server": "^10.45.2",
    "cors": "^2.8.5",
    "eslint": "^9.20.1",
    "eslint-plugin-node": "^11.1.0",
    "express": "^4.21.2",
    "react-dom": "^18.3.1",
    "react-router-dom": "^7.1.5",
    "w": "^1.1.0"
  },
  "pnpm": {
    "overrides": {
      "@tanstack/react-query": "4.36.1"
    }
  },
  "scripts": {
    "b": "pnpm --filter @stepik/backend",
    "w": "pnpm --filter @stepik/web-stepik",
    "sh": "pnpm --filter @stepik/shared",
    "dev": "pnpm -r --parallel dev",
    "types": "pnpm -r --parallel types",
    "test": "pnpm -r test",
    "prepare": "husky && husky install"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3.3.1",
    "@types/express": "^5.0.0",
    "@types/jest": "^29.5.14",
    "@types/node": "^22.10.7",
    "@typescript-eslint/eslint-plugin": "^8.24.0",
    "@typescript-eslint/parser": "^8.24.0",
    "concurrently": "^9.1.2",
    "copyfiles": "^2.4.1",
    "cross-env": "^7.0.3",
    "eslint-config-love": "^118.0.0",
    "eslint-config-prettier": "^10.0.1",
    "eslint-config-react-app": "^7.0.1",
    "eslint-config-standard-with-typescript": "^43.0.1",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-jest": "^28.11.0",
    "husky": "^8.0.0",
    "jest": "^29.7.0",
    "lint-staged": "^15.4.3",
    "node": "link:@types\\node",
    "rimraf": "^6.0.1",
    "ts-jest": "^29.3.1",
    "ts-patch": "^3.3.0",
    "typescript": "^5.7.3",
    "typescript-transform-paths": "^3.5.5"
  },
  "type": "module"
}
</file>

</files>
